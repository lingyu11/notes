{"config":{"lang":["zh","en","ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to lingyu's note!","text":"<p> \u7ea6 64 \u4e2a\u5b57 </p> <p>\u4ec5\u7528\u4f5c\u4e2a\u4eba\u5b66\u4e60\u8bb0\u5f55</p> <p>Don't just read it; fight it!</p> <p>Ask your own questions,</p> <p>look for your own examples,</p> <p>discover your own proofs. </p> <p>Is the hypothesis necessary?</p> <p>Is the converse true?</p> <p>What happens in the classical special case? </p> <p>What about the degenerate cases? </p> <p>Where does the proof use the hypothesis?</p> <p>\u2014\u2014 Paul Halmos</p>"},{"location":"ICS/ICS_Lab/","title":"Lab","text":"<p> \u7ea6 47 \u4e2a\u5b57 </p>"},{"location":"ICS/ICS_Lab/#pa0","title":"PA0 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","text":"<ol> <li>\u672c\u5b9e\u9a8c\u4f7f\u7528\u7684 ISA \u662f riscv32\u3002</li> </ol>"},{"location":"ICS/ICS_Lab/#pa1","title":"PA1 \u6700\u7b80\u5355\u7684\u8ba1\u7b97\u673a","text":""},{"location":"ICS/ICS_Lab/#pa2","title":"PA2 \u51af\u8bfa\u4f9d\u66fc\u8ba1\u7b97\u673a\u7cfb\u7edf","text":""},{"location":"ICS/ICS_Lab/#pa3","title":"PA3 \u6279\u5904\u7406\u7cfb\u7edf","text":""},{"location":"ICS/ICS_Lab/#pa4","title":"PA4 \u5206\u65f6\u591a\u4efb\u52a1","text":""},{"location":"ICS/ICS_Lectures/","title":"Lectures","text":"<p> \u7ea6 1868 \u4e2a\u5b57  430 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 12 \u5206\u949f</p>"},{"location":"ICS/ICS_Lectures/#_1","title":"\u8d44\u6599","text":"<ul> <li>\u8bfe\u7a0b\u7f51\u7ad9</li> <li>\u5b9e\u9a8c\u7f51\u7ad9</li> <li>\u8bfe\u7a0b\u89c6\u9891</li> </ul>"},{"location":"ICS/ICS_Lectures/#lecture-1-the-missing-course-of-your-cs-education","title":"Lecture 1 The Missing Course of Your CS Education","text":"<ol> <li> <p>\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60\u8ba1\u7b97\u673a\u7cfb\u7edf\u57fa\u7840</p> </li> <li> <p>man\u5feb\u901f\u5165\u95e8</p> </li> <li> <p>Linux\u5165\u95e8\u6559\u7a0b</p> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-2-linuxc","title":"Lecture 2 Linux\u548cC\u8bed\u8a00\u62fe\u9057","text":"<ol> <li> <p>\u7a7a == \u7a7a \u4e3a true\uff08aa\u548cbb\u90fd\u672a\u5b9a\u4e49\uff0c\u662f\u7a7a\uff09\uff0c\u56e0\u6b64\u8f93\u51fa yes</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n#if aa == bb\n    printf(\"Yes\\n\");\n#else\n    printf(\"No\\n\");\n#endif\n}\n</code></pre> Bash<pre><code>linux$ gcc a.c &amp;&amp; ./a.out\nYes\n</code></pre> </li> <li> <p>X-Macros\uff1a</p> <p><code>#x</code> \u662f\u4e00\u4e2a\u9884\u5904\u7406\u8fd0\u7b97\u7b26\uff0c\u5b83\u4f1a\u5c06\u53c2\u6570 <code>x</code> \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002</p> <p><code>#x</code> \u4e24\u8fb9\u65e0\u8bba\u591a\u5c11\u7a7a\u683c\uff0c\u8f93\u51fa\u90fd\u662f\u6ca1\u6709\u7a7a\u683c\u7684:</p> <p><code>puts(\"Hello, \"#x\"!\")</code> \u7b49\u4ef7\u4e8e <code>puts(\"Hello, \" #x \"!\")</code></p> C<pre><code>#include &lt;stdio.h&gt;\n\n#define NAMES(X) \\\n    X(Tom) X(Jerry) X(Tyke) X(Spike)\n\nint main() \n{ \n    #define PRINT(x) puts(\"Hello, \"#x\"!\");\n    NAMES(PRINT) \n}\n</code></pre> Bash<pre><code>linux$ gcc a.c &amp;&amp; ./a.out\nHello, Tom!\nHello, Jerry!\nHello, Tyke!\nHello, Spike!\n</code></pre> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-3-c","title":"Lecture 3 C\u8bed\u8a00\u62fe\u9057: \u673a\u5236\u4e0e\u5b9e\u8df5","text":"<ol> <li> <p>a.c</p> C<pre><code>int foo(int n) \n{ \n    int sum = 0; \n    for (int i = 1; i &lt;= n; i++) \n    { \n        sum += i; \n    } \n    return sum; \n}\n</code></pre> <p><code>gcc -S a.c</code> \u751f\u6210\u6c47\u7f16\u4ee3\u7801 a.s:</p> GAS<pre><code>foo:\n    pushq   %rbp\n    movq    %rsp, %rbp\n    movl    %edi, -20(%rbp)  # n   -&gt; -20(%rbp)\n    movl    $0, -8(%rbp)     # sum -&gt; -8(%rbp)\n    movl    $1, -4(%rbp)     # i   -&gt; -4(%rbp)\n    jmp .L2\n.L3:\n    movl    -4(%rbp), %eax\n    addl    %eax, -8(%rbp)\n    addl    $1, -4(%rbp)\n.L2:\n    movl    -4(%rbp), %eax\n    cmpl    -20(%rbp), %eax\n    jle .L3\n    movl    -8(%rbp), %eax\n    popq    %rbp\n    ret\n</code></pre> <p>\u53d8\u91cf\u66ff\u6362\u540e\u66f4\u6613\u8bfb\uff1a</p> GAS<pre><code>foo:\n    pushq   %rbp\n    movq    %rsp, %rbp\n    movl    %edi, n\n    movl    $0, sum\n    movl    $1, i\n    jmp .L2\n.L3:\n    movl    i, %eax\n    addl    %eax, sum\n    addl    $1, i\n.L2:\n    movl    i, %eax\n    cmpl    n, %eax\n    jle .L3\n    movl    sum, %eax\n    popq    %rbp\n    ret\n</code></pre> <p></p> </li> <li> <p>b.c</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint foo(int n);\n\nint main()\n{\n    printf(\"%d\\n\", foo(100));\n}\n</code></pre> Bash<pre><code>linux$ gcc a.c -c &amp;&amp; gcc b.c -c\nlinux$ gcc a.o b.o -static\nlinux$ objdump -d a.out | less\n0000000000401745 &lt;foo&gt;:\n401745:       f3 0f 1e fa             endbr64 \n401749:       55                      push   %rbp\n40174a:       48 89 e5                mov    %rsp,%rbp\n40174d:       89 7d ec                mov    %edi,-0x14(%rbp)\n401750:       c7 45 f8 00 00 00 00    movl   $0x0,-0x8(%rbp)\n401757:       c7 45 fc 01 00 00 00    movl   $0x1,-0x4(%rbp)\n40175e:       eb 0a                   jmp    40176a &lt;foo+0x25&gt;\n401760:       8b 45 fc                mov    -0x4(%rbp),%eax\n401763:       01 45 f8                add    %eax,-0x8(%rbp)\n401766:       83 45 fc 01             addl   $0x1,-0x4(%rbp)\n40176a:       8b 45 fc                mov    -0x4(%rbp),%eax\n40176d:       3b 45 ec                cmp    -0x14(%rbp),%eax\n401770:       7e ee                   jle    401760 &lt;foo+0x1b&gt;\n401772:       8b 45 f8                mov    -0x8(%rbp),%eax\n401775:       5d                      pop    %rbp\n401776:       c3                      ret    \n\n0000000000401777 &lt;main&gt;:\n401777:       f3 0f 1e fa             endbr64 \n40177b:       55                      push   %rbp\n40177c:       48 89 e5                mov    %rsp,%rbp\n40177f:       bf 64 00 00 00          mov    $0x64,%edi\n401784:       e8 bc ff ff ff          call   401745 &lt;foo&gt; # e8 is call, bc ff ff ff \u662f foo \u76f8\u5bf9\u4e8e\u4e0b\u4e00\u6761 pc \u7684offset\n401789:       89 c6                   mov    %eax,%esi    # \u4e0b\u4e00\u6761 pc \u662f\u8fd9\u4e2a\uff0c\u5730\u5740\u662f 0x401789\n40178b:       48 8d 05 72 68 09 00    lea    0x96872(%rip),%rax        # 498004 &lt;_IO_stdin_used+0x4&gt;\n401792:       48 89 c7                mov    %rax,%rdi\n401795:       b8 00 00 00 00          mov    $0x0,%eax\n40179a:       e8 31 9e 00 00          call   40b5d0 &lt;_IO_printf&gt;\n40179f:       b8 00 00 00 00          mov    $0x0,%eax\n4017a4:       5d                      pop    %rbp\n4017a5:       c3                      ret    \n4017a6:       66 2e 0f 1f 84 00 00    cs nopw 0x0(%rax,%rax,1)\n4017ad:       00 00 00 \n</code></pre> <p>0x401789 + bc ff ff ff = 0x401745 (foo\u7684\u5730\u5740)</p> <p>\u4e4b\u6240\u4ee5\u662f\u76f8\u5bf9\u4e8e\u4e0b\u4e00\u6761 pc \u7684 offset\uff0c\u662f\u56e0\u4e3a\uff1a\u590d\u6742\u6307\u4ee4\u96c6\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u957f\u5ea6\u5e76\u4e0d\u56fa\u5b9a\uff0c\u5982\u679c\u662f\u76f8\u5bf9\u5f53\u524d\u6307\u4ee4\u7684 offset \u4f1a\u6709\u70b9\u9ebb\u70e6\uff0c\u8fd8\u5f97\u8ba1\u7b97\u5f53\u524d\u6307\u4ee4\u7684\u957f\u5ea6\u662f\u591a\u5c11\u3002</p> </li> <li> <p>\u6570\u5b57\u903b\u8f91\u7535\u8def\u6a21\u62df\u5668</p> C<pre><code>int  X = 0,  Y = 0;\nint X1 = 0, Y1 = 0;\nwhile (1)\n{\n    X1 = (!X &amp;&amp; Y) || (X &amp;&amp; !Y);\n    Y1 = !Y;\n    X = X1; Y = Y1;\n}\n</code></pre> <p>\u6539\u5199\u540e\uff0c\u589e\u52a0\u4e00\u4e2a Z \u4e5f\u5f88\u5bb9\u6613\uff1a</p> C<pre><code>#define FORALL_REGS(_)      _(X) _(Y) \n#define LOGIC               X1 = (!X &amp;&amp; Y) || (X &amp;&amp; !Y); \\\n                            Y1 = !Y;\n#define DEFINE(X)           static int X, X##1;\n#define UPDATE(X)           X = X##1;\n#define PRINT(X)            printf(#X \" = %d; \", X);\n\nint main() \n{ \n    FORALL_REGS(DEFINE); \n\n    while (1) // clock\n    {\n        FORALL_REGS(PRINT); \n        putchar('\\n\u2019); \n        sleep(1); \n        LOGIC; \n        FORALL_REGS(UPDATE); \n    } \n}\n</code></pre> </li> <li> <p>\u4f7f\u7528\u987a\u65f6\u9488\u87ba\u65cb\u6cd5\u5219\u7684\u6848\u4f8b\uff1a</p> C<pre><code>void (*signal (int sig, void (*func)(int)))(int);\n</code></pre> <p></p> <p></p> <p></p> <p>\u53ef\u8bfb\u7248\u672c\uff1a</p> C<pre><code>typedef void (*sighandler_t)(int);\nsighandler_t signal(int, sighandler_t);\n</code></pre> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-4-1","title":"Lecture 4 \u4ee3\u7801\u9009\u8bb21\uff1a\u7f16\u8bd1\u8fd0\u884c","text":"<ol> <li> <p>A Visual Git Reference</p> </li> <li> <p>\u8ba1\u7b97\u673a\u662f\u4e2a\u72b6\u6001\u673a\uff0c\u53ef\u4ee5\u628a\u8ba1\u7b97\u673a\u5212\u5206\u6210\u4e24\u90e8\u5206\uff1a</p> <ul> <li>\u65f6\u5e8f\u903b\u8f91\u90e8\u4ef6(\u5b58\u50a8\u5668\uff0c\u8ba1\u6570\u5668\uff0c\u5bc4\u5b58\u5668)</li> <li>\u7ec4\u5408\u903b\u8f91\u90e8\u4ef6(\u52a0\u6cd5\u5668\u7b49)</li> </ul> <p>\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u5230\u6765\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u673a\u6839\u636e\u5f53\u524d\u65f6\u5e8f\u903b\u8f91\u90e8\u4ef6\u7684\u72b6\u6001\uff0c\u5728\u7ec4\u5408\u903b\u8f91\u90e8\u4ef6\u7684\u4f5c\u7528\u4e0b\uff0c\u8ba1\u7b97\u51fa\u5e76\u8f6c\u79fb\u5230\u4e0b\u4e00\u65f6\u949f\u5468\u671f\u7684\u65b0\u72b6\u6001\u3002</p> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-5-2","title":"Lecture 5 \u4ee3\u7801\u9009\u8bb22\uff1a\u4ee3\u7801\u5bfc\u8bfb","text":"<ol> <li> <p>static inline\uff1a\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u8f83\u77ed\u4e14\u6027\u80fd\u6538\u5173\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 static inline \u51fd\u6570\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\u3002\u4f8b\u5b50 (/riscv32/reg.h)\uff1a</p> C<pre><code>static inline int check_reg_index(int idx) { \n    IFDEF(CONFIG_RT_CHECK, assert(idx &gt;= 0 &amp;&amp; index &lt; 32)); \n    return idx; \n}\n</code></pre> <p>\u5982\u679c\u4ec5\u4ec5\u4f7f\u7528 static\uff0c\u90a3\u4e48\u7531\u4e8e x.c \u4ec5\u4ec5\u662f include \u4e86 a.h\uff0c\u4f46\u5374\u672a\u4f7f\u7528 function f\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5 warning\uff0c\u5728 <code>-Wall -Werror</code> \u9009\u9879\u4e0b\u5219\u662f error \u4e86\uff1a</p> <p></p> <p>\u6ce8\u610f static inline \u4ec5\u4ec5\u662f\u5bf9\u7f16\u8bd1\u5668\u7684\u5efa\u8bae\uff0c\u7f16\u8bd1\u5668\u672a\u5fc5\u4e00\u5b9a\u9075\u5faa\u5b83\u3002</p> </li> <li> <p>\u9519\u8bef\u7684 assert \u5199\u6cd5\uff1a</p> C<pre><code>#define assert(cond) if (!(cond)) panic(...);\n</code></pre> <p>\u539f\u56e0\uff1a</p> C<pre><code>if (...) assert(0); // \u4e0a\u9762\u7684assert\u9519\u4e86\uff0c\u5bfc\u81f4\u4e24\u4e2aif\u4e00\u4e2aelse\uff0c\u4e0d\u5339\u914d\nelse ...    \n</code></pre> <p>\u6b63\u786e\u7684\u5199\u6cd5\uff1a\u7528 do while(0) \u6216\u8005 ({}) \u5305\u88f9\u8d77\u6765\uff1a</p> C<pre><code>#define assert(cond) \\ // nemu/**/debug.h\ndo { \\\n    if (!(cond)) { \\\n        fprintf(stderr, \"Fail @ %s:%d\", __FILE__, __LINE__); \\\n        exit(1); \\\n    } \\\n} while (0)\n\n#define assert(cond) ({ ... }) // GCC\n</code></pre> </li> <li> <p><code>ls -l --color</code>\u4e5f\u662f\u4f7f\u7528 ANSI \u7684\u8f6c\u4e49\u5e8f\u5217 (ANSI Escape Sequences) \u6765\u63a7\u5236\u8f93\u51fa\u7684\u989c\u8272\u3002</p> Bash<pre><code>linux$ ls -l | less\ntotal 56K\ndrwxr-xr-x 3 user user 4.0K Nov 23 20:47 build\ndrwxr-xr-x 2 user user 4.0K Nov 23 20:47 scripts\n-rw-r--r-- 1 user user    6 Nov 23 20:46 test.txt\n-rw-r--r-- 1 user user    0 Nov 23 18:18 Misc\n(END)\nlinux$ ls -l --color | less\ntotal 56K\ndrwxr-xr-x 3 user user 4.0K Nov 23 20:47 ESC[0mESC[01;34mbuildESC[0m\ndrwxr-xr-x 2 user user 4.0K Nov 23 20:47 ESC[01;34mscriptsESC[0m\n-rw-r--r-- 1 user user    6 Nov 23 20:46 test.txt\n-rw-r--r-- 1 user user    0 Nov 23 18:18 Misc\n(END)\n</code></pre> </li> <li> <p>\u5b8f\u5d4c\u5957\u592a\u591a\uff0c\u4eba\u8089\u5c55\u5f00\u592a\u96be\uff1f\u6211\u4eec\u65e2\u7136\u77e5\u9053 Makefile \u91cc\u54ea\u4e00\u884c\u662f .c \u2192 .o \u7684\u8f6c\u6362\uff0c\u6211\u4eec\u6dfb\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684 gcc -E \u662f\u4e0d\u662f\u5c31\u884c\u4e86\uff1f</p> Makefile<pre><code>$(OBJ_DIR)/%.o: src/%.c\n    @$(CC) $(CFLAGS) $(SO_CFLAGS) -c -o $@ $&lt;\n    @$(CC) $(CFLAGS) $(SO_CFLAGS) -E -MF /dev/null $&lt; | \\\n        grep -ve '^#' | \\\n        clang-format - &gt; $(basename $@).i\n</code></pre> <ul> <li><code>-MF</code> \u662fGCC\u7f16\u8bd1\u5668\u7684\u4e00\u4e2a\u9009\u9879\uff0c\u7528\u4e8e\u6307\u5b9a\u751f\u6210\u7684\u4f9d\u8d56\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5177\u4f53\u6765\u8bf4\uff0c<code>-MF</code> \u9009\u9879\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u8fd9\u4e2a\u6587\u4ef6\u540d\u662f\u7528\u6765\u5b58\u50a8\u7f16\u8bd1\u5668\u89e3\u6790\u6e90\u6587\u4ef6\u540e\u751f\u6210\u7684\u4f9d\u8d56\u5173\u7cfb\u4fe1\u606f\u7684\u3002</li> <li><code>clang-format</code>\uff1a\u8fd9\u662f\u4e00\u4e2a\u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177\uff0c\u7528\u4e8e\u7edf\u4e00\u4ee3\u7801\u98ce\u683c\u3002<code>-</code> \u662f <code>clang-format</code> \u7684\u4e00\u4e2a\u8f93\u5165\u9009\u9879\uff0c\u8868\u793a\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6570\u636e\u3002</li> </ul> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-6","title":"Lecture 6 \u6570\u636e\u7684\u673a\u5668\u7ea7\u8868\u793a","text":"<ol> <li> <p>Bit Set: \u6c42 S \u4e8c\u8fdb\u5236\u8868\u793a\u6709\u591a\u5c11\u4e2a1</p> C<pre><code>int bitset_size(uint32_t S) { \n    int n; \n    for (int i = 0; i &lt; 32; i++) { \n        n += bitset_contains(S, i); \n    } \n    return n; \n}\n\nint bitset_size1(uint32_t S) { // SIMD\uff0c\u66f4\u5feb\n    S = (S &amp; 0x55555555) + ((S &gt;&gt; 1)  &amp; 0x55555555);  // 0101 0101 0101 0101 0101 0101 0101 0101\n    S = (S &amp; 0x33333333) + ((S &gt;&gt; 2)  &amp; 0x33333333);  // 0011 0011 0011 0011 0011 0011 0011 0011\n    S = (S &amp; 0x0F0F0F0F) + ((S &gt;&gt; 4)  &amp; 0x0F0F0F0F);  // 0000 1111 0000 1111 0000 1111 0000 1111\n    S = (S &amp; 0x00FF00FF) + ((S &gt;&gt; 8)  &amp; 0x00FF00FF);  // 0000 0000 1111 1111 0000 0000 1111 1111\n    S = (S &amp; 0x0000FFFF) + ((S &gt;&gt; 16) &amp; 0x0000FFFF);  // 0000 0000 0000 0000 1111 1111 1111 1111\n    return S; \n}\n</code></pre> <p>\u6bcf\u4e24\u4f4d\u7684 1 \u7684\u4e2a\u6570\u76f8\u52a0\uff0c\u7136\u540e\u518d\u6bcf\u56db\u4f4d\u6570\u7684 1 \u7684\u4e2a\u6570\u76f8\u52a0\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f 1 \u7684\u4e2a\u6570\u3002example\uff1aS \u662f 0x47CBAE6B = 0b 0100 0111 1100 1011 1010 1110 0110 1011\uff0c\u90a3\u4e48\uff1a</p> Text Only<pre><code>\u6bcf2\u4f4d\u7684 1 \u7684\u4e2a\u6570\u76f8\u52a0\u540e:  10 12 20 12 11 21 11 12 = 0b 0100 0110 1000 0110 0101 1001 0101 0110\n\u6bcf4\u4f4d\u7684 1 \u7684\u4e2a\u6570\u76f8\u52a0\u540e:  1  3  2  3  2  3  2  3  = 0b 0001 0011 0010 0011 0010 0011 0010 0011\n\u6bcf8\u4f4d\u7684 1 \u7684\u4e2a\u6570\u76f8\u52a0\u540e:  4     5     5     5     = 0b 0000 0100 0000 0101 0000 0101 0000 0101\n\u6bcf16\u4f4d\u7684 1 \u7684\u4e2a\u6570\u76f8\u52a0\u540e: 9           10          = 0b 0000 0000 0000 1001 0000 0000 0000 1010\n\u6bcf32\u4f4d\u7684 1 \u7684\u4e2a\u6570\u76f8\u52a0\u540e: 19                      = 0b 0000 0000 0000 0000 0000 0000 0001 0011 = 19\n</code></pre> </li> <li> <p>Lowbit\uff1a\u627e\u5230\u6700\u53f3\u8fb9\u76841 \u27a1\ufe0f <code>x &amp; -x</code></p> <p>\u6709\u4e8c\u8fdb\u5236\u6570x = 0b+++++100\uff0c\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u6700\u540e\u90a3\u4e2a100</p> \u8868\u8fbe\u5f0f \u7ed3\u679c x <code>0b+++++100</code> ~x <code>0b-----011</code> ~x+1 <code>0b-----100</code> </li> <li> <p>\u6c42 \\(\\lfloor \\log_2(x) \\rfloor\\) </p> <p>\u65b9\u6cd5\u4e00\uff1a\u7b49\u540c\u4e8e\u6c42 31 \u2212 clz(x)</p> C<pre><code>int clz(uint32_t x) { \n    int n = 0; \n    if (x &lt;= 0x0000ffff) n += 16, x &lt;&lt;= 16; \n    if (x &lt;= 0x00ffffff) n += 8, x &lt;&lt;= 8; \n    if (x &lt;= 0x0fffffff) n += 4, x &lt;&lt;= 4; \n    if (x &lt;= 0x3fffffff) n += 2, x &lt;&lt;= 2; \n    if (x &lt;= 0x7fffffff) n ++; \n    return n; \n}\n</code></pre> <p>\u4f8b\u5b50\uff1a0100 \u662f 4\uff0c\\(\\lfloor \\log_2(4) \\rfloor\\) = 2\uff1b0111 \u662f 7\uff0c\\(\\lfloor \\log_2(7) \\rfloor\\) = 2\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u5b9e\u662f\u6c42\u6bd4\u7279\u4e32\u4e2d\u6700\u9ad8\u4f4d\u7684 1 \u540e\u9762\u7684 0/1 \u7684\u4e2a\u6570\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u627e\u5230\u6700\u9ad8\u4f4d 1 \u5de6\u8fb9\u6709\u591a\u5c11\u4e2a0\uff0c\u7528 32 - \u5de6\u8fb9 0 \u7684\u4e2a\u6570 - 1 \u5c31\u662f\u6700\u9ad8\u4f4d 1 \u540e\u9762\u7684 0/1 \u7684\u4e2a\u6570\u3002</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u67e5\u8868\u6cd5</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\n#define LOG2(x) (\"-01W2?XG3&lt;@kYCHf4-=:AnlLZNDcI\\\\g_5P-V&gt;F;jBeo9mKMb[^OUEid8Ja]Th7`S6RQ\"[(x) % 67] - '0')\n// \u901a\u8fc7\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c x \u4e2a\u5b57\u7b26\u51cf\u53bb\u5b57\u7b26 '0' \u7684 ASCII \u503c\u5f97\u5230 LOG2(x) \u7684\u503c\n\nint main() {\n    for (int i = 0; i &lt; 64; i++) {\n        uint64_t x = 1ULL &lt;&lt; i;\n        printf(\"%016llx %d\\n\", x, LOG2(x));\n    }\n}\n</code></pre> Bash<pre><code>0000000000000001 0\n0000000000000002 1\n0000000000000004 2\n0000000000000008 3\n0000000000000010 4\n...\n2000000000000000 61\n4000000000000000 62\n8000000000000000 63\n</code></pre> <p>\u5982\u4f55\u5f97\u5230\u8fd9\u4e32\u795e\u5947\u7684\u5b57\u7b26\u4e32\uff1f</p> Python<pre><code>import json\n\nn, base = 64, '0'\n\nfor m in range(n, 10000): \n    # \u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u4e2a m\uff0c\u4f7f\u5f97 2 \u7684 i \u6b21\u65b9\u5bf9 m \u53d6\u6a21\u7684\n    # \u7ed3\u679c\u96c6\u5408\u7684\u957f\u5ea6\u7b49\u4e8e n\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e n \u4e2a\u4e0d\u540c\u7684 i \u503c\uff0c\n    # 2 \u7684 i \u6b21\u65b9\u5bf9 m \u53d6\u6a21\u7684\u7ed3\u679c\u90fd\u662f\u4e0d\u540c\u7684\u3002\n    if len({ (2**i) % m for i in range(n) }) == n: \n        M = { j: chr(ord(base) + i) \n            for j in range(0, m) \n                for i in range(0, n) \n                    if (2**i) % m == j } \n        break\n\nmagic = json.dumps(''.join( \n    [ M.get(j, '-') for j in range(0, m) ] \n    )).strip('\"') \n\nprint(f'#define LOG2(x) (\"{magic}\"[(x) % {m}] - \\'{base}\\')')\n</code></pre> </li> <li> <p>IEEE754: \u8d8a\u5927\u7684\u6570\u5b57\uff0c\u8ddd\u79bb\u4e0b\u4e00\u4e2a\u5b9e\u6570\u7684\u8ddd\u79bb\u5c31\u8d8a\u5927</p> <ul> <li>\u53ef\u80fd\u4f1a\u5e26\u6765\u76f8\u5f53\u7684\u7edd\u5bf9\u8bef\u5dee</li> <li>\u56e0\u6b64\u5f88\u591a\u6570\u5b66\u5e93\u90fd\u4f1a\u9891\u7e41\u505a\u5f52\u4e00\u5316</li> </ul> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;float.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\nfloat x = FLT_MAX;\nprintf(\"x = %e (10^%.1f)\\n\", x, log10(x));\n\nprintf(\"========================================\\n\");\n\nfloat y = 1e38;\nprintf(\"y         = %.0f\\n\", y);\nprintf(\"y + 1e30f = %.0f\\n\", y + 1e30f);\nprintf(\"y + 1e31f = %.0f\\n\", y + 1e31f);\n\nprintf(\"========================================\\n\");\n\nunsigned long n1 = 0, n2 = 0, n3 = 0;\nunion { float f; int i; } z;\n\nfor (uint32_t i = 0; ; i++) {\n    z.i = i;\n    if (-1.0 &lt; z.f &amp;&amp; z.f &lt; 1.0) n1++;\n    if (-0.5f &lt; z.f &amp;&amp; z.f &lt; 0.5f) n2++;\n    if (-0.001 &lt; z.f &amp;&amp; z.f &lt; 0.001) n3++;\n    if (i == UINT32_MAX) break;\n}\n\ndouble n = (double)UINT32_MAX + 1;\nprintf(\"%.2lf%% of floats are in (-1, 1)\\n\", (double)n1 / n * 100);\nprintf(\"%.2lf%% of floats are in (-0.5, 0.5)\\n\", (double)n2 / n * 100);\nprintf(\"%.2lf%% of floats are in (-0.001, 0.001)\\n\", (double)n3 / n * 100);\n}\n</code></pre> Bash<pre><code>linux$ gcc a.c -lm # -lm \u9009\u9879\u544a\u8bc9\u7f16\u8bd1\u5668\u94fe\u63a5\u5230\u6570\u5b66\u5e93\nlinux$ ./a.out\nx = 3.402823e+38 (10^38.5)\n========================================\ny         = 99999996802856924650656260769173209088\ny + 1e30f = 99999996802856924650656260769173209088\ny + 1e31f = 100000006944061726476491472742798852096\n========================================\n49.61% of floats are in (-1, 1)\n49.22% of floats are in (-0.5, 0.5)\n45.71% of floats are in (-0.001, 0.001)\n</code></pre> </li> <li> <p>\u4f8b\u5b50\uff1a\u8ba1\u7b97 \\(1 + \\frac{1}{2} + \\frac{1}{3} + \\cdots + \\frac{1}{n}\\)</p> C<pre><code>#define SUM(T, st, ed, d) ({ \\\n    T s = 0; \\\n    for (int i = st; i != ed + d; i += d) \\\n        s += (T)1 / i; \\\n    s; \\\n})\n\n#define n 1000000\n\nint main() {\n    printf(\"%.16f\\n\", SUM(float, 1, n, 1));  // \u5148\u52a0\u5927\u6570\uff0c\u8bef\u5dee\u5927\n    printf(\"%.16f\\n\", SUM(float, n, 1, -1)); // \u5148\u52a0\u5c0f\u6570\uff0c\u8bef\u5dee\u5c0f\n    printf(\"%.16f\\n\", SUM(double, 1, n, 1));\n    printf(\"%.16f\\n\", SUM(double, n, 1, -1));\n}\n</code></pre> Bash<pre><code>linux$ ./a.out\n14.3573579788208008\n14.3926515579223633\n14.3927267228649889\n14.3927267228657723\n</code></pre> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-7-abi","title":"Lecture 7 ABI\u4e0e\u5185\u8054\u6c47\u7f16","text":"<ol> <li> <p>ABI\uff08Application Binary Interface\uff09</p> <ul> <li>\u533a\u522b\u4e8eAPI (Application Programming Interface)<ul> <li>\u7a0b\u5e8f\u6e90\u4ee3\u7801\u4e2d\u7684\u89c4\u8303</li> </ul> </li> <li>\u7ea6\u5b9abinary\u7684\u884c\u4e3a\uff08Linux ABI\uff09<ul> <li>\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u683c\u5f0f</li> <li>\u51fd\u6570\u8c03\u7528\u3001\u7cfb\u7edf\u8c03\u7528\u2026\u2026<ul> <li>C\u8bed\u8a00\u89c4\u8303\u53ea\u5b9a\u4e49\u4e86\u8fd0\u884c\u65f6\u5185\u5b58\u548c\u5185\u5b58\u4e0a\u7684\u8ba1\u7b97</li> <li>printf\u90fd\u65e0\u6cd5\u5b9e\u73b0\uff0c\u5fc5\u987b\u501f\u52a9\u5916\u90e8\u7684\u5e93\u51fd\u6570</li> </ul> </li> <li>\u94fe\u63a5\u3001\u52a0\u8f7d\u7684\u89c4\u8303</li> </ul> </li> </ul> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-8-io","title":"Lecture 8 I/O\u8bbe\u5907","text":"<ol> <li> <p><code>printf(\"Hello World\\n\")</code> \u7684\u5168\u8fc7\u7a0b: markmap</p> <p></p> </li> <li> <p>CPU v.s. GPU</p> <p></p> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-9","title":"Lecture 9 \u94fe\u63a5\u4e0e\u52a0\u8f7d","text":"<ol> <li> <p>ELF \u6587\u4ef6</p> ELF\u6587\u4ef6\u7c7b\u578b \u8bf4\u660e \u5b9e\u4f8b \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6 (Relocatable File) \u8fd9\u7c7b\u6587\u4ef6\u5305\u62ec\u4ee3\u7801\u548c\u6570\u636e\uff0c\u53ef\u4ee5\u88ab\u7528\u6765\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u9759\u6001\u94fe\u63a5\u5e93\u4e5f\u53ef\u5f52\u4e3a\u8fd9\u4e00\u7c7b Linux\u7684.o / Windows\u7684.obj \u53ef\u6267\u884c\u6587\u4ef6 (Executable File) \u8fd9\u7c7b\u6587\u4ef6\u5305\u542b\u4e86\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u5b83\u7684\u4ee3\u8868\u5c31\u662fELF\u53ef\u6267\u884c\u6587\u4ef6 /bin/bash\uff0ca.out, Windows\u7684.exe \u5171\u4eab\u76ee\u6807\u6587\u4ef6 (Shared Object File) \u8fd9\u79cd\u6587\u4ef6\u5305\u542b\u4e86\u4ee3\u7801\u548c\u6570\u636e\uff0c\u53ef\u4ee5\u5728\u4e0b\u9762\u4e24\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528\uff1a1. \u94fe\u63a5\u5668\u4f7f\u7528\u6b64\u6587\u4ef6\u548c\u5176\u4ed6\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\uff0c\u4ea7\u751f\u65b0\u7684\u76ee\u6807\u6587\u4ef6\uff1b2. \u52a8\u6001\u94fe\u63a5\u5668\u5c06\u51e0\u79cd\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7ed3\u5408\uff0c\u4f5c\u4e3a\u8fdb\u7a0b\u6620\u50cf\u7684\u4e00\u90e8\u5206\u8fd0\u884c Linux\u7684.so (e.g. /lib/glibc-2.5.so) / Windows\u7684DLL \u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6 (Core Dump File) \u5f53\u8fdb\u7a0b\u610f\u5916\u7ec8\u6b62\u65f6\uff0c\u7cfb\u7edf\u53ef\u4ee5\u5c06\u8be5\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5bb9\u53ca\u7ec8\u6b62\u65f6\u7684\u4e00\u4e9b\u4fe1\u606f\u8f6c\u50a8\u5230\u6b64 Linux\u4e0b\u7684core dump </li> <li> <p>ELF \u5934\uff1a\u5b9a\u4e49\u4e86ELF\u9b54\u6570\u3001\u7248\u672c\u3001\u5c0f\u7aef/\u5927\u7aef\u3001\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u3001\u76ee\u6807\u6587\u4ef6\u7684\u7c7b\u578b\u3001\u673a\u5668\u7ed3\u6784\u7c7b\u578b\u3001\u8282\u5934\u8868\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u957f\u5ea6\u7b49</p> C<pre><code>/* The ELF file header.  This appears at the start of every ELF file.  */\n\n#define EI_NIDENT (16)\n\ntypedef struct\n{\n    unsigned char   e_ident[EI_NIDENT]; /* Magic number and other info */\n    Elf32_Half      e_type;             /* Object file type */\n    Elf32_Half      e_machine;          /* Architecture */\n    Elf32_Word      e_version;          /* Object file version */\n    Elf32_Addr      e_entry;            /* Entry point virtual address */\n    Elf32_Off       e_phoff;            /* Program header table file offset */\n    Elf32_Off       e_shoff;            /* Section header table file offset */\n    Elf32_Word      e_flags;            /* Processor-specific flags */\n    Elf32_Half      e_ehsize;           /* ELF header size in bytes */\n    Elf32_Half      e_phentsize;        /* Program header table entry size */\n    Elf32_Half      e_phnum;            /* Program header table entry count */\n    Elf32_Half      e_shentsize;        /* Section header table entry size */\n    Elf32_Half      e_shnum;            /* Section header table entry count */\n    Elf32_Half      e_shstrndx;         /* Section header string table index */\n} Elf32_Ehdr;\n</code></pre> <p> </p> <ul> <li>.text \u8282\uff1a\u7f16\u8bd1\u6c47\u7f16\u540e\u7684\u4ee3\u7801\u90e8\u5206</li> <li>.rodata \u8282\uff1a\u53ea\u8bfb\u6570\u636e\uff0c\u5982printf \u683c\u5f0f\u4e32\u3001switch \u8df3\u8f6c\u8868\u7b49</li> <li>.data \u8282\uff1a\u5df2\u521d\u59cb\u5316\u4e14\u521d\u503c\u4e0d\u4e3a0\u7684\u5168\u5c40/\u9759\u6001\u53d8\u91cf</li> <li>.bss \u8282\uff1a\u672a\u521d\u59cb\u5316\u6216\u521d\u503c\u4e3a0\u7684\u5168\u5c40/\u9759\u6001\u53d8\u91cf\uff0c\u4ec5\u662f\u5360\u4f4d\u7b26\uff0c\u4e0d\u5360\u4efb\u4f55\u5b9e\u9645\u78c1\u76d8\u7a7a\u95f4\u3002\u533a\u5206bss\u8282\u662f\u4e3a\u4e86\u7a7a\u95f4\u6548\u7387\u3002</li> </ul> <p>Section header table (\u8282\u5934\u8868)\uff1a\u5b58\u50a8\u4e86ELF\u6587\u4ef6\u7684\u5404\u4e2a\u8282\u7684\u4fe1\u606f\u3002</p> C<pre><code>/* Section header.  */\n\ntypedef struct\n{\n    Elf32_Word  sh_name;        /* Section name (string tbl index) */\n    Elf32_Word  sh_type;        /* Section type */\n    Elf32_Word  sh_flags;       /* Section flags */\n    Elf32_Addr  sh_addr;        /* Section virtual addr at execution */\n    Elf32_Off   sh_offset;      /* Section file offset */\n    Elf32_Word  sh_size;        /* Section size in bytes */\n    Elf32_Word  sh_link;        /* Link to another section */\n    Elf32_Word  sh_info;        /* Additional section information */\n    Elf32_Word  sh_addralign;   /* Section alignment */\n    Elf32_Word  sh_entsize;     /* Entry size if section holds table */\n} Elf32_Shdr;\n</code></pre> <p> </p> </li> <li> <p>\u94fe\u63a5\u591a\u4e2a .o: \u5408\u5e76\u76f8\u540c\u7684\u8282</p> <p></p> <p>\u94fe\u63a5 Two-pass linking</p> <ul> <li>\u7a7a\u95f4\u548c\u5730\u5740\u7684\u5206\u914d<ul> <li>\u91cd\u65b0\u5efa\u7acb\u7b26\u53f7\u8868\uff0c\u5408\u5e76\u6bb5\uff0c\u5e76\u8ba1\u7b97\u6bb5\u957f\u5ea6\u5efa\u7acb\u6620\u5c04\u5173\u7cfb</li> </ul> </li> <li>\u7b26\u53f7\u89e3\u6790\u548c\u91cd\u5b9a\u4f4d<ul> <li>\u786e\u5b9a\u6807\u53f7\u5f15\u7528\u5173\u7cfb</li> </ul> </li> </ul> <p>a.c </p> C<pre><code>int foo(int a, int b) {\n    return a + b;\n}\n</code></pre> <p>b.c</p> C<pre><code>int x = 100, y = 200;\n</code></pre> <p>main.c</p> C<pre><code>extern int x, y;\nint foo(int a, int b); // \u53ef\u4ee5\u8bd5\u8bd5extern int foo;\nint main() {\n    printf(\"%d + %d = %d\\n\", x, y, foo(x, y));\n}\n</code></pre> Bash<pre><code>linux$ gcc -c -fno-pic a.c\nlinux$ gcc -c -fno-pic b.c\nlinux$ gcc -c -fno-pic main.c\nlinux$ gcc -static a.o b.o main.o\nlinux$ ./a.out \n100 + 200 = 300\nlinux$ readelf -a main.o\nRelocation section '.rela.text' at offset 0x210 contains 7 entries:\nOffset          Info           Type           Sym. Value    Sym. Name + Addend\n00000000000a  000500000002 R_X86_64_PC32     0000000000000000 y - 4\n000000000010  000600000002 R_X86_64_PC32     0000000000000000 x - 4\n000000000019  000700000004 R_X86_64_PLT32    0000000000000000 foo - 4\n000000000021  000500000002 R_X86_64_PC32     0000000000000000 y - 4\n000000000027  000600000002 R_X86_64_PC32     0000000000000000 x - 4\n00000000002e  00030000000a R_X86_64_32       0000000000000000 .rodata + 0\n000000000038  000800000004 R_X86_64_PLT32    0000000000000000 printf - 4\nlinux$ objdump -d main.o\nDisassembly of section .text:\n\n0000000000000000 &lt;main&gt;:\n0:    f3 0f 1e fa             endbr64 \n4:    55                      push   %rbp\n5:    48 89 e5                mov    %rsp,%rbp\n8:    8b 15 00 00 00 00       mov    0x0(%rip),%edx        # e &lt;main+0xe&gt;\ne:    8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 14 &lt;main+0x14&gt;\n14:   89 d6                   mov    %edx,%esi\n16:   89 c7                   mov    %eax,%edi\n18:   e8 00 00 00 00          call   1d &lt;main+0x1d&gt;\n1d:   89 c1                   mov    %eax,%ecx\n1f:   8b 15 00 00 00 00       mov    0x0(%rip),%edx        # 25 &lt;main+0x25&gt;\n25:   8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 2b &lt;main+0x2b&gt;\n2b:   89 c6                   mov    %eax,%esi\n2d:   bf 00 00 00 00          mov    $0x0,%edi\n32:   b8 00 00 00 00          mov    $0x0,%eax\n37:   e8 00 00 00 00          call   3c &lt;main+0x3c&gt;\n3c:   b8 00 00 00 00          mov    $0x0,%eax\n41:   5d                      pop    %rbp\n42:   c3                      ret    \nlinux$ objdump -d a.out\n000000000040175d &lt;main&gt;:\n40175d:       f3 0f 1e fa             endbr64 \n401761:       55                      push   %rbp\n401762:       48 89 e5                mov    %rsp,%rbp\n401765:       8b 15 89 39 0c 00       mov    0xc3989(%rip),%edx        # 4c50f4 &lt;y&gt;\n40176b:       8b 05 7f 39 0c 00       mov    0xc397f(%rip),%eax        # 4c50f0 &lt;x&gt;\n401771:       89 d6                   mov    %edx,%esi\n401773:       89 c7                   mov    %eax,%edi\n401775:       e8 cb ff ff ff          call   401745 &lt;foo&gt;\n40177a:       89 c1                   mov    %eax,%ecx\n40177c:       8b 15 72 39 0c 00       mov    0xc3972(%rip),%edx        # 4c50f4 &lt;y&gt;\n401782:       8b 05 68 39 0c 00       mov    0xc3968(%rip),%eax        # 4c50f0 &lt;x&gt;\n401788:       89 c6                   mov    %eax,%esi\n40178a:       bf 04 80 49 00          mov    $0x498004,%edi\n40178f:       b8 00 00 00 00          mov    $0x0,%eax\n401794:       e8 27 9e 00 00          call   40b5c0 &lt;_IO_printf&gt;\n401799:       b8 00 00 00 00          mov    $0x0,%eax\n40179e:       5d                      pop    %rbp\n40179f:       c3                      ret  \nlinux$ readelf -a a.out\nSymbol table '.symtab' contains 2096 entries:\nNum:    Value          Size Type    Bind   Vis      Ndx Name\n...\n1639: 00000000004c50f4     4 OBJECT  GLOBAL DEFAULT   21 y\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u662f y - 4? \u27a1\ufe0f y \u662f\u76f8\u5bf9\u5f53\u524d\u6307\u4ee4\u7684 offset\uff0c\u800c\u6211\u4eec\u5728 8b 15 \u540e\u8981\u586b\u7684\u662f\u76f8\u5bf9\u4e8e\u4e0b\u4e00\u6761 pc \u7684 offset</p> <p></p> <p>0x4c50f4 = 0x40176b + 0x0c3989</p> </li> <li> <p>\u53ef\u6267\u884c\u6587\u4ef6\uff1a</p> <p></p> </li> <li> <p>\u52a8\u6001\u94fe\u63a5\uff1a\u57fa\u672c\u6b3e\u5c31\u662f GOT\uff0c\u800c\u8c6a\u534e\u6b3e PLT \u53ef\u4ee5 lazy binding\uff0c\u7528\u5230\u54ea\u4e2a\u624d\u4f1a\u53bb\u94fe\u63a5\uff0c\u53ea\u6709\u5728\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u624d\u9700\u8981\u586b\u8868\uff0c\u540e\u9762\u518d\u6b21\u7528\u5230\u7684\u65f6\u5019\u5df2\u6709\u4e86\u3002</p> <p></p> </li> <li> <p>\u9759\u6001\u94fe\u63a5 v.s \u52a8\u6001\u94fe\u63a5</p> <p> </p> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-10","title":"Lecture 10 \u7cfb\u7edf\u7f16\u7a0b\u4e0e\u57fa\u7840\u8bbe\u65bd","text":"<ol> <li> <p>Differential Testing</p> Python<pre><code>import sys\n\nfor i in range(int(sys.argv[1])):\n    print('\\n'.join(['si'] + [f'p ${r}' for r in ['eax', ...]]))\n</code></pre> Bash<pre><code>N=10000\n\ndiff &lt;(python3 cmdgen.py $N | ./x86-nemu-datui img) \\\n    &lt;(python3 cmdgen.py $N | ./x86-nemu img)\n</code></pre> </li> </ol>"},{"location":"ICS/ICS_Lectures/#lecture-11","title":"Lecture 11 \u4e2d\u65ad\u4e0e\u5206\u65f6\u591a\u4efb\u52a1","text":""},{"location":"Linux/Linux/","title":"Linux","text":"<p> \u7ea6 1505 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"Linux/Linux/#learning-material","title":"Learning Material","text":"<ol> <li>\u5144\u5f1f\u8fdeLinux\u6559\u7a0b\uff0c\u53c2\u8003\u7b14\u8bb0</li> </ol>"},{"location":"Linux/Linux/#linux-vs-windows","title":"Linux vs Windows","text":"<ol> <li> <p>Linux\u548cWindows\u5bf9\u6bd4\uff1a</p> Linux Windows Note cat a.csv type a.csv \u6253\u5370\u6587\u4ef6\u5185\u5bb9 ls dir \u770b\u76ee\u5f55\u4e0b\u7684\u6709\u54ea\u4e9b\u6587\u4ef6 <ul> <li>Linux\u7684cmd\u662f\u533a\u5206\u5927\u5c0f\u5199\u7684\uff0c\u800cWindows\u4e0d\u533a\u5206</li> <li>Linux\u6240\u6709\u5185\u5bb9\u4ee5\u6587\u4ef6\u5f62\u5f0f\u4fdd\u5b58\uff0c\u5305\u62ec\u786c\u4ef6\uff0c\u4f8b\u5982\u786c\u76d8\u662f/dev/sd[a-p]</li> <li>Linux\u662f\u4e0d\u9760\u6269\u5c55\u540d\u6765\u533a\u5206\u6587\u4ef6\u7684\uff0c\u5c11\u6570\u6709\u6269\u5c55\u540d\u7684\u6587\u4ef6\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6211\u4eec\u81ea\u5df1\u65b9\u4fbf\u533a\u5206\u800c\u5df2</li> </ul> </li> </ol>"},{"location":"Linux/Linux/#linux_1","title":"Linux\u76ee\u5f55","text":"<ol> <li> <p>Linux\u5404\u76ee\u5f55\u7684\u4f5c\u7528\uff1a</p> \u76ee\u5f55 \u4f5c\u7528 /bin \u5b58\u653e\u7cfb\u7edf\u547d\u4ee4\u7684\u76ee\u5f55\uff0c\u666e\u901a\u7528\u6237\u548c\u8d85\u7ea7\u7528\u6237\u90fd\u53ef\u4ee5\u6267\u884c\u3002\u4e0d\u8fc7\u653e\u5728/bin\u4e0b\u7684\u547d\u4ee4\u5728\u5355\u7528\u6237\u6a21\u5f0f\u4e0b\u4e5f\u53ef\u4ee5\u6267\u884c /sbin \u4fdd\u5b58\u548c\u7cfb\u7edf\u73af\u5883\u8bbe\u7f6e\u76f8\u5173\u7684\u547d\u4ee4\uff0c\u53ea\u6709\u8d85\u7ea7\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u547d\u4ee4\u8fdb\u884c\u7cfb\u7edf\u73af\u5883\u8bbe\u7f6e\uff0c\u4f46\u662f\u6709\u4e9b\u547d\u4ee4\u53ef\u4ee5\u5141\u8bb8\u666e\u901a\u7528\u6237\u67e5\u770b /usr/bin \u5b58\u653e\u7cfb\u7edf\u547d\u4ee4\u7684\u76ee\u5f55\uff0c\u666e\u901a\u7528\u6237\u548c\u8d85\u7ea7\u7528\u6237\u90fd\u53ef\u4ee5\u6267\u884c\u3002\u8fd9\u4e9b\u547d\u4ee4\u548c\u7cfb\u7edf\u542f\u52a8\u65e0\u5173\uff0c\u5728\u5355\u7528\u6237\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u6267\u884c /usr/sbin \u5b58\u653e\u6839\u6587\u4ef6\u7cfb\u7edf\u4e0d\u5fc5\u8981\u7684\u7cfb\u7edf\u7ba1\u7406\u547d\u4ee4\uff0c\u4f8b\u5982\u591a\u6570\u670d\u52a1\u7a0b\u5e8f\u3002\u53ea\u6709\u8d85\u7ea7\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u3002\u5927\u5bb6\u5176\u5b9e\u53ef\u4ee5\u6ce8\u610f\u5230Linux\u7684\u7cfb\u7edf\uff0c\u5728\u6240\u6709\"sbin\"\u76ee\u5f55\u4e2d\u4fdd\u5b58\u7684\u547d\u4ee4\u53ea\u6709\u8d85\u7ea7\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\uff0c\"bin\"\u76ee\u5f55\u4e2d\u4fdd\u5b58\u7684\u547d\u4ee4\u6240\u6709\u7528\u6237\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002 /boot \u7cfb\u7edf\u542f\u52a8\u76ee\u5f55\uff0c\u4fdd\u5b58\u7cfb\u7edf\u542f\u52a8\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u5982\u5185\u6838\u6587\u4ef6\u548c\u542f\u52a8\u5f15\u5bfc\u7a0b\u5e8f(grub)\u6587\u4ef6\u7b49 /dev \u8bbe\u5907\u6587\u4ef6\u4fdd\u5b58\u4f4d\u7f6e\u3002\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7Linux\u4e2d\u6240\u6709\u5185\u5bb9\u4ee5\u6587\u4ef6\u5f62\u5f0f\u4fdd\u5b58\uff0c\u5305\u62ec\u786c\u4ef6\u3002\u90a3\u4e48\u8fd9\u4e2a\u76ee\u5f55\u5c31\u662f\u7528\u6765\u4fdd\u5b58\u6240\u6709\u786c\u4ef6\u8bbe\u5907\u6587\u4ef6\u7684 /etc \u914d\u7f6e\u6587\u4ef6\u4fdd\u5b58\u4f4d\u7f6e\u3002\u7cfb\u7edf\u5185\u6240\u6709\u91c7\u7528\u9ed8\u8ba4\u5b89\u88c5\u65b9\u5f0f\uff08rpm\u5b89\u88c5\uff09\u7684\u670d\u52a1\u7684\u914d\u7f6e\u6587\u4ef6\u5168\u90e8\u90fd\u4fdd\u5b58\u5728\u8fd9\u4e2a\u76ee\u5f55\u5f53\u4e2d\uff0c\u5982\u7528\u6237\u8d26\u6237\u548c\u5bc6\u7801\uff0c\u670d\u52a1\u7684\u542f\u52a8\u811a\u672c\uff0c\u5e38\u7528\u670d\u52a1\u7684\u914d\u7f6e\u6587\u4ef6\u7b49 /home \u666e\u901a\u7528\u6237\u7684\u5bb6\u76ee\u5f55\u3002\u5efa\u7acb\u6bcf\u4e2a\u7528\u6237\u65f6\uff0c\u6bcf\u4e2a\u7528\u6237\u8981\u6709\u4e00\u4e2a\u9ed8\u8ba4\u767b\u5f55\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u662f\u8fd9\u4e2a\u7528\u6237\u7684\u5bb6\u76ee\u5f55\uff0c\u6240\u6709\u666e\u901a\u7528\u6237\u7684\u5bb6\u76ee\u5f55\u5c31\u662f\u5728/home\u4e0b\u5efa\u7acb\u4e00\u4e2a\u548c\u7528\u6237\u540d\u76f8\u540c\u7684\u76ee\u5f55\u3002\u5982\u7528\u6237user1\u7684\u5bb6\u76ee\u5f55\u5c31\u662f/home/user1 /lib \u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u5e93\u4fdd\u5b58\u4f4d\u7f6e /lost+found \u5f53\u7cfb\u7edf\u610f\u5916\u5d29\u6e83\u6216\u673a\u5668\u610f\u5916\u5173\u673a\uff0c\u800c\u4ea7\u751f\u4e00\u4e9b\u6587\u4ef6\u788e\u7247\u653e\u5728\u8fd9\u91cc\u3002\u5f53\u7cfb\u7edf\u542f\u52a8\u7684\u8fc7\u7a0b\u4e2dfsck\u5de5\u5177\u4f1a\u68c0\u67e5\u8fd9\u91cc\uff0c\u5e76\u4fee\u590d\u5df2\u7ecf\u635f\u574f\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u8fd9\u4e2a\u76ee\u5f55\u53ea\u5728\u6bcf\u4e2a\u5206\u533a\u4e2d\u51fa\u73b0\uff0c\u4f8b\u5982/lost+found\u5c31\u662f\u6839\u5206\u533a\u7684\u5907\u4efd\u6062\u590d\u76ee\u5f55\uff0c/boot/lost+found\u5c31\u662f /boot\u5206\u533a\u7684\u5907\u4efd\u6062\u590d\u76ee\u5f55 /media \u6302\u8f7d\u76ee\u5f55\u3002\u7cfb\u7edf\u5efa\u8bae\u662f\u7528\u6765\u6302\u8f7d\u5a92\u4f53\u8bbe\u5907\u7684\uff0c\u4f8b\u5982\u8f6f\u76d8\u548c\u5149\u76d8 /mnt \u6302\u8f7d\u76ee\u5f55\uff0c\u65e9\u671fLinux\u4e2d\u53ea\u6709\u8fd9\u4e00\u4e2a\u6302\u8f7d\u76ee\u5f55\uff0c\u5e76\u6ca1\u6709\u7ec6\u5206\u3002\u73b0\u5728\u8fd9\u4e2a\u76ee\u5f55\u7cfb\u7edf\u5efa\u8bae\u6302\u8f7d\u989d\u5916\u8bbe\u5907\uff0c\u5982U\u76d8\uff0c\u79fb\u52a8\u786c\u76d8\u548c\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u7684\u5206\u533a /misc \u6302\u8f7d\u76ee\u5f55\u3002\u7cfb\u7edf\u5efa\u8bae\u7528\u6765\u6302\u8f7dNFS\u670d\u52a1\u7684\u5171\u4eab\u76ee\u5f55\u3002\u6211\u4eec\u5728\u521a\u521a\u5df2\u7ecf\u89e3\u91ca\u4e86\u6302\u8f7d\uff0c\u7ae5\u978b\u4eec\u5e94\u8be5\u77e5\u9053\u53ea\u8981\u662f\u4e00\u4e2a\u5df2\u7ecf\u5efa\u7acb\u7684\u7a7a\u76ee\u5f55\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u6302\u8f7d\u70b9\u3002\u90a3\u4e48\u7cfb\u7edf\u867d\u7136\u51c6\u5907\u4e86\u4e09\u4e2a\u9ed8\u8ba4\u6302\u8f7d\u76ee\u5f55/media\u3001/mnt\u3001/misc\uff0c\u4f46\u662f\u5230\u5e95\u5728\u54ea\u4e2a\u76ee\u5f55\u4e2d\u6302\u8f7d\u4ec0\u4e48\u8bbe\u5907\u90fd\u53ef\u4ee5\u7531\u7ba1\u7406\u5458\u81ea\u5df1\u51b3\u5b9a\u3002\u4f8b\u5982\u8d85\u54e5\u63a5\u89e6Linux\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u6302\u8f7d\u76ee\u5f55\u53ea\u6709/mnt\u4e00\u4e2a\uff0c\u6240\u4ee5\u517b\u6210\u4e86\u5728/mnt\u4e0b\u5efa\u7acb\u4e0d\u540c\u76ee\u5f55\u6302\u8f7d\u4e0d\u540c\u8bbe\u5907\u7684\u4e60\u60ef\u3002\u5982/mnt/cdrom\u6302\u8f7d\u5149\u76d8\uff0c/mnt/usb\u6302\u8f7dU\u76d8\uff0c\u8fd9\u90fd\u662f\u53ef\u4ee5\u7684 /opt \u7b2c\u4e09\u65b9\u5b89\u88c5\u7684\u8f6f\u4ef6\u4fdd\u5b58\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u76ee\u5f55\u5c31\u662f\u653e\u7f6e\u548c\u5b89\u88c5\u5176\u4ed6\u8f6f\u4ef6\u7684\u4f4d\u7f6e\uff0c\u6211\u624b\u5de5\u5b89\u88c5\u7684\u6e90\u7801\u5305\u8f6f\u4ef6\u90fd\u53ef\u4ee5\u5b89\u88c5\u5230\u8fd9\u4e2a\u76ee\u5f55\u5f53\u4e2d\u3002\u4e0d\u8fc7\u6211\u8fd8\u662f\u66f4\u52a0\u4e60\u60ef\u628a\u8f6f\u4ef6\u653e\u7f6e\u5230/usr/local/\u76ee\u5f55\u5f53\u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4/usr/local/\u76ee\u5f55\u4e5f\u53ef\u4ee5\u7528\u6765\u5b89\u88c5\u8f6f\u4ef6 /proc \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u8be5\u76ee\u5f55\u4e2d\u7684\u6570\u636e\u5e76\u4e0d\u4fdd\u5b58\u5230\u786c\u76d8\u5f53\u4e2d\uff0c\u800c\u662f\u4fdd\u5b58\u5230\u5185\u5b58\u5f53\u4e2d\u3002\u4e3b\u8981\u4fdd\u5b58\u7cfb\u7edf\u7684\u5185\u6838\uff0c\u8fdb\u7a0b\uff0c\u5916\u90e8\u8bbe\u5907\u72b6\u6001\u548c\u7f51\u7edc\u72b6\u6001\u706f\u3002\u5982/proc/cpuinfo\u662f\u4fdd\u5b58CPU\u4fe1\u606f\u7684\uff0c /proc/devices\u662f\u4fdd\u5b58\u8bbe\u5907\u9a71\u52a8\u7684\u5217\u8868\u7684\uff0c/proc/filesystems\u662f\u4fdd\u5b58\u6587\u4ef6\u7cfb\u7edf\u5217\u8868\u7684\uff0c /proc/net/\u662f\u4fdd\u5b58\u7f51\u7edc\u534f\u8bae\u4fe1\u606f\u7684 /sys \u865a\u62df\u6587\u4ef6\u7cfb\u7edf\u3002\u548c/proc\u76ee\u5f55\u76f8\u4f3c\uff0c\u90fd\u662f\u4fdd\u5b58\u5728\u5185\u5b58\u5f53\u4e2d\u7684\uff0c\u4e3b\u8981\u662f\u4fdd\u5b58\u4e8e\u5185\u6838\u76f8\u5173\u4fe1\u606f\u7684 /root \u8d85\u7ea7\u7528\u6237\u7684\u5bb6\u76ee\u5f55\u3002\u666e\u901a\u7528\u6237\u5bb6\u76ee\u5f55\u5728\"/home\"\u4e0b\uff0c\u8d85\u7ea7\u7528\u4e8e\u5bb6\u76ee\u5f55\u76f4\u63a5\u5728\"/\"\u4e0b /srv \u670d\u52a1\u6570\u636e\u76ee\u5f55\u3002\u4e00\u4e9b\u7cfb\u7edf\u670d\u52a1\u542f\u52a8\u4e4b\u540e\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u4fdd\u5b58\u6240\u9700\u8981\u7684\u6570\u636e /tmp \u4e34\u65f6\u76ee\u5f55\u3002\u7cfb\u7edf\u5b58\u653e\u4e34\u65f6\u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u8be5\u76ee\u5f55\u4e0b\u6240\u6709\u7528\u6237\u90fd\u53ef\u4ee5\u8bbf\u95ee\u548c\u5199\u5165\u3002\u6211\u4eec\u5efa\u8bae\u6b64\u76ee\u5f55\u4e2d\u4e0d\u80fd\u4fdd\u5b58\u91cd\u8981\u6570\u636e\uff0c\u6700\u597d\u6bcf\u6b21\u5f00\u673a\u90fd\u628a\u8be5\u76ee\u5f55\u6e05\u7a7a /usr \u7cfb\u7edf\u8f6f\u4ef6\u8d44\u6e90\u76ee\u5f55\u3002\u6ce8\u610fusr\u4e0d\u662fuser\u7684\u7f29\u5199\uff0c\u800c\u662f\"Unix Softwre Resource\"\u7684\u7f29\u5199\uff0c\u6240\u4ee5\u4e0d\u662f\u5b58\u653e\u7528\u6237\u6570\u636e\uff0c\u800c\u662f\u5b58\u653e\u7cfb\u7edf\u8f6f\u4ef6\u8d44\u6e90\u7684\u76ee\u5f55\u3002\u7cfb\u7edf\u4e2d\u5b89\u88c5\u7684\u8f6f\u4ef6\u5927\u591a\u6570\u4fdd\u5b58\u5728\u8fd9\u91cc /var \u52a8\u6001\u6570\u636e\u4fdd\u5b58\u4f4d\u7f6e\u3002\u4e3b\u8981\u4fdd\u5b58\u7f13\u5b58\u3001\u65e5\u5fd7\u4ee5\u53ca\u8f6f\u4ef6\u8fd0\u884c\u6240\u4ea7\u751f\u7684\u6587\u4ef6 <p></p> </li> </ol> <p>sbin / usr</p> <p>sbin\u4e2d\u7684s\u8868\u793asuper\uff0c\u5c31\u662f\u8d85\u7ea7\u7528\u6237\u7684\u610f\u601d\u3002usr\u4e0d\u662fuser\uff0c\u800c\u662f<code>unix software resource</code></p>"},{"location":"Linux/Linux/#_1","title":"\u547d\u4ee4\u683c\u5f0f","text":"<ol> <li> <p>\u547d\u4ee4\u683c\u5f0f\uff1a  \u547d\u4ee4 [\u2014\u9009\u9879] [\u53c2\u6570]  \u4f8b\uff1als -la /etc</p> <p>\u8bf4\u660e\uff1a   1\uff09\u4e2a\u522b\u547d\u4ee4\u4f7f\u7528\u4e0d\u9075\u5faa\u6b64\u683c\u5f0f   2\uff09\u5f53\u6709\u591a\u4e2a\u9009\u9879\u65f6\uff0c\u53ef\u4ee5\u5199\u5728\u4e00\u8d77   3\uff09\u7b80\u5316\u9009\u9879\u4e0e\u5b8c\u6574\u9009\u9879\uff1a-a \u7b49\u4e8e -all </p> </li> </ol>"},{"location":"Linux/Linux/#_2","title":"\u5e38\u7528\u547d\u4ee4","text":""},{"location":"Linux/useful_cmd/","title":"Useful cmd","text":"<p> \u7ea6 600 \u4e2a\u5b57  43 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 3 \u5206\u949f</p>"},{"location":"Linux/useful_cmd/#useful-cmds","title":"Useful cmds","text":"<ol> <li> <p><code>find . | grep '\\.cpp$' | xargs cat | wc -l</code></p> <ul> <li>\u89e3\u91ca\uff1a\u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u4ee5 .cpp \u4e3a\u540e\u7f00\u7684\u6587\u4ef6\u7684\u603b\u884c\u6570\u3002</li> <li><code>find .</code>\uff1a\u67e5\u627e\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u548c\u76ee\u5f55\u3002</li> <li><code>grep '\\.cpp$'</code>\uff1a\u4f7f\u7528 grep \u547d\u4ee4\u8fc7\u6ee4\u51fa\u4ee5 .cpp \u4e3a\u540e\u7f00\u7684\u6587\u4ef6\u3002<code>\\.</code> \u8868\u793a\u5339\u914d\u70b9\u53f7\uff0c<code>$</code> \u8868\u793a\u5339\u914d\u884c\u5c3e\u3002</li> <li><code>xargs cat</code>\uff1a\u4f7f\u7528 xargs \u547d\u4ee4\u5c06\u8fc7\u6ee4\u540e\u7684\u6587\u4ef6\u540d\u4f20\u9012\u7ed9 cat \u547d\u4ee4\u3002cat \u547d\u4ee4\u7528\u4e8e\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u5e76\u8f93\u51fa\u3002</li> <li><code>wc -l</code>\uff1a\u4f7f\u7528 wc \u547d\u4ee4\u7edf\u8ba1\u8f93\u5165\u7684\u884c\u6570\u3002-l \u9009\u9879\u8868\u793a\u53ea\u7edf\u8ba1\u884c\u6570\u3002</li> </ul> </li> <li> <p><code>history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr</code></p> <ul> <li>\u89e3\u91ca\uff1a\u7edf\u8ba1\u547d\u4ee4\u884c\u547d\u4ee4\u7684\u9891\u7387\u3002</li> <li><code>history</code>\uff1a\u663e\u793a\u5f53\u524d\u7528\u6237\u7684\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55\u3002</li> <li><code>tr -s ' '</code>\uff1a\u4f7f\u7528 tr \u5de5\u5177\u6765\u538b\u7f29\uff08\u6216\u5220\u9664\uff09\u8f93\u5165\u4e2d\u7684\u91cd\u590d\u7a7a\u683c\u3002\u8fd9\u4f7f\u5f97\u6bcf\u4e2a\u5355\u8bcd\u4e4b\u95f4\u53ea\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u65e0\u8bba\u539f\u59cb\u8f93\u5165\u4e2d\u6709\u591a\u5c11\u4e2a\u7a7a\u683c\u3002tr \u4ee3\u8868 \"translate\"\uff08\u8f6c\u6362\uff09\uff0c\u800c -s \u9009\u9879\u5219\u8868\u793a \"squeeze\"\uff08\u538b\u7f29\uff09\u3002 \u5f53\u4f7f\u7528 tr -s \u65f6\uff0c\u5b83\u4f1a\u5c06\u8f93\u5165\u4e2d\u7684\u91cd\u590d\u5b57\u7b26\u5e8f\u5217\u538b\u7f29\u6210\u5355\u4e2a\u5b57\u7b26\u3002</li> <li><code>cut -d ' ' -f3</code>\uff1a\u4f7f\u7528 cut \u5de5\u5177\u4ece\u8f93\u5165\u4e2d\u63d0\u53d6\u7b2c\u4e09\u4e2a\u5b57\u6bb5\uff08\u4ee5\u7a7a\u683c\u4e3a\u5206\u9694\u7b26<code>-d ' '</code>\uff09\u3002f1\u662fhistory\u8f93\u51fa\u7684\u7a7a\u683c\uff0cf2\u662f\u547d\u4ee4\u51fa\u73b0\u7684\u7f16\u53f7\uff0cf3\u624d\u662f\u547d\u4ee4\u3002</li> <li><code>sort</code>\uff1a\u5bf9\u8f93\u5165\u8fdb\u884c\u6392\u5e8f\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u5bf9\u63d0\u53d6\u7684\u547d\u4ee4\u8fdb\u884c\u6392\u5e8f\u3002</li> <li><code>uniq -c</code>\uff1a\u5220\u9664\u76f8\u90bb\u7684\u91cd\u590d\u884c\uff0c-c\u8868\u793a\u6bcf\u884c\u7684\u524d\u9762\u663e\u793a\u51fa\u73b0\u7684\u6b21\u6570\u3002</li> <li><code>sort -nr</code>\uff1a\u6309\u7167\u6570\u503c\uff08-n\uff09\u4ece\u5927\u5230\u5c0f\uff08-r\uff09\u5bf9\u8f93\u51fa\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u4f7f\u5f97\u6700\u5e38\u7528\u7684\u547d\u4ee4\u51fa\u73b0\u5728\u5217\u8868\u7684\u9876\u90e8\u3002</li> </ul> Bash<pre><code>linux:~$ history\n    1  history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr\n    2  ls\n    3  history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr\n    4  cat\n    5  history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr\n    6  history\nlinux:~$ history | tr -s ' '\n    1 history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr\n    2 ls\n    3 history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr\n    4 cat\n    5 history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr\n    6 history\n    7 history | tr -s ' '\nlinux:~$ history | tr -s ' ' | cut -d ' ' -f3\n    history\n    ls\n    history\n    cat\n    history\n    history\n    history\n    history\nlinux:~$ history | tr -s ' ' | cut -d ' ' -f3 | sort\n    cat\n    history\n    history\n    history\n    history\n    history\n    history\n    history\n    ls\nlinux:~$ history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c\n    1 cat\n    8 history\n    1 ls\nlinux:~$ history | tr -s ' ' | cut -d ' ' -f3 | sort | uniq -c | sort -nr\n    9 history\n    1 ls\n    1 cat\nlinux:~$ \n</code></pre> </li> <li> <p><code>command1 |&amp; command2</code>: \u4f1a\u5c06<code>command1</code>\u7684\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u5408\u5e76\uff0c\u7136\u540e\u5c06\u5408\u5e76\u540e\u7684\u8f93\u51fa\u4f20\u9012\u7ed9<code>command2</code></p> </li> <li> <p><code>xxd -r -p</code>:</p> <ul> <li>\u89e3\u91ca\uff1a\u5c06\u8f93\u5165\u7684\u7eaf\u5341\u516d\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\u636e\u3002</li> <li><code>-r</code>: \u8868\u793a\u53cd\u5411\u64cd\u4f5c\uff0c\u5373\u4ece\u5341\u516d\u8fdb\u5236\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u3002</li> <li><code>-p</code>: \u8868\u793a\u4ee5\u7eaf\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u8bfb\u53d6\u8f93\u5165\uff0c\u5373\u4e0d\u5305\u542b\u4efb\u4f55\u989d\u5916\u7684\u683c\u5f0f\u4fe1\u606f\uff0c\u53ea\u8bfb\u53d6\u5341\u516d\u8fdb\u5236\u6570\u636e\u3002</li> </ul> </li> <li> <p><code>find . -name \"*.[ch]\" | xargs grep \"#include\" | sort | uniq</code>:</p> <ul> <li>\u5217\u51fa\u4e00\u4e2aC\u8bed\u8a00\u9879\u76ee\u4e2d\u6240\u6709\u88ab\u5305\u542b\u8fc7\u7684\u5934\u6587\u4ef6\u3002</li> </ul> </li> <li> <p><code>find . -name \"*.c\" -o -name \"*.h\" | xargs cat | wc -l</code></p> <ul> <li><code>-o</code>: \u8868\u793a \"or\"\uff0c\u8868\u793a\u540c\u65f6\u5339\u914d\u591a\u4e2a\u6761\u4ef6\u3002</li> <li>\u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709 .c \u548c .h \u6587\u4ef6\u7684\u4ee3\u7801\u884c\u6570\u3002</li> <li>\u7b49\u4ef7\u4e8e <code>find . -name \"*.[ch]\" | xargs cat | wc -l</code></li> </ul> </li> </ol>"},{"location":"Misc/Memo/","title":"Memo","text":"<p> \u7ea6 215 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"Misc/Memo/#mkdocs","title":"mkdocs","text":"<ul> <li>\u4ece\u5934\u6559\u4f60\u7528<code>mkdocs</code>\u6784\u5efa\u4e2a\u4eba\u535a\u5ba2\u7cfb\u7edf: blog.csdn.net.</li> <li>Mkdocs Material\u4f7f\u7528\u5b66\u4e60\uff1aMkdocs Material</li> <li>My notes: local\u9875\u9762\uff0cpublic\u9879\u76ee\u9875\u9762\uff0cpublic\u4e2a\u4eba\u9875\u9762.</li> <li>\u672c\u5730\u6587\u4ef6\u5b58\u653e\u76ee\u5f55\u4e3a<code>C:\\Users\\username\\ChaoNotes</code>\uff0c\u5bf9\u5e94\u4e8eGitHub\u4ed3\u5e93\u4e3a\uff1a<ul> <li>\u6e90\u6587\u6863\u5b58\u653e\u5728<code>master</code>\u5206\u652f</li> <li>site\u76ee\u5f55\u4e0b\u7684\u6587\u6863\u5b58\u653e\u5728<code>gh-pages</code>\u5206\u652f\uff0c\u7528\u4e8e\u90e8\u7f72</li> </ul> </li> <li>\u4e2a\u4eba\u9875\u9762\u5b58\u653e\u76ee\u5f55\u4e3a<code>C:\\Users\\username\\lingyu11.github.io</code>\uff0c\u5bf9\u5e94\u4e8eGitHub\u4ed3\u5e93\u4e3a\uff1a<ul> <li>site\u76ee\u5f55\u4e0b\u7684\u6587\u6863\u5b58\u653e\u5728<code>master</code>\u5206\u652f\uff0c\u7528\u4e8e\u90e8\u7f72\uff08\u4ec5\u4ec5\u662f\u4e3a\u4e86\u4e2a\u4eba\u9875\u9762\u80fd\u591f\u8bbf\u95ee\uff09</li> </ul> </li> <li>\u5982\u4f55\u66f4\u65b0\u7b14\u8bb0\uff1a<ul> <li>Step1: \u90e8\u7f72<code>C:\\Users\\username\\lingyu11.github.io&gt; python -m mkdocs gh-deploy --config-file ../ChaoNotes/mkdocs.yml --remote-branch master</code></li> <li>Step2: \u5b58\u6863 <code>C:\\Users\\username\\ChaoNotes&gt; git add ./git commit -m \"commit message\"/git push</code></li> </ul> </li> <li>\u672c\u5730\u7b14\u8bb0\u91cd\u542f\uff1a<code>C:\\Users\\username\\ChaoNotes&gt;python -m mkdocs serve</code></li> </ul>"},{"location":"Misc/Memo/#useful-links","title":"Useful links","text":"<ul> <li>\u5f00\u6e90\u4e16\u754c\u65c5\u884c\u624b\u518c</li> <li>Linux C\u7f16\u7a0b\u4e00\u7ad9\u5f0f\u5b66\u4e60</li> <li>awesome-c</li> <li>\u5929\u5751\u4e13\u4e1a\u8f6c\u7801\u81ea\u6551\u6307\u5357</li> </ul>"},{"location":"Misc/Todo/","title":"Todo","text":"<p> \u7ea6 373 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"Misc/Todo/#todo","title":"Todo","text":"<p>\ud83d\udccc \u5185\u8054\u56de\u8c03\u51fd\u6570\uff1ahttps://python3-cookbook.readthedocs.io/zh-cn/latest/c07/p11_inline_callback_functions.html</p> <p>\ud83d\udccc \u7b2c\u4e94\u7ae0\uff1a\u6587\u4ef6\u4e0eIO https://python3-cookbook.readthedocs.io/zh-cn/latest/chapters/p05_files_and_io.html</p> <p>\ud83d\udccc \u7b2c\u516d\u7ae0\uff1a\u6570\u636e\u7f16\u7801\u548c\u5904\u7406 https://python3-cookbook.readthedocs.io/zh-cn/latest/chapters/p06_data_encoding_and_process.html</p>"},{"location":"Misc/Todo/#os-todo","title":"OS Todo","text":"<p>\ud83d\udccc AbstractMachine: \u62bd\u8c61\u8ba1\u7b97\u673a</p> <p>\ud83d\udccc \u8be6\u7ec6\u9605\u8bfb\u4ee3\u7801</p> <ul> <li>Lect1/mini-rv32 </li> <li>Lect4/mosaic</li> <li>\u7406\u89e3Lect13/lockdep.cc\u91cc\u7684Floyd-Warshall's algorithm</li> <li>\u914d\u7f6e\u597dvscode\uff0cdebug Lect21/thread-os.c (\u4e0a\u4e0b\u6587\u5207\u6362)</li> <li>\u8ddf\u7740\u89c6\u9891debug Lect23/xv6-riscv (\u4e0a\u4e0b\u6587\u5207\u6362)</li> </ul> <p>\ud83d\udccc \u505alab</p> <ul> <li>L0: \u4e3a\u8ba1\u7b97\u673a\u786c\u4ef6\u7f16\u7a0b</li> <li>L1: \u7269\u7406\u5185\u5b58\u7ba1\u7406 (pmm)</li> <li>L2: \u5185\u6838\u7ebf\u7a0b\u7ba1\u7406 (kmt)</li> <li>M3: GPT-2 \u5e76\u884c\u63a8\u7406 (gpt.c)</li> <li>M6: \u6587\u4ef6\u7cfb\u7edf\u683c\u5f0f\u5316\u6062\u590d (fsrecov)</li> <li>Lecture 27 \u91cc \u5b9e\u73b0\u6587\u4ef6/\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f/ioctl\u518d\u770b\u770b\uff0c28\u4e5f\u53ef\u4ee5\u518d\u770b\u770b\u3002</li> </ul> <p>\ud83d\udccc \u8bfe\u672c</p> <ul> <li>Preface \u524d\u8a00</li> <li>\u7b2c 1 \u7ae0 - Dialogue on the Book</li> <li>\u7b2c 2 \u7ae0 - Introduction to Operating Systems</li> <li>\u7b2c 25 \u7ae0 - Dialogue on Concurrency</li> <li>\u7b2c 26 \u7ae0 - Concurrency and Threads</li> <li>\u7b2c 27 \u7ae0 - Thread API</li> <li>\u7b2c 29 \u7ae0 - Locked Data Structures</li> <li>\u7b2c 30 \u7ae0 - Condition Variables</li> <li>\u7b2c 31 \u7ae0 - Semaphores</li> <li>\u7b2c 33 \u7ae0 - Event-based Concurrency</li> <li>\u7b2c 32 \u7ae0 - Concurrency Bugs</li> <li>\u7b2c 3 \u7ae0 - Dialogue</li> <li>\u7b2c 4 \u7ae0 - Processes</li> <li>\u7b2c 5 \u7ae0 - Process API</li> <li>\u7b2c 12 \u7ae0 - Dialogue</li> <li>\u7b2c 13 \u7ae0 - Address Spaces</li> <li>\u7b2c 14 \u7ae0 - Memory API</li> <li>\u7b2c 15 \u7ae0 - Address Translation</li> <li>\u7b2c 16 \u7ae0 - Segmentation</li> <li>\u7b2c 17 \u7ae0 - Free Space Management</li> <li>\u7b2c 18 \u7ae0 - Introduction to Paging</li> <li>\u7b2c 6 \u7ae0 - Direct Execution</li> <li>\u7b2c 19 \u7ae0 - Translation Lookaside Buffers</li> <li>\u7b2c 20 \u7ae0 - Advanced Page Tables</li> <li>\u7b2c 21 \u7ae0 - Swapping: Mechanisms</li> <li>\u7b2c 22 \u7ae0 - Swapping: Policies</li> <li>\u7b2c 23 \u7ae0 - Complete VM Systems</li> <li>\u7b2c 7 \u7ae0 - CPU Scheduling</li> <li>\u7b2c 8 \u7ae0 - Multi-level Feedback</li> <li>\u7b2c 9 \u7ae0 - Lottery Scheduling</li> <li>\u7b2c 10 \u7ae0 - Multi-CPU Scheduling</li> <li>\u7b2c 11 \u7ae0 - Summary</li> <li>\u7b2c 37 \u7ae0 - Hard Disk Drives</li> <li>\u7b2c 44 \u7ae0 - Flash-based SSDs</li> <li>\u7b2c 36 \u7ae0 - I/O Devices</li> <li>\u7b2c 39 \u7ae0 - Files and Directories</li> <li>\u7b2c 40 \u7ae0 - File System Implementation</li> <li>\u7b2c 41 \u7ae0 - Fast File System (FFS)</li> <li>\u7b2c 38 \u7ae0 - Redundant Disk Arrays (RAID)</li> <li>\u7b2c 42 \u7ae0 - FSCK and Journaling</li> <li>\u7b2c 43 \u7ae0 - Log-structured File System (LFS)</li> </ul>"},{"location":"OS/Lab/","title":"Lab","text":"<p> \u7ea6 574 \u4e2a\u5b57  1091 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 16 \u5206\u949f</p> <p>Tip</p> <p>github \u4e0a\u641c\u7d22 os-workbench\uff0c\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u53c2\u8003\u5b9e\u73b0\u3002\u4f8b\u5982 os-workbench\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u5b9e\u9a8c\u67e5\u770b\u5230\u4e00\u4e9b blog \u7b49\u3002</p>"},{"location":"OS/Lab/#m1-pstree","title":"M1: \u6253\u5370\u8fdb\u7a0b\u6811 (pstree)","text":"<ol> <li> <p>\u9996\u5148\u89c2\u5bdf\u5230Linux\u7684pstree\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff1a\u6253\u5f00 <code>/proc/pid/stat</code>\uff0c\u7136\u540e\u8bfb\u53d6\u91cc\u9762\u7684\u4fe1\u606f\u3002\u5176\u6b21\u6ce8\u610f\u5230 <code>pstree -V /dev/null</code> \u4f9d\u7136\u8f93\u51fa\u4e86\uff0c\u662f fprintf \u5230 stderr \u5b9e\u73b0\u7684\u3002</p> <p>Bash<pre><code>linux$ strace pstree\nopenat(AT_FDCWD, \"/proc/30206/stat\", O_RDONLY) = 4\nnewfstatat(AT_FDCWD, \"/proc/30206\", {st_mode=S_IFDIR|0555, st_size=0, ...}, 0) = 0\n...\nlinux$ pstree -V /dev/null\npstree (PSmisc) 23.4\nCopyright (C) 1993-2020 Werner Almesberger and Craig Small\n\nPSmisc comes with ABSOLUTELY NO WARRANTY.\nThis is free software, and you are welcome to redistribute it under\nthe terms of the GNU General Public License.\nFor more information about these matters, see the files named COPYING.\n</code></pre> 2. pstree.c</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;dirent.h&gt;\n//\u601d\u8def\uff1a\u5148\u4ece1\u53f7\u8fdb\u7a0b\u4e3a\u6839\u8fdb\u884c\u641c\u7d22\u5efa\u6811\uff0c\u7136\u540e\u641c\u7d22/proc\u7684\u5176\u4ed6\u6587\u4ef6\u5939\uff0c\u628a\u4e0d\u5728\u6811\u4e2d\u7684\u52a0\u5165\u8fdb\u53bb\n\n#define pid_t int\n\nbool P = false;\nbool N = false;\nbool V = false;\n\ntypedef struct childs {\n    pid_t pid;\n    struct childs* next;\n} childs;\n\ntypedef struct proc {\n    char name[128];\n    pid_t pid;\n    pid_t ppid;\n    int child_num;\n    pid_t child_pid[128];\n    struct proc *next;\n} proc;\n\nproc root_proc= {.pid = 1, .ppid = 0, .child_num = 0, .next = NULL};\nproc *root = &amp;root_proc;\nchar path1[600];\nchar path2[600];\nchar tmp;\n\n\nbool is_num(char *str) {\n    for (int i = 0; i &lt; strlen(str); i++) {\n        if (isdigit(str[i]) == 0) return false;\n    }\n    return true;\n}\n\nproc *get_last_proc() {\n    proc *pr = root;\n    while (pr-&gt;next != NULL) pr = pr-&gt;next;\n    return pr;\n}\n\nproc *find_proc(int pid) {\n    for (proc *p = root; p != NULL; p = p-&gt;next) {\n        if (p-&gt;pid == pid) {\n            return p;\n        }\n    }\n    return NULL;\n}\n\nvoid print_tree(proc *p){\n    if (P) {\n        printf(\"%s(%d)\", p-&gt;name, p-&gt;pid);\n    } \n    else {\n        printf(\"%s\", p-&gt;name);\n    }\n\n    if (p-&gt;child_num == 0) {\n        printf(\"\\n\");\n        return;\n    }\n    else\n    {\n        printf(\" - \");\n    }\n\n    for (int i = 0; i &lt; p-&gt;child_num; i++) {\n        proc *child = find_proc(p-&gt;child_pid[i]);\n        if (child) {\n            print_tree(child);\n        }\n    }\n}\n\n\nvoid get_procs() {\n    DIR *dir = opendir(\"/proc\");\n    struct dirent *dire;\n    while ((dire = readdir(dir)) != NULL) {\n        if (dire-&gt;d_type == 4 &amp;&amp; is_num(dire-&gt;d_name)) { // \u68c0\u67e5\u7c7b\u578b\u662f\u5426\u4e3a\u76ee\u5f55\uff0c\u4ee5\u53ca\u662f\u5426\u53ea\u5305\u542b\u6570\u5b57(pid)\n            sprintf(path1, \"/proc/%s/stat\", dire-&gt;d_name);\n            sprintf(path2, \"/proc/%s/task/%s/children\", dire-&gt;d_name, dire-&gt;d_name);\n            FILE *fp = fopen(path1, \"r\");\n            if (strcmp(dire-&gt;d_name, \"1\") == 0) { // 1\u53f7\u8fdb\u7a0b\n                if (fscanf(fp,\"%d (%s %c %d\", &amp;root-&gt;pid, root-&gt;name, &amp;tmp, &amp;root-&gt;ppid))\n                {\n                    root-&gt;name[strlen(root-&gt;name) - 1] = '\\0';\n                    fclose(fp);\n                    fp = fopen(path2, \"r\");\n                    pid_t child_pid;\n                    while (fscanf(fp, \"%d\", &amp;child_pid) != EOF) {\n                        root-&gt;child_pid[root-&gt;child_num++] = child_pid;\n                        assert(root-&gt;child_num &lt;= 128);\n                    }\n                }\n            }\n            else { // \u5176\u4ed6\u8fdb\u7a0b\n                proc *last_proc = get_last_proc();\n                proc *cur_proc = malloc(sizeof(proc));\n                if (fscanf(fp,\"%d (%s %c %d\", &amp;cur_proc-&gt;pid, cur_proc-&gt;name, &amp;tmp, &amp;cur_proc-&gt;ppid))\n                {\n                    cur_proc-&gt;name[strlen(cur_proc-&gt;name) - 1] = '\\0';\n                    last_proc-&gt;next = cur_proc;\n                    fclose(fp);\n                    fp = fopen(path2, \"r\");\n                    pid_t child_pid;\n                    cur_proc-&gt;child_num = 0;\n                    cur_proc-&gt;next = NULL;\n                    while (fscanf(fp, \"%d\", &amp;child_pid) != EOF) {\n                        cur_proc-&gt;child_pid[cur_proc-&gt;child_num++] = child_pid;\n                        assert(cur_proc-&gt;child_num &lt;= 128);\n                    }\n                }\n            }\n            fclose(fp); \n        }\n    }\n}\n\nint main(int argc, char *argv[]) {\n    for (int i = 0; i &lt; argc; i++) {\n        if (strcmp(argv[i], \"-p\") == 0 || strcmp(argv[i], \"--show-pids\") == 0) {\n            P = true;\n        }\n        else if (strcmp(argv[i], \"-n\") == 0 || strcmp(argv[i], \"--numeric-sort\") == 0 ){\n            N = true;\n        }\n        else if (strcmp(argv[i], \"-V\") == 0 || strcmp(argv[i], \"--version\") == 0) {\n            V = true;\n        }\n    }\n    if (V) {\n        fprintf(stderr, \"pstree version 1.0 CopyRight (C) 2024 Lingyu\\n\");\n    }\n    else {\n        get_procs();\n        print_tree(root);\n    }\n    return 0;\n}\n</code></pre> </li> </ol>"},{"location":"OS/Lab/#m2-libco","title":"M2: \u534f\u7a0b\u5e93 (libco)","text":"<ol> <li> <p><code>setjmp</code> \u548c <code>longjmp</code>: <code>setjmp</code> \u548c <code>longjmp</code> \u662f C \u8bed\u8a00\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u7ec4\u7528\u4e8e\u975e\u5c40\u90e8\u8df3\u8f6c\u7684\u51fd\u6570\u3002\u5b83\u4eec\u901a\u5e38\u4e00\u8d77\u4f7f\u7528\uff0c\u7528\u4e8e\u5b9e\u73b0\u534f\u7a0b\uff08coroutine\uff09\u3001\u5f02\u5e38\u5904\u7406\u673a\u5236\u6216\u8005\u5728\u51fd\u6570\u8c03\u7528\u6808\u4e2d\u8fdb\u884c\u957f\u8ddd\u79bb\u8df3\u8f6c\u3002</p> <ul> <li> <p>\ud83d\udce5<code>setjmp</code> \u51fd\u6570\u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u7684\u7a0b\u5e8f\u6267\u884c\u73af\u5883\uff08\u4e0a\u4e0b\u6587\uff09\u5230\u4e00\u4e2a <code>jmp_buf</code> \u7c7b\u578b\u7684\u7f13\u51b2\u533a\u4e2d\u3002\u8fd9\u4e2a\u7f13\u51b2\u533a\u901a\u5e38\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u503c\u3001\u6808\u6307\u9488\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668\u7b49\u5173\u952e\u4fe1\u606f\u3002<code>setjmp</code> \u51fd\u6570\u7684\u8fd4\u56de\u503c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u8c03\u7528 <code>setjmp</code>\uff0c\u5b83\u4f1a\u8fd4\u56de 0\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u3002</li> <li>\u5982\u679c\u662f\u901a\u8fc7 <code>longjmp</code> \u51fd\u6570\u8fdb\u884c\u8df3\u8f6c\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u6062\u590d\u7684\u73af\u5883\u3002</li> </ul> </li> <li> <p>\u21aa\ufe0f<code>longjmp</code> \u51fd\u6570\u7528\u4e8e\u4ece\u5f53\u524d\u7684\u6267\u884c\u70b9\u8df3\u8f6c\u5230\u4e4b\u524d\u901a\u8fc7 <code>setjmp</code> \u4fdd\u5b58\u7684\u73af\u5883\u4e2d\u3002\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>jmp_buf</code> \u7c7b\u578b\u7684\u7f13\u51b2\u533a\uff0c\u8fd9\u4e2a\u7f13\u51b2\u533a\u662f\u4e4b\u524d\u901a\u8fc7 <code>setjmp</code> \u4fdd\u5b58\u7684\u3002</li> <li>\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u8fd9\u4e2a\u503c\u4f1a\u88ab\u7528\u4f5c <code>setjmp</code> \u7684\u8fd4\u56de\u503c\u3002</li> </ul> </li> </ul> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;setjmp.h&gt;\n\njmp_buf env;\n\nvoid foo() {\n    printf(\"In foo()\\n\");\n    longjmp(env, 1); // \u8df3\u8f6c\u5230 setjmp \u5904\uff0c\u5e76\u8bbe\u7f6e\u8fd4\u56de\u503c\u4e3a 1\n}\n\nint main() {\n    int ret = setjmp(env); // \u4fdd\u5b58\u5f53\u524d\u73af\u5883\n    if (ret == 0) {\n        printf(\"First time through\\n\");\n        foo();\n    } else {\n        printf(\"Back in main via longjmp, ret = %d\\n\", ret);\n    }\n    return 0;\n}\n</code></pre> Bash<pre><code>linux$ ./a.out \nFirst time through\nIn foo()\nBack in main via longjmp, ret = 1\n</code></pre> </li> <li> <p>co.c C<pre><code>#include \"co.h\"\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;setjmp.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;time.h&gt;\n\n#define KB *1024\n#define STACK_SIZE (64 KB)\n// #define DEBUG 1\n#ifdef DEBUG\n#define Log(format, ...) \\\n    printf(\"\\33[1;34m[%s, %d, %s] \" format \"\\33[0m\\n\", \\\n        __FILE__, __LINE__, __func__, ## __VA_ARGS__)\n#else\n#define Log(format, ...)\n#endif\n\nstatic inline void\nstack_switch_call(void *sp, void *entry, uintptr_t arg) {\n  asm volatile (\n#if __x86_64__\n    \"movq %0, %%rsp; movq %2, %%rdi; jmp *%1\"\n      :\n      : \"b\"((uintptr_t)sp),\n        \"d\"(entry),\n        \"a\"(arg)\n      : \"memory\"\n    // \u9996\u5148\u5c06\u65b0\u5806\u6808\u6307\u9488 sp \u79fb\u52a8\u5230 rsp \u5bc4\u5b58\u5668\uff0c\u7136\u540e\u5c06\u53c2\u6570 arg \u79fb\u52a8\u5230 rdi \u5bc4\u5b58\u5668\uff0c\u6700\u540e\u8df3\u8f6c\u5230 entry \u6307\u5411\u7684\u5730\u5740\u6267\u884c\n#else\n    \"movl %0, %%esp; movl %2, 4(%0); jmp *%1\"\n      :\n      : \"b\"((uintptr_t)sp - 8),\n        \"d\"(entry),\n        \"a\"(arg)\n      : \"memory\"\n#endif\n    );\n}\n\nenum co_status {\n  CO_NEW = 1, // \u65b0\u521b\u5efa\uff0c\u8fd8\u672a\u6267\u884c\u8fc7\n  CO_RUNNING, // \u5df2\u7ecf\u6267\u884c\u8fc7\n  CO_WAITING, // \u5728 co_wait \u4e0a\u7b49\u5f85\n  CO_DEAD,    // \u5df2\u7ecf\u7ed3\u675f\uff0c\u4f46\u8fd8\u672a\u91ca\u653e\u8d44\u6e90\n};\n\nstruct co {\n  const char *name;\n  void (*func)(void *);   // co_start \u6307\u5b9a\u7684\u5165\u53e3\u5730\u5740\u548c\u53c2\u6570\n  void *arg;\n  void *stackptr;\n  enum co_status status;  // \u534f\u7a0b\u7684\u72b6\u6001\n  jmp_buf context;        // \u5bc4\u5b58\u5668\u73b0\u573a (setjmp.h)\n  struct co *next;\n  struct co *prev;\n  struct co *waiter;\n  uint8_t stack[STACK_SIZE] __attribute__ ((aligned(16))); // \u534f\u7a0b\u7684\u5806\u6808\n};\n\nstruct co *co_main, *co_current;\nint co_num = 0;\n\n// __attribute__((constructor)) \u5c5e\u6027\u7684\u51fd\u6570\u4f1a\u5728 main \u6267\u884c\u524d\u88ab\u8fd0\u884c\n__attribute__((constructor)) void co_init() {\n  co_main = malloc(sizeof(struct co));\n  co_main-&gt;name = \"main\";\n  co_main-&gt;stackptr = co_main-&gt;stack + sizeof(co_main-&gt;stack);\n  co_main-&gt;status = CO_RUNNING;\n  memset(co_main-&gt;stack, 0, sizeof(co_main-&gt;stack));\n  co_main-&gt;next = co_main;\n  co_main-&gt;prev = co_main;\n  co_current = co_main;\n  co_num += 1;\n}\n\nvoid debugprint() {\n  struct co *p = co_main;\n  printf(\"debugprint begin\\n\");\n  for (int i = 0; i &lt; co_num; i++) {\n    Log(\"co: %s, co_num: %d\", p-&gt;name, co_num);\n    p = p-&gt;next;\n  }\n  printf(\"debugprint end\\n\");\n}\n\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u534f\u7a0b\nstruct co* co_start(const char *name, void (*func)(void *), void *arg) {\n  struct co *co_new = malloc(sizeof(struct co));\n  co_new-&gt;name = name;\n  co_new-&gt;func = func;\n  co_new-&gt;arg = arg;\n  co_new-&gt;status = CO_NEW;\n  co_new-&gt;stackptr = co_new-&gt;stack + sizeof(co_new-&gt;stack);\n  memset(co_new-&gt;stack, 0, sizeof(co_new-&gt;stack));\n  struct co *prev = co_main-&gt;prev;\n  co_new-&gt;next = co_main;\n  co_main-&gt;prev = co_new;\n  co_new-&gt;prev = prev;\n  prev-&gt;next = co_new;\n  co_num += 1;\n  //debugprint();\n  return co_new;\n};\n\nvoid wrapper() {\n  co_current-&gt;status = CO_RUNNING;\n  co_current-&gt;func(co_current-&gt;arg);\n  co_current-&gt;status = CO_DEAD;\n  if (co_current-&gt;waiter != NULL) {\n    co_current-&gt;waiter-&gt;status = CO_RUNNING;\n    co_current-&gt;waiter = NULL;\n  }\n  co_yield();\n}\n\n// \u5b9e\u73b0\u534f\u7a0b\u7684\u5207\u6362\nvoid co_yield() {\n  int val = setjmp(co_current-&gt;context); // \u5c06\u5f53\u524d\u534f\u7a0b\u7684\u4e0a\u4e0b\u6587\uff08\u5bc4\u5b58\u5668\u72b6\u6001\u7b49\uff09\u4fdd\u5b58\u5230 co_current-&gt;context \u4e2d\n  if (val == 0) { // \u8868\u793a\u8fd9\u662f\u7b2c\u4e00\u6b21\u8c03\u7528 setjmp\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u9009\u62e9\u4e0b\u4e00\u4e2a\u5f85\u8fd0\u884c\u7684\u534f\u7a0b (\u76f8\u5f53\u4e8e\u4fee\u6539 current)\uff0c\u5e76\u5207\u6362\u5230\u8fd9\u4e2a\u534f\u7a0b\u8fd0\u884c\n    struct co *next = co_current-&gt;next;\n    while (next-&gt;status == CO_WAITING || next-&gt;status == CO_DEAD) next = next-&gt;next;\n    co_current = next;\n    if (next-&gt;status == CO_NEW) {\n      if (sizeof(void*) == 4) stack_switch_call(next-&gt;stackptr, wrapper, (uintptr_t)NULL); // 32\u4f4d\u7cfb\u7edf\n      else {                                                                               // 64\u4f4d\u7cfb\u7edf\n        asm volatile(\"mov %0, %%rsp\" :: \"b\"((uintptr_t)next-&gt;stackptr));\n        wrapper();\n      }\n    }\n    else { // next \u4e0d\u662f\u65b0\u521b\u5efa\u7684\uff0c\u5219\u8c03\u7528 longjmp \u51fd\u6570\u6062\u590d\u4e0b\u4e00\u4e2a\u534f\u7a0b\u7684\u4e0a\u4e0b\u6587\uff0c\u4f7f\u5176\u7ee7\u7eed\u6267\u884c\u3002\n      longjmp(next-&gt;context, 1);\n    } \n  }\n  else { /* do nothing */}\n  // setjmp \u662f\u7531\u53e6\u4e00\u4e2a longjmp \u8fd4\u56de\u7684\uff0c\u6b64\u65f6\u4e00\u5b9a\u662f\u56e0\u4e3a\u67d0\u4e2a\u534f\u7a0b\u8c03\u7528 co_yield()\uff0c\u6b64\u65f6\u4ee3\u8868\u4e86\u5bc4\u5b58\u5668\u73b0\u573a\u7684\u6062\u590d\uff0c\n  // \u56e0\u6b64\u4e0d\u5fc5\u505a\u4efb\u4f55\u64cd\u4f5c\uff0c\u76f4\u63a5\u8fd4\u56de\u5373\u53ef\u3002\n}\n\n// \u8868\u793a\u5f53\u524d\u534f\u7a0b\u9700\u8981\u7b49\u5f85\uff0c\u76f4\u5230 co \u534f\u7a0b\u7684\u6267\u884c\u5b8c\u6210\u624d\u80fd\u7ee7\u7eed\u6267\u884c\nvoid co_wait(struct co *co) {\n  if (co-&gt;status == CO_DEAD) {\n    Log(\"free %s\", co-&gt;name);\n    struct co *prev = co-&gt;prev;\n    struct co *next = co-&gt;next;\n    prev-&gt;next = next;\n    next-&gt;prev = prev;\n    free(co);\n  }\n  else {\n    co-&gt;waiter = co_current;\n    co_current-&gt;status = CO_WAITING;\n    co_yield();\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"OS/Lab/#m3-gpt-2-gptc","title":"M3: GPT-2 \u5e76\u884c\u63a8\u7406 (gpt.c)","text":""},{"location":"OS/Lab/#m4-c-read-eval-print-loop-crepl","title":"M4: C Read-Eval-Print-Loop (crepl)","text":"<ol> <li>crepl.c C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;wait.h&gt;\n#include &lt;dlfcn.h&gt;\n#include &lt;stdbool.h&gt;\n\n#if defined(__i386__)\n  #define TARGET \"-m32\"\n#elif defined(__x86_64__)\n  #define TARGET \"-m64\"\n#endif\n\nstatic char line[4096];\nstatic char tmp[4];\nstatic char src_filename[32];\nstatic char dst_filename[32];\nstatic int (*f)();\nstatic int value;\n\nvoid compile(bool func) {\n  sprintf(src_filename, \"/tmp/func_c_XXXXXX\");\n  sprintf(dst_filename, \"/tmp/func_so_XXXXXX\");\n  if (mkstemp(src_filename) == -1) printf(\"\\033[1;31m      Mkstemp Failed!\\033[0m\\n\");\n  if (mkstemp(dst_filename) == -1) printf(\"\\033[1;31m      Mkstemp Failed!\\033[0m\\n\");\n  FILE *fp = fopen(src_filename, \"w\");\n  if (func) fprintf(fp, \"%s\", line);\n  else fprintf(fp, \"int wrap_func() {return (%s);}\", line);\n  fclose(fp);\n  char *exec_argv[] = {\"gcc\", TARGET, \"-x\", \"c\", \"-fPIC\", \"-w\", \"-shared\", \"-o\", dst_filename, src_filename, NULL};\n  int pid = fork();\n  if (pid == 0) {  // \u5b50\u8fdb\u7a0b\n    int fd = open(\"/dev/null\", O_RDWR);\n    dup2(fd, STDOUT_FILENO); // \u5c06 fd \u590d\u5236\u5230\u6807\u51c6\u8f93\u51fa\uff08STDOUT_FILENO\uff09\u548c\u6807\u51c6\u9519\u8bef\uff08STDERR_FILENO\uff09\n    dup2(fd, STDERR_FILENO); // \u610f\u5473\u7740\u5b50\u8fdb\u7a0b\u7684\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u90fd\u5c06\u88ab\u91cd\u5b9a\u5411\u5230 /dev/null\uff0c\u5373\u4e22\u5f03\u6240\u6709\u8f93\u51fa\n    execvp(exec_argv[0], exec_argv); // execve \u63a5\u53d7\u4e00\u4e2a\u8def\u5f84\u540d\u4f5c\u4e3a\u53c2\u6570\uff0cexecvp \u63a5\u53d7\u4e00\u4e2a\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\n    // example\uff1aexecve(\"/bin/ls\", args, envp);  execvp(\"ls\", args);\n  }\n  else {           // \u7236\u8fdb\u7a0b\n    int status;\n    wait(&amp;status); // \u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u4e8e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ed3\u675f\u5e76\u83b7\u53d6\u5176\u9000\u51fa\u72b6\u6001\u3002\n    if (status != 0) printf(\"\\033[1;31m      Compile Error!\\033[0m\\n\");\n    else {\n      // dlopen \u51fd\u6570: \u52a0\u8f7d\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5e93\uff08.so \u6587\u4ef6\uff09\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u53e5\u67c4\uff0c\u7528\u4e8e\u540e\u7eed\u8bbf\u95ee\u8be5\u5e93\u4e2d\u7684\u51fd\u6570\u548c\u53d8\u91cf\n      void *handle = dlopen(dst_filename, RTLD_NOW | RTLD_GLOBAL);\n      if (!handle) printf(\"\\033[1;31m      Compile Error!\\033[0m\\n\");\n      else { \n        if (func) printf(\"\\033[1;32m      Added: \\033[1;30m%s\\033[0m\", line);\n        else {\n          f = dlsym(handle, \"wrap_func\"); // dlsym \u51fd\u6570: \u4ece\u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u67e5\u627e\u5e76\u83b7\u53d6\u4e00\u4e2a\u7b26\u53f7\u7684\u5730\u5740\n          value = f();\n          printf(\"\\033[1;32m      Result: \\033[1;30m%d\\033[0m\\n\", value);\n          dlclose(handle); \n        }\n      }\n    }\n  }\n  unlink(src_filename); // \u7cfb\u7edf\u8c03\u7528\uff0c\u7528\u4e8e\u5220\u9664\u6587\u4ef6\n  unlink(dst_filename);\n}\n\nint main(int argc, char *argv[]) {\n  while (1) {\n    printf(\"crepl&gt; \");\n    memset(line, '\\0', sizeof(line));\n    memset(tmp, '\\0', sizeof(tmp));\n    fflush(stdout);\n    if (!fgets(line, sizeof(line), stdin)) {\n      break;\n    }\n    sscanf(line, \"%3s\", tmp);\n    compile(strncmp(line, \"int\", 3) == 0);\n  }\n}\n</code></pre></li> </ol>"},{"location":"OS/Lab/#m5-profiler-sperf","title":"M5: \u7cfb\u7edf\u8c03\u7528 Profiler (sperf)","text":"<ol> <li> <p>sperf.c C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;regex.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;dirent.h&gt;\n#include &lt;stdbool.h&gt;\n\n#define BUFFER_SIZE 8192\n#define PRINT_NUM 5\n#define TIME_INTERVAL_SEC 1\n\n// \u94fe\u8868\ntypedef struct list_node {\n  char *name;\n  double time;\n  struct list_node *next;\n} list_node;\n\n// \u94fe\u8868\u63d2\u5165\u8282\u70b9\uff0c\u540c\u65f6\u4fdd\u8bc1\u65f6\u95f4\u59cb\u7ec8\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\nlist_node *insert_list_node(list_node *head, list_node *node) {\n  if (node == NULL) {\n    return head;\n  }\n\n  if (head == NULL || head-&gt;time &lt; node-&gt;time) {\n    if (head != NULL) {\n      node-&gt;next = head;\n    }\n    return node;\n  }\n\n  list_node *prev = head;\n  for (list_node *curr = head-&gt;next; curr != NULL; curr = curr-&gt;next) {\n    if (curr-&gt;time &lt; node-&gt;time) {\n      break;\n    }\n    prev = curr;\n  }\n\n  // prev -&gt; node -&gt; curr (\u5c06 node \u63d2\u5165 prev \u548c curr \u4e4b\u95f4)\n  node-&gt;next = prev-&gt;next;\n  prev-&gt;next = node;\n  return head;\n}\n\n// \u91ca\u653e\u94fe\u8868\u5185\u5b58\nvoid free_list(list_node *head) {\n  list_node *curr = head;\n  while (curr != NULL) {\n    list_node *next = curr-&gt;next;\n    if (curr-&gt;name != NULL) {\n      free(curr-&gt;name);\n    }\n    curr-&gt;name = NULL;\n    free(curr);\n    curr = next;\n  }\n  return;\n}\n\n\nint main(int argc, char *argv[])  {\n  int fd[2]; // fd[0]: \u8bfb\u53e3\uff0cfd[1]: \u5199\u53e3\n  if (pipe(fd) == -1) {\n    // \u521b\u5efa\u7ba1\u9053\u5931\u8d25\n    perror(\"pipe failed\\n\");\n    exit(EXIT_FAILURE);\n  }\n  int pid = fork();\n  if (pid == -1) {\n    // \u5b50\u8fdb\u7a0b\u521b\u5efa\u5931\u8d25\n    perror(\"fork failed\\n\");\n    exit(EXIT_FAILURE);\n  } else if (pid == 0) {\n    // \u5b50\u8fdb\u7a0b\uff0c\u6267\u884cstrace\u547d\u4ee4\n    // \u5173\u95ed\u7ba1\u9053\u8bfb\u53d6\u7aef\uff0c\u5e76\u5c06\u7ba1\u9053\u5199\u5165\u7aef\u91cd\u5b9a\u5411\u5230\u6807\u51c6\u9519\u8bef\u8f93\u51fa\n    close(fd[0]);\n    if (dup2(fd[1], STDERR_FILENO) == -1) {\n      // \u91cd\u5b9a\u5411\u5931\u8d25\n      perror(\"dup2 failed!\\n\");\n      close(fd[1]);\n      exit(EXIT_FAILURE);\n    }\n    // \u6267\u884cstrace\n    char *exec_argv[argc + 2];\n    exec_argv[0] = \"strace\";\n    exec_argv[1] = \"-T\";\n    for (int i = 1; i &lt; argc; i++) {\n      exec_argv[i + 1] = argv[i];\n    }\n    exec_argv[argc + 1] = NULL;\n\n    char *exec_envp[] = {\n        \"PATH=/bin\",\n        NULL,\n    };\n    execve(\"strace\", exec_argv, exec_envp);\n    execve(\"/bin/strace\", exec_argv, exec_envp);\n    execve(\"/usr/bin/strace\", exec_argv, exec_envp);\n    perror(argv[0]); // \u5982\u679c\u524d\u9762\u7684\u4e09\u4e2a execve \u8c03\u7528\u90fd\u5931\u8d25\u4e86\uff0c\u5373\u6ca1\u6709\n    // \u627e\u5230 strace \u547d\u4ee4\u6216\u8005\u6267\u884c strace \u547d\u4ee4\u5931\u8d25\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u6267\u884c\u5230\u8fd9\u91cc\n    close(fd[1]);\n    exit(EXIT_FAILURE);\n  } else {\n    // \u7236\u8fdb\u7a0b\uff0c\u8bfb\u53d6strace\u8f93\u51fa\u5e76\u7edf\u8ba1\n    regex_t reg1, reg2; // reg1: \u8c03\u7528\u51fd\u6570\u540d  reg2: \u82b1\u8d39\u65f6\u95f4\n    if (regcomp(&amp;reg1, \"[^\\\\(\\n\\r\\b\\t]*\\\\(\", REG_EXTENDED) ||\n        regcomp(&amp;reg2, \"&lt;.*&gt;\", REG_EXTENDED)) {\n      perror(\"regcomp failed!\\n\");\n      exit(EXIT_FAILURE);\n    }\n    // \u94fe\u8868\u8bb0\u5f55\u5404\u9879\u8c03\u7528\u65f6\u95f4\u4fe1\u606f\n    list_node *head = NULL;\n    // \u8c03\u7528\u603b\u65f6\u95f4\n    double total_time = 0;\n    // \u7ba1\u9053\u8bfb\u53d6\u7f13\u5b58\n    char buffer[BUFFER_SIZE];\n    // \u5173\u95ed\u7ba1\u9053\u5199\u5165\u7aef\uff0c\u5e76\u4ece\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\n    close(fd[1]);\n    FILE *fp = fdopen(fd[0], \"r\");\n    // \u5f53\u524d\u65f6\u95f4\n    int curr_time = 1;\n    // \u8fd0\u884c\u6807\u5fd7\n    int run_flag = 1;\n    while (run_flag) {\n      while (fgets(buffer, BUFFER_SIZE, fp) &gt; 0) {\n        // \u8bfb\u53d6\u5230 +++ exited with 1/0 +++ \u9000\u51fa\n        if (strstr(buffer, \"+++ exited with 0 +++\") != NULL ||\n            strstr(buffer, \"+++ exited with 1 +++\") != NULL) {\n          run_flag = 0;\n          break;\n        }\n        // \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u83b7\u53d6\u4fe1\u606f\n        regmatch_t regmat1, regmat2;\n        if (regexec(&amp;reg1, buffer, 1, &amp;regmat1, 0) ||\n            regexec(&amp;reg2, buffer, 1, &amp;regmat2, 0)) {\n          continue;\n        }\n        // \u8bfb\u53d6\u8c03\u7528\u540d\u79f0\u4fe1\u606f\n        int len = 0;\n        len = regmat1.rm_eo - regmat1.rm_so;\n        char *name = (char *)malloc(sizeof(char) * len);\n        strncpy(name, buffer + regmat1.rm_so, len);\n        name[len - 1] = '\\0';\n        // \u8bfb\u53d6\u65f6\u95f4\u4fe1\u606f\n        len = regmat2.rm_eo - regmat2.rm_so - 2;\n        char *value = (char *)malloc(sizeof(char) * len);\n        strncpy(value, buffer + regmat2.rm_so + 1, len);\n        double spent_time = atof(value);\n        // \u53ca\u65f6\u91ca\u653evalue\u5185\u5b58\n        free(value);\n        value = NULL;\n        // \u66f4\u65b0\u603b\u65f6\u95f4\n        total_time += spent_time;\n        // \u5c06\u4fe1\u606f\u4fdd\u5b58\u5230\u94fe\u8868\u4e2d\n        list_node *node = NULL;\n        int find_flag = 0;\n        list_node *prev = NULL;\n        for (list_node *curr = head; curr != NULL; curr = curr-&gt;next) {\n          // \u82e5\u4fe1\u606f\u5df2\u5b58\u5728\uff0c\u5219\u5c06\u5176\u66f4\u65b0\u540e\uff0c\u91cd\u65b0\u63d2\u5165\n          if (strcmp(curr-&gt;name, name) == 0) {\n            find_flag = 1;\n            if (prev == NULL) {\n              head = curr-&gt;next;\n            } else {\n              prev-&gt;next = curr-&gt;next;\n            }\n            node = curr;\n            // \u4fe1\u606f\u5b58\u5728\uff0c\u53ca\u65f6\u91ca\u653ename\u5185\u5b58\n            free(name);\n            name = NULL;\n            break;\n          }\n          prev = curr;\n        }\n\n        if (find_flag) {\n          // \u66f4\u65b0\u4fe1\u606f\n          node-&gt;time += spent_time;\n        } else {\n          // \u65b0\u5efa\u8282\u70b9\uff0c\u521d\u59cb\u5316\u4fe1\u606f\n          node = (list_node *)malloc(sizeof(list_node));\n          node-&gt;name = name;\n          node-&gt;time = spent_time;\n        }\n        // \u63d2\u5165\u94fe\u8868\n        head = insert_list_node(head, node);\n      }\n\n      // \u683c\u5f0f\u5316\u6253\u5370\u524d\u4e94\u5360\u6bd4\u8c03\u7528\u4fe1\u606f\n      printf(\"Time: %ds\\n\", curr_time);\n      int k = 0;\n      for (list_node *node = head; node != NULL; node = node-&gt;next) {\n        if (k++ &gt;= PRINT_NUM) {\n          break;\n        }\n        printf(\"%s (%0.1f%%)\\n\", node-&gt;name, node-&gt;time / total_time * 100);\n      }\n      printf(\"=============\\n\");\n      curr_time += TIME_INTERVAL_SEC;\n      sleep(TIME_INTERVAL_SEC);\n    }\n    // \u5173\u95ed\u7ba1\u9053\u8bfb\u53d6\u7aef\uff0c\u91ca\u653e\u76f8\u5173\u8d44\u6e90\n    regfree(&amp;reg1);\n    regfree(&amp;reg2);\n    fclose(fp);\n    close(fd[0]);\n    free_list(head);\n    exit(EXIT_SUCCESS);\n  }\n}\n</code></pre></p> </li> <li> <p>output Bash<pre><code>linux$ ./sperf-64 ls\nMakefile  sperf-32  sperf-64  sperf.c\nTime: 1s\nmmap (21.5%)\nmprotect (12.6%)\nopenat (7.5%)\nclose (6.8%)\nnewfstatat (6.1%)\n=============\n</code></pre></p> </li> </ol>"},{"location":"OS/Lab/#m6-fsrecov","title":"M6: \u6587\u4ef6\u7cfb\u7edf\u683c\u5f0f\u5316\u6062\u590d (fsrecov)","text":"<ol> <li> <p>FAT\uff08File Allocation Table\uff0c\u6587\u4ef6\u5206\u914d\u8868\uff09\u662f\u4e00\u79cd\u7528\u4e8e\u7ba1\u7406\u78c1\u76d8\u6587\u4ef6\u5b58\u50a8\u7684\u6587\u4ef6\u7cfb\u7edf\u3002BPB\uff08BIOS Parameter Block\uff0cBIOS\u53c2\u6570\u5757\uff09\u662fFAT\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5b83\u5305\u542b\u4e86\u6587\u4ef6\u7cfb\u7edf\u7684\u5173\u952e\u53c2\u6570\u548c\u8bbe\u7f6e\u3002</p> <p>BPB\u901a\u5e38\u4f4d\u4e8e\u78c1\u76d8\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\uff08\u5f15\u5bfc\u6247\u533a\uff09\uff0c\u5b83\u63d0\u4f9b\u4e86\u6587\u4ef6\u7cfb\u7edf\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u6bcf\u6247\u533a\u5b57\u8282\u6570\u3001\u6bcf\u7c07\u6247\u533a\u6570\u3001\u4fdd\u7559\u6247\u533a\u6570\u3001FAT\u8868\u4e2a\u6570\u3001\u6839\u76ee\u5f55\u9879\u6570\u7b49\u3002\u8fd9\u4e9b\u53c2\u6570\u5bf9\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u6b63\u786e\u8bbf\u95ee\u548c\u7ba1\u7406\u6587\u4ef6\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\u3002</p> </li> <li> <p>fsrecov.c C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;math.h&gt;\n#include &lt;time.h&gt;\n\n#define B 1\n\n//#define __DEBUG__\n//#define __DDEBUG__\n\n#define KB (1024 * B)\n#define MB (1024 * KB)\n#define GB (1024 * KB)\n\n#ifdef __DEBUG__\n#define print(...) printf(__VA_ARGS__)\n#else\n#define print(...) \n#endif\n\n#ifdef __DDEBUG__\n#define printk(...) printf(__VA_ARGS__)\n#else\n#define printk(...) \n#endif\n\n#define Unknown (-1)\n#define DirEntry 1\n#define beNotUsed 2\n#define BMPContent 3\n\n// FAT \u7684 BPB(BIOS Parameter Block) \u662fFAT\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\n// \u5b83\u5305\u542b\u4e86\u6587\u4ef6\u7cfb\u7edf\u7684\u5173\u952e\u53c2\u6570\u548c\u8bbe\u7f6e\u3002\nint BPB_BytsPerSec;\nint BPB_SecPerClus;\nint BPB_RootClus;\nint BPB_FATSz32;\nint BPB_HiddSec;\nint BPB_RsvdSecCnt;\nint BPB_NumFATs;\nint offset;\nint clusSize;\n\ninline bool inFile(const void* nowAddr, const void* fileStart, int fileSize) {\n    return ((intptr_t)(nowAddr) - (intptr_t)(fileStart)) &lt; fileSize ? true : false;\n}\ninline int getClusterIndex(const void* addr, const void* start, int clusterSize) {\n    return ((intptr_t)addr - (intptr_t) start) / clusterSize;\n}\ninline void* nextClus(const void* Clus) {\n    return (void*)((intptr_t)(Clus) + BPB_BytsPerSec * BPB_SecPerClus);\n}\n\nstruct FATHeader {\n    uint8_t  BS_jmpBoot[3];\n    uint8_t  BS_OEMName[8];\n    uint16_t BPB_BytsPerSec;\n    uint8_t  BPB_SecPerClus;\n    uint16_t BPB_RsvdSecCnt;\n    uint8_t  BPB_NumFATs;\n    uint16_t BPB_RootEntCnt;\n    uint16_t BPB_TotSec16;\n    uint8_t  BPB_Media;\n    uint16_t BPB_FATSz16;\n    uint16_t BPB_SecPerTrk;\n    uint16_t BPB_NumHeads;\n    uint32_t BPB_HiddSec;\n    uint32_t BPB_TotSec32;\n    uint32_t BPB_FATSz32;\n    uint16_t BPB_ExtFlags;\n    uint16_t BPB_FSVer;\n    uint32_t BPB_RootClus;\n    uint16_t BPB_FSInfo;\n    uint16_t BPB_BkBootSec;\n    uint8_t  BPB_Reserved[12];\n    uint8_t  BS_DrvNum;\n    uint8_t  BS_Reserved;\n    uint8_t  BS_BootSig;\n    uint32_t BS_VolID; \n    uint8_t  BS_VolLab[11];\n    uint8_t  BS_FilSysType0;\n    uint8_t  BS_FilSysType1;\n    uint8_t  BS_FilSysType2;\n    uint8_t  BS_FilSysType3;\n    uint8_t  BS_FilSysType4;\n    uint8_t  BS_FilSysType5;\n    uint8_t  BS_FilSysType6;\n    uint8_t  BS_FilSysType7;\n    uint8_t  padding[420];\n    uint16_t Signature_word;\n}__attribute__((packed));\n\nstruct BMPHeader {\n    uint8_t  bfType[2];\n    uint32_t bfSize;\n    uint16_t bfReserved1;\n    uint16_t bfReserved2;\n    uint32_t bfOffBits;\n}__attribute__((packed));\n\nstruct BMPInfoHeader {\n    uint32_t biSize;\n    int32_t  biWidth;\n    uint32_t biHeight;\n    uint16_t biPlanes;\n    uint16_t biBitCount;\n    uint32_t biCompression;\n    uint32_t biSizeImage;\n    int32_t  biXPelsPerMeter;\n    int32_t  biYPelsPerMeter;\n    uint32_t biClrUsed;\n    uint32_t biClrImportant;\n}__attribute__((packed));\n\nstruct FATShortDirectory {\n    uint8_t  DIR_Name[11];\n    uint8_t  DIR_Attr;\n    uint8_t  DIR_NTRes;\n    uint8_t  DIR_CrtTimeTenth;\n    uint16_t DIR_CrtTime;\n    uint16_t DIR_CrtDate;\n    uint16_t DIR_LstAccDate;\n    uint16_t DIR_FstClusHI;\n    uint16_t DIR_WrtTime;\n    uint16_t DIR_WrtDate;\n    uint16_t DIR_FstClusLO;\n    uint32_t DIR_FileSize;\n}__attribute__((packed));\n\nstruct FATLongDirectory {\n    uint8_t  LDIR_Ord;\n    uint16_t LDIR_Name1[5];\n    uint8_t  LDIR_Attr;\n    uint8_t  LDIR_Type;\n    uint8_t  LDIR_Chksum;\n    uint16_t LDIR_Name2[6];\n    uint16_t LDIR_FstClusLO;\n    uint16_t LDIR_Name3[2];\n}__attribute__((packed));\n\nbool isFATLongDirectory(const struct FATLongDirectory* pFATldir);\nbool isFATShortDirectory(const struct FATShortDirectory*);\nchar* readCompleteInfoFromFATShortDirectory(struct FATShortDirectory* pFATsd);\nstatic inline struct FATLongDirectory* nextLongDirectory(struct FATLongDirectory* longDirectory){\n    return (struct FATLongDirectory*)((intptr_t)(longDirectory) + sizeof(struct FATLongDirectory));\n\n}\ndouble sobelY(uint8_t* lowerline, uint8_t* nowline, uint8_t* higherline, int pixels);\nstatic inline struct FATShortDirectory* nextShortDirectory(struct FATShortDirectory* shortDirectory){\n    return (struct FATShortDirectory*)((intptr_t)(shortDirectory) + sizeof(struct FATShortDirectory));\n}\nbool isValidFileName(char* name);\nint dirClus[100];\n\nvoid* getClusterFromIndex(int index_from_zero, void* initialClusterAddr) {\n    return initialClusterAddr + index_from_zero * clusSize;\n}\n\nvoid initAttr(struct FATHeader* pfatheader) {\n    BPB_BytsPerSec = pfatheader-&gt;BPB_BytsPerSec;\n    BPB_SecPerClus = pfatheader-&gt;BPB_SecPerClus;\n    BPB_RootClus = pfatheader-&gt;BPB_RootClus;\n    BPB_FATSz32 = pfatheader-&gt;BPB_FATSz32;\n    BPB_HiddSec = pfatheader-&gt;BPB_HiddSec;\n    BPB_RsvdSecCnt = pfatheader-&gt;BPB_RsvdSecCnt;\n    BPB_NumFATs = pfatheader-&gt;BPB_NumFATs;\n    clusSize = BPB_SecPerClus * BPB_BytsPerSec;\n}\n\nvoid dirClusAdd(int index) {\n    assert(index &gt;= 0);\n    for (int i = 0; i &lt; 100; i++) {\n        if (dirClus[i] == -1) {\n            dirClus[i] = index;\n            return;\n        }\n    }\n    assert(0);\n}\n\nint main (int argc, char* argv[]) {\n    srand(time(NULL));\n    char* imgName = argv[1];\n    struct stat statbuf;\n    stat(imgName, &amp;statbuf);    // \u83b7\u53d6img\u6587\u4ef6\u7684\u72b6\u6001\u4fe1\u606f\n    int imgSize = statbuf.st_size;\n    int imgFd = open(imgName, O_RDONLY, 0);\n    struct FATHeader* pFATHeader = (struct FATHeader *) mmap(NULL, imgSize, PROT_READ, MAP_SHARED, imgFd, 0);\n    uint8_t picture[4 * MB];\n    uint8_t lowerline[128 * KB];\n    uint8_t nowline[128 * KB];\n    uint8_t higherline[128 * KB];\n    uint8_t tmpnowline[128 * KB];\n    uint8_t tmphigherline[128 * KB];\n    BPB_BytsPerSec = 512;\n    BPB_SecPerClus = 8;\n    BPB_RootClus   = pFATHeader-&gt;BPB_RootClus;\n    BPB_FATSz32    = pFATHeader-&gt;BPB_FATSz32;\n    BPB_HiddSec    = pFATHeader-&gt;BPB_HiddSec;\n    BPB_RsvdSecCnt = pFATHeader-&gt;BPB_RsvdSecCnt;\n    BPB_NumFATs    = pFATHeader-&gt;BPB_NumFATs;\n    clusSize       = BPB_BytsPerSec * BPB_SecPerClus;\n    // \u8ba1\u7b97\u56fe\u50cf\u6570\u636e\u5728\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf\u3002\u4fdd\u7559\u6247\u533a\u3001FAT \u8868\u3001\u6839\u76ee\u5f55(\u7c07\u53f7\u4ece2\u5f00\u59cb)\u3001\u9690\u85cf\u6247\u533a\u3001\u56fe\u50cf\n    int imgOffset = (BPB_RsvdSecCnt + BPB_NumFATs * BPB_FATSz32 + (BPB_RootClus - 2) * BPB_SecPerClus + BPB_HiddSec) * BPB_BytsPerSec;\n    struct FATShortDirectory* pFATshdir = (void* )pFATHeader + imgOffset;\n    void* imgDataStart = (void* )pFATHeader + imgOffset;\n    int imgDataSize = imgSize - imgOffset;\n    int tmpi = 0;\n    int clusNum = imgDataSize / clusSize;\n    int* cluses = malloc(sizeof(int) * clusNum); // \u5728\u5185\u5b58\u4e2d\u52a8\u6001\u5206\u914d\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u7528\u4e8eimgData\u4e2d\u6bcf\u4e2a\u7c07\u7684\u72b6\u6001\n    for (int i = 0; i &lt; clusNum; i++) \n        cluses[i] = Unknown;\n    // \u904d\u5386imgData\u4e2d\u7684\u7c07\uff0c\u5e76\u68c0\u67e5\u6bcf\u4e2a\u7c07\u4e2d\u7684\u77ed\u76ee\u5f55\u9879\uff08FATShortDirectory\uff09\u548c\u957f\u76ee\u5f55\u9879\uff08FATLongDirectory\uff09\n    // \u8fd9\u4e2a\u5faa\u73af\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8bc6\u522b\u548c\u6807\u8bb0\u90a3\u4e9b\u5305\u542b\u76ee\u5f55\u9879\u7684\u7c07\n    for (void* cluster = imgDataStart; inFile(cluster, imgDataStart, imgDataSize); cluster = nextClus(cluster)) {\n        int countsh = 0; // \u77ed\u76ee\u5f55\u9879\u6570\u91cf\n        int countl = 0;  // \u957f\u76ee\u5f55\u9879\u6570\u91cf\n        for (struct FATShortDirectory* ptmp = cluster; inFile(ptmp, cluster, clusSize); ptmp++) {\n            if (isFATShortDirectory(ptmp)) {\n                char nameTmp[12];\n                memcpy(nameTmp, ptmp-&gt;DIR_Name, 11);\n                nameTmp[11] = '\\0';\n                tmpi++;\n                countsh++;\n                if (isFATLongDirectory((void*)(ptmp - 1)))\n                    countl++;\n                if (isFATLongDirectory((void*)(ptmp - 2)))\n                    countl++;\n            }\n        }\n        if (countsh &gt; 6 &amp;&amp; countl &gt;= countsh) {\n            int index = getClusterIndex(cluster, imgDataStart, clusSize);\n            cluses[index] = DirEntry;\n        }\n    }\n    for (int i = 0; i &lt; clusNum; i++) {\n        if (cluses[i] == DirEntry) {\n            void* cluster = getClusterFromIndex(i, imgDataStart);\n            int j = 0;\n            for (struct FATShortDirectory* ptmp = cluster; inFile(ptmp, cluster, clusSize); ptmp++) {\n                if (isFATShortDirectory(ptmp) &amp;&amp; isFATLongDirectory((void*)(ptmp - 1))) {\n                    char* name = readCompleteInfoFromFATShortDirectory(ptmp);\n                    if (name != NULL) {\n                        char* prefix = \"/tmp/\";\n                        int picNameSize = strlen(prefix) + strlen(name) + 1;\n                        char* abspath = malloc(sizeof(char) * picNameSize);\n                        memset(abspath, '\\0', picNameSize);\n                        strcat(strcat(abspath, prefix), name);\n\n                        struct BMPHeader* picStart = (void*) ((uintptr_t)pFATHeader + imgOffset + (ptmp-&gt;DIR_FstClusLO - BPB_RootClus) * clusSize);\n                        FILE* pfdpic = fopen(abspath, \"w+\");\n                        fwrite(picStart, 1, sizeof(*picStart), pfdpic);\n                        fclose(pfdpic);\n                        pfdpic = fopen(abspath, \"a+\");\n                        struct BMPInfoHeader* picInfo = (struct BMPInfoHeader*)(picStart + 1);\n                        fwrite(picInfo, 1, picStart-&gt;bfOffBits - sizeof(*picStart), pfdpic);\n                        fclose(pfdpic);\n\n                        pfdpic = fopen(abspath, \"a+\");\n                        void* picData = (struct BMPInfoHeader*)(picInfo + 1);\n                        int picDataSize = picStart-&gt;bfSize - picStart-&gt;bfOffBits;\n\n                        int ByteperPixel = picInfo-&gt;biBitCount / 8;\n                        int picHeight = picInfo-&gt;biHeight;\n                        int realWidthSize = (picInfo-&gt;biWidth * picInfo-&gt;biBitCount + 31) / 32 * 4;\n                        void* source = NULL;\n                        source = picData;\n                        int r = rand();\n                        // \u901a\u8fc7Sobel\u8fb9\u7f18\u68c0\u6d4b\u7b97\u6cd5\u6765\u4f18\u5316\u56fe\u50cf\u7684\u8fb9\u7f18\u8d28\u91cf\uff0c\u7279\u522b\u662f\u5728\u6570\u636e\u8de8\u7c07\u5b58\u50a8\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u5bfb\u627e\u6700\u4f18\u7684\u7c07\u7ec4\u5408\u6765\u51cf\u5c11\u8fb9\u7f18\u7684\u4e0d\u8fde\u7eed\u6027\u3002\n                        for (int i = 0; i &lt; picHeight; i++) {\n                            memcpy(nowline, source + i * realWidthSize, realWidthSize);\n                            if (i != 0) { // \u53ea\u5bf9\u975e\u7b2c\u4e00\u884c\u7684\u884c\u8fdb\u884c\u5904\u7406\n                                if (r % 10 &gt; 1) {\n                                    if (getClusterIndex(source + i * realWidthSize, imgDataStart, clusSize) != getClusterIndex(source + (i + 1) * realWidthSize, imgDataStart, clusSize)) {\n                                        int nowIndex = getClusterIndex(source + i * realWidthSize, imgDataStart, clusSize);\n                                        int nowLength = (intptr_t)(getClusterFromIndex(nowIndex + 1, imgDataStart)) - (intptr_t)(source + i * realWidthSize);\n\n                                        int requiredLength = realWidthSize - nowLength;\n                                        int pixels = realWidthSize / ByteperPixel;\n                                        double mean = sobelY(lowerline, nowline, higherline, pixels);\n                                        if (mean &gt; 11500) {\n                                            double tmpLow = mean;\n                                            int tmpLowIndex = -1;\n                                            for (int j = 0; j &lt; clusNum; j++) {\n                                                void* tmpcluster = getClusterFromIndex(j, imgDataStart);\n                                                memcpy(tmpnowline, nowline, nowLength);\n                                                memcpy(tmpnowline + nowLength, tmpcluster, requiredLength);\n                                                double tmpd = sobelY(lowerline, tmpnowline, tmphigherline, pixels);\n                                                if (tmpd &lt; tmpLow) {\n                                                    tmpLow = tmpd;\n                                                    tmpLowIndex = j;\n                                                }\n                                            }\n                                            void* newCluster = getClusterFromIndex(tmpLowIndex, imgDataStart);\n                                            source = newCluster - i * realWidthSize + requiredLength - realWidthSize;\n                                            memcpy(nowline+nowLength, newCluster, requiredLength);\n\n                                        }\n                                    }\n                                }\n                            }\n                            memcpy(picture + i * realWidthSize, nowline, realWidthSize);\n                            memcpy(lowerline, nowline, realWidthSize);\n                        }\n                        // \u7ed3\u675f\n\n                        fwrite(picture, 1, picDataSize, pfdpic);\n                        fclose(pfdpic);\n                        char buf[41];\n                        buf[40] = 0;\n                        char cmd[100];\n                        memset(cmd, 0, 100);\n                        int pipefds[2];\n                        if (pipe(pipefds) &lt; 0) {\n                            assert(0);\n                        }\n                        int pid = fork();\n                        char* argv[3];\n                        argv[0] = \"sha1sum\";\n                        argv[1] = abspath;\n                        argv[2] = NULL;\n                        if (pid == 0) {\n                            close(pipefds[0]);\n                            dup2(pipefds[1], fileno(stderr));\n                            dup2(pipefds[1], fileno(stdout));\n                            execvp(\"sha1sum\", argv);\n                        } else {\n                            close(pipefds[1]);\n                            read(pipefds[0], buf, 40);\n                            printf(\"%s   %s\\n\", buf, name);\n                            fflush(stdout);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nbool isFATShortDirectory(const struct FATShortDirectory* ptmp) {\n    if (strncmp((char*)&amp;ptmp-&gt;DIR_Name[8], \"BMP\", 3) == 0) {\n        return true;\n    }\n    return false;\n}\n\nbool isFATLongDirectory(const struct FATLongDirectory* pFATldir) {\n    // \u68c0\u67e5 pFATldir-&gt;LDIR_Ord \u7684\u9ad8 4 \u4f4d\u662f\u5426\u65e2\u4e0d\u662f 0x4 \u4e5f\u4e0d\u662f 0\n    if ((pFATldir-&gt;LDIR_Ord &gt;&gt; 4) != 0x4 &amp;&amp; (pFATldir-&gt;LDIR_Ord &gt;&gt; 4) != 0) {\n        return false;\n    }\n    if (pFATldir-&gt;LDIR_FstClusLO != 0 || pFATldir-&gt;LDIR_Type != 0)\n        return false;\n    else    \n        return true;\n}\n\nchar* readCompleteInfoFromFATShortDirectory(struct FATShortDirectory* pFATsd) {\n\n    char* name = malloc(sizeof(char) * 200);\n    memset(name, '\\0', 200);\n    struct FATLongDirectory* pFATld = (struct FATLongDirectory*) (pFATsd-1);\n    int i = -1;\n    if ((pFATld-&gt;LDIR_Ord &gt;&gt; 4) != 0x4 &amp;&amp; (pFATld-&gt;LDIR_Ord &gt;&gt; 4) != 0) {\n        return NULL;\n    }\n    while ((pFATld-&gt;LDIR_Ord &gt;&gt; 4) == 0) {\n        i += 1;\n        name[i*13+0] = (char) pFATld-&gt;LDIR_Name1[0];\n        name[i*13+1] = (char) pFATld-&gt;LDIR_Name1[1];\n        name[i*13+2] = (char) pFATld-&gt;LDIR_Name1[2];\n        name[i*13+3] = (char) pFATld-&gt;LDIR_Name1[3];\n        name[i*13+4] = (char) pFATld-&gt;LDIR_Name1[4];\n        name[i*13+5] = (char) pFATld-&gt;LDIR_Name2[0];\n        name[i*13+6] = (char) pFATld-&gt;LDIR_Name2[1];\n        name[i*13+7] = (char) pFATld-&gt;LDIR_Name2[2];\n        name[i*13+8] = (char) pFATld-&gt;LDIR_Name2[3];\n        name[i*13+9] = (char) pFATld-&gt;LDIR_Name2[4];\n        name[i*13+10] = (char) pFATld-&gt;LDIR_Name2[5];\n        name[i*13+11] = (char) pFATld-&gt;LDIR_Name3[0];\n        name[i*13+12] = (char) pFATld-&gt;LDIR_Name3[1];\n        pFATld = pFATld-1;\n    }\n    i += 1;\n    name[i*13+0] = (char) pFATld-&gt;LDIR_Name1[0];\n    name[i*13+1] = (char) pFATld-&gt;LDIR_Name1[1];\n    name[i*13+2] = (char) pFATld-&gt;LDIR_Name1[2];\n    name[i*13+3] = (char) pFATld-&gt;LDIR_Name1[3];\n    name[i*13+4] = (char) pFATld-&gt;LDIR_Name1[4];\n    name[i*13+5] = (char) pFATld-&gt;LDIR_Name2[0];\n    name[i*13+6] = (char) pFATld-&gt;LDIR_Name2[1];\n    name[i*13+7] = (char) pFATld-&gt;LDIR_Name2[2];\n    name[i*13+8] = (char) pFATld-&gt;LDIR_Name2[3];\n    name[i*13+9] = (char) pFATld-&gt;LDIR_Name2[4];\n    name[i*13+10] = (char) pFATld-&gt;LDIR_Name2[5];\n    name[i*13+11] = (char) pFATld-&gt;LDIR_Name3[0];\n    name[i*13+12] = (char) pFATld-&gt;LDIR_Name3[1];\n    for (int j = 12; j &gt; -1; j--) {\n        if (name[i*13+j] == 'p' &amp;&amp; name[i*13+j-1] == 'm' &amp;&amp; name[i*13+j-2] == 'b' &amp;&amp; name[i*13+j-3] == '.' ) {\n            name[i*13+j+1]= 0;\n            break;\n        }\n    }\n    for (int i = 0; i &lt; strlen(name); i++) {\n        if (!isprint(name[i]))\n            return NULL;\n    }\n    return name;\n}\n\nint comp(const void* a, const void* b) {\n    return *(double*)a - *(double*)b;\n}\n\ndouble sobelY(uint8_t* lowerline, uint8_t* nowline, uint8_t* higherline, int pixels) {\n    double r, g, b, sum;\n    sum = r = g = b = 0;\n    for (int i = 0; i &lt; pixels; i++) {\n        r = nowline[i*3+0]-lowerline[i*3+0];\n        g = nowline[i*3+1]-lowerline[i*3+1];\n        b = nowline[i*3+2]-lowerline[i*3+2];\n        sum += pow(r,2)+pow(g,2)+pow(b,2);\n    }\n    double mean;\n    mean = sum/pixels;\n    return mean;\n}\n</code></pre></p> </li> <li> <p>output: Bash<pre><code>linux$ ./fsrecov-64 /tmp/fsrecov.img | grep C0NrniO8Tu5T.bmp\na9d9d319d3ca10870e31d1595f00d5c27dee7f1b  C0NrniO8Tu5T.bmp\nlinux$ cd /mnt/DCIM &amp;&amp; sha1sum *.bmp | grep C0NrniO8Tu5T.bmp\na9d9d319d3ca10870e31d1595f00d5c27dee7f1b  C0NrniO8Tu5T.bmp\n</code></pre></p> </li> </ol>"},{"location":"OS/Lab/#l0","title":"L0: \u4e3a\u8ba1\u7b97\u673a\u786c\u4ef6\u7f16\u7a0b","text":""},{"location":"OS/Lab/#l1-pmm","title":"L1: \u7269\u7406\u5185\u5b58\u7ba1\u7406 (pmm)","text":""},{"location":"OS/Lab/#l2-kmt","title":"L2: \u5185\u6838\u7ebf\u7a0b\u7ba1\u7406 (kmt)","text":""},{"location":"OS/SJTU_OS/","title":"SJTU OS","text":"<p> \u7ea6 30 \u4e2a\u5b57 </p>"},{"location":"OS/SJTU_OS/#_1","title":"\u8d44\u6599","text":"<ul> <li>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u539f\u7406\u4e0e\u5b9e\u73b0</li> <li>\u8bfe\u7a0b\u7f51\u7ad9</li> <li>OS-Course-Lab</li> <li>\u8bfe\u7a0b\u89c6\u9891</li> <li>\u597d\u5927\u5b66\u5728\u7ebf</li> <li>Lab\u89c6\u9891</li> </ul>"},{"location":"OS/%E5%B9%B6%E5%8F%91/","title":"\u5e76\u53d1","text":"<p> \u7ea6 5705 \u4e2a\u5b57  1638 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 39 \u5206\u949f</p>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-5","title":"Lecture 5 \u591a\u5904\u7406\u5668\u7f16\u7a0b","text":"<p>Take-away Messages</p> <p>\u5728\u7b80\u5316\u591a\u7ebf\u7a0b\u7684\u6a21\u578b\u4e2d\uff0c\u5e76\u53d1\u7a0b\u5e8f\u5c31\u662f \u201c\u72b6\u6001\u673a\u7684\u96c6\u5408\u201d\uff0c\u6bcf\u4e00\u6b65\u9009\u4e00\u4e2a\u72b6\u6001\u673a\u6267\u884c\u4e00\u6b65\u3002\u7136\u800c\uff0c\u771f\u5b9e\u7684\u7cfb\u7edf\u5374\u56e0\u4e3a \u201c\u7f16\u8bd1\u5668\u201d \u7684\u65e0\u5904\u4e0d\u5728\uff0c\u4f7f\u5171\u4eab\u5185\u5b58\u5e76\u53d1\u7684\u884c\u4e3a\u5341\u5206\u590d\u6742\u3002</p> <p>\u4e0d\u5e78\u7684\u662f\uff0c\u4eba\u7c7b\u672c\u8d28\u4e0a\u662f\u7269\u7406\u4e16\u754c (\u5b8f\u89c2\u65f6\u95f4) \u4e2d\u7684 \u201csequential creature\u201d\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u7f16\u7a0b\u65f6\uff0c\u6211\u4eec\u7684\u76f4\u89c9\u4e5f\u53ea\u4e60\u60ef\u4e8e\u5355\u7ebf\u7a0b\u7684\u987a\u5e8f/\u9009\u62e9/\u5faa\u73af\u7ed3\u6784\uff0c\u771f\u5b9e\u591a\u5904\u7406\u5668\u4e0a\u7684\u5e76\u53d1\u7f16\u7a0b\u662f\u975e\u5e38\u5177\u6709\u6311\u6218\u6027\u7684 \u201c\u5e95\u5c42\u6280\u672f\u201d\u3002\u5728\u540e\u7eed\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u63d0\u51fa\u82e5\u5e72\u5e76\u53d1\u63a7\u5236\u6280\u672f\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u907f\u514d\u5e76\u53d1\u7684\u53d1\u751f\uff0c\u4f7f\u5e76\u53d1\u7a0b\u5e8f\u9000\u56de\u5230\u987a\u5e8f\u7a0b\u5e8f\uff0c\u4ece\u800c\u4f7f\u6211\u4eec\u80fd\u591f\u7406\u89e3\u548c\u63a7\u5236\u5e76\u53d1\u3002</p> <ol> <li>\u7b80\u5316\u7684\u7ebf\u7a0b API (thread.h)<ul> <li><code>create(fn)</code><ul> <li>\u521b\u5efa\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\u662f <code>fn</code> \u7684\u7ebf\u7a0b\uff0c\u5e76\u7acb\u5373\u5f00\u59cb\u6267\u884c<ul> <li><code>void fn(int tid) { ... }</code></li> <li>\u53c2\u6570 <code>tid</code> \u4ece 1 \u5f00\u59cb\u7f16\u53f7</li> </ul> </li> <li>\u884c\u4e3a\uff1a<code>sys_spawn(fn, tid)</code></li> </ul> </li> <li><code>join()</code><ul> <li>\u7b49\u5f85\u6240\u6709\u8fd0\u884c\u7ebf\u7a0b\u7684\u8fd4\u56de (\u4e5f\u53ef\u4ee5\u4e0d\u8c03\u7528)</li> <li>\u884c\u4e3a\uff1a<code>while (done != T) sys_sched()</code></li> </ul> </li> </ul> </li> <li> <p>hello.c\u4ea4\u66ff\u6253\u5370 a \u548c b</p> C<pre><code>#include \"thread.h\"\n\nvoid T_a() { while (1) { printf(\"a\"); } }\nvoid T_b() { while (1) { printf(\"b\"); } }\n\nint main() {\n    create(T_a);\n    create(T_b);\n}\n</code></pre> <p><code>top -d 0.5</code>: \u67e5\u770b\u8fdb\u7a0b\u7684 CPU \u5360\u7528\u7387\uff0c\u53ef\u4ee5\u770b\u5230 CPU \u4f7f\u7528\u7387\u8fd1\u4e4e 200%\uff0c\u8bf4\u660e\u4e24\u4e2a\u7ebf\u7a0b\u51e0\u4e4e\u540c\u65f6\u8fd0\u884c\u3002\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u628a\u7ebf\u7a0b\u653e\u7f6e\u5728\u4e0d\u540c\u7684\u5904\u7406\u5668\u4e0a\uff0c\u4ee5\u63d0\u9ad8\u6548\u7387\u3002</p> Bash<pre><code>PID   USER      PR   NI  VIRT   RES  SHR S %CPU   %MEM  TIME+   COMMAND\n26408 username  20   0   84796  956  868 S 196.0  0.0   0:43.42 hello\n</code></pre> </li> <li> <p>T_a \u548c T_b \u771f\u7684\u5171\u4eab\u5185\u5b58\u5417\uff1f\u2192 memory.c</p> C<pre><code>#include \"thread.h\"\n\n// We claim that n is shared among threads.\nint n;\n\nvoid T_hello(int id) {\n    // To validate this claim, each thread reads and increments\n    // n, and we expect to see different numbers being printed.\n    int i = n++;\n    printf(\"%d\\n\", i);\n}\n\nint main() {\n    for (int i = 0; i &lt; 10; i++) {\n        create(T_hello);\n    }\n}\n</code></pre> </li> <li> <p>\u5982\u4f55\u8bc1\u660e\u7ebf\u7a0b\u5177\u6709\u72ec\u7acb\u5806\u6808 (\u4ee5\u53ca\u786e\u5b9a\u5806\u6808\u7684\u8303\u56f4)\uff1f\u2192 stack.c</p> C<pre><code>#include \"thread.h\"\n\n#define N 4\n\nchar * volatile low[N];\nchar * volatile high[N];\n\nvoid update_range(int T, char *ptr) {\n    // We have a witness of thread T accessing stack pointer\n    // ptr. So we keep this record.\n    if (ptr &lt; low[T]) {\n        low[T] = ptr;\n    }\n    if (ptr &gt; high[T]) {\n        high[T] = ptr;\n    }\n}\n\nvoid probe(int T, int n) {\n    // Local variables are stack-allocated.\n    char scratch[64];\n    update_range(T, scratch);\n\n    printf(\"Stack(T%d) &gt;= %ld KB\\n\",\n        T, (high[T] - low[T]) / 1024);\n\n    probe(T, n + 1); // Infinite recursion.\n}\n\nvoid T_probe(int T) {\n    T -= 1; // \u521b\u5efa\u7684\u7ebf\u7a0bpid\u4ece1\u5f00\u59cb\uff0c\u6240\u4ee5T-1\u4ee5\u62ff\u5230\u6b63\u786e\u7684low[T]\n    low[T] = (char *)-1;  // 0xffffffffffffffff\n    high[T] = (char *)0;  // 0x0000000000000000\n    probe(T, 0);\n}\n\nint main() {\n    // Disable printf buffering. Try to make more lines being\n    // printed, because the program will eventually crash (and\n    // all buffered contents are lost).\n    setbuf(stdout, NULL);\n\n    for (int i = 0; i &lt; N; i++) {\n        create(T_probe);\n    }\n}\n</code></pre> <p>\u7a0b\u5e8f\u8f93\u51fa\uff1a Bash<pre><code>----- Shared Memory Test -----\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n----- Stack Probe Test -----\nSegmentation fault (core dumped)\nStack(T2) &gt;= 8177 KB\n</code></pre> 8177KB\u6700\u63a5\u8fd18192KB\uff0c\u4e5f\u5c31\u662f\u8bf4\u7ebf\u7a0b\u5e93\u9ed8\u8ba4\u63d0\u4f9b\u7684stack\u5927\u5c0f\u662f8MB\uff0c\u8fd9\u4e2a\u5927\u5c0f\u8db3\u4ee5\u591f\u4e00\u822c\u7684\u7a0b\u5e8f\u4f7f\u7528\u4e86\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u5e76\u53d1\u7f16\u7a0b\uff0c\u8981\u820d\u5f03\u4e00\u4e9b\u6211\u4eec\u4e4b\u524d\u5bf9\u5355\u7ebf\u7a0b\u987a\u5e8f\u7a0b\u5e8f\u7684\u7406\u89e3:</p> <ul> <li>\u72b6\u6001\u8fc1\u79fb\u539f\u5b50\u6027\u7684\u5047\u8bbe: \u5171\u4eab\u5185\u5b58\u63a8\u7ffb\u4e86 \u201c\u539f\u5b50\u6027\u201d \u5047\u8bbe<ul> <li>\u4efb\u4f55\u65f6\u5019\uff0cload \u8bfb\u5230\u7684\u503c\u90fd\u53ef\u80fd\u662f\u522b\u7684\u7ebf\u7a0b\u5199\u5165\u7684</li> <li>\u6211\u4eec\u4e60\u4ee5\u4e3a\u5e38\u7684\u7b80\u5316\u4f1a\u6f0f\u6389\u5e76\u53d1\u7a0b\u5e8f\u53ef\u80fd\u7684\u884c\u4e3a</li> </ul> </li> <li>\u7a0b\u5e8f\u987a\u5e8f\u6267\u884c\u7684\u5047\u8bbe: \u7f16\u8bd1\u5668\u4f1a\u8bd5\u56fe\u4f18\u5316\u72b6\u6001\u8fc1\u79fb\uff0c\u6539\u53d8\u6267\u884c\u6d41</li> <li>\u5b58\u5728\u5168\u5c40\u6307\u4ee4\u6267\u884c\u987a\u5e8f\u7684\u5047\u8bbe: \u4e0d\u540c\u5904\u7406\u5668\u53ef\u80fd\u770b\u5230\u4e0d\u540c\u7684\u5171\u4eab\u5185\u5b58, \u201c\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u201d \u53ea\u662f\u4e2a\u7b80\u5316\u7684\u5e7b\u89c9\u3002\u7531\u4e8e\u52a8\u6001\u6307\u4ee4\u8c03\u5ea6\u548c\u7f13\u5b58\u7684\u5171\u540c\u4f5c\u7528\uff0c\u5b9e\u9645\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u66f4\u53ef\u80fd\u8d85\u51fa\u6211\u4eec\u7684\u9884\u671f\u3002</li> </ul> </li> <li> <p>\u72b6\u6001\u8fc1\u79fb\u539f\u5b50\u6027\u7684\u5047\u8bbe: alipay.c     C<pre><code>#include \"thread.h\"\n\nunsigned long balance = 100;\n\nvoid Alipay_withdraw(int amt) {\n    if (balance &gt;= amt) {\n        // Bugs may only manifest on specific timings. Sometimes\n        // we reproduce bugs by inserting sleep()s.\n        usleep(1); // \u5f15\u53d1sys_sched()\n\n        balance -= amt;\n    }\n}\n\nvoid T_alipay() {\n    Alipay_withdraw(100);\n}\n\nint main() {\n    create(T_alipay);\n    create(T_alipay);\n    join();\n    printf(\"balance = %lu\\n\", balance);\n}\n</code></pre></p> <p>\u5728usleep(1)\u7684\u60c5\u51b5\u4e0b\u8f93\u51fa\u662f<code>balance = 18446744073709551516</code>\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6ee1\u8db3<code>balance &gt;= amt</code>\uff0c\u76f8\u5f53\u4e8e\u51cf\u4e86\u4e24\u6b21100\u3002</p> </li> <li> <p>\u4ee5\u4e0b\u4ee3\u7801 sum \u7684\u6700\u5c0f\u503c\u662f2\u7684\u60c5\u51b5\uff1a\u8be5\u7ebf\u7a0b\u6267\u884c\u5230\u6700\u540e\u4e00\u4e2afor\u5faa\u73af\u65f6\uff0cload\u5230\u7684sum\u4e3a1\uff08\u6ce8\u610f\u4e0d\u53ef\u80fdload\u5230sum\u4e3a0\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u672c\u7ebf\u7a0b\u800c\u8a00\u5df2\u7ecf\u6267\u884c\u8fc7\u4e24\u4e2afor\u5faa\u73af\u4e86\uff0c\u5982\u679c\u662fload\u672c\u7ebf\u7a0b\u7684sum\u5e94\u5f53\u662f2\uff0c\u4e00\u5b9a\u662fload\u522b\u7684\u7ebf\u7a0b\u6539\u5199\u540e\u7684sum\u3002\u522b\u7684\u7ebf\u7a0b\u4e00\u5b9a\u8981\u81f3\u5c11\u6267\u884c\u8fc7\u4e00\u6b21load-store\u628asum\u5199\u8fdb\u53bb\uff0c\u6240\u4ee5\u6b64\u65f6\u522b\u7684\u7ebf\u7a0b\u91ccsum\u6700\u5c0f\u4e3a1\uff09\uff0c\u7136\u540e\u63a5\u7740\u5176\u4ed6\u7ebf\u7a0b\u90fd\u6267\u884c\u5b8c\u6240\u6709\u5faa\u73af\u7ed3\u675f\u4e86\u3002\u8be5\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\u5b8c\u5269\u4e0b\u7684<code>t += 1; store(sum, t);</code>\u5bfc\u81f4\u6700\u540esum\u4e3a2\u3002     C<pre><code>// \u521d\u59cb\u65f6 sum = 0; \u5047\u8bbe\u5355\u884c\u8bed\u53e5\u7684\u6267\u884c\u662f\u539f\u5b50\u7684\n// \u5e76\u53d1\u6267\u884c\u4e09\u4e2a T_sum\uff0csum \u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f\u2192 \u662f2\nvoid T_sum() {\n    for (int i = 0; i &lt; 3; i++) {\n        int t = load(sum);\n        t += 1;\n        store(sum, t);\n    }\n}\n</code></pre></p> </li> <li> <p>sum.c\uff1a     C<pre><code>#include \"thread.h\"\n\n#define N 100000000\n\nlong sum = 0;\n\nvoid T_sum() {\n    for (int i = 0; i &lt; N; i++) {\n        sum++;\n\n        // Won't work even if we force a single-instruction\n        // increment.\n\n        // asm volatile(\n        //     \"incq %0\" : \"+m\"(sum)\n        // );\n    }\n}\n\nint main() {\n    create(T_sum);\n    create(T_sum);\n\n    join();\n\n    printf(\"sum = %ld\\n\", sum);\n    printf(\"2*n = %ld\\n\", 2L * N);\n}\n</code></pre></p> <p>\u4e0d\u540c\u7684\u7f16\u8bd1\u4f18\u5316\u8f93\u51fa\u4e0d\u4e00\u6837\uff1a</p> <ul> <li> <p>-O0\u8f93\u51fa<code>sum = 119137703 2*n = 200000000</code></p> Bash<pre><code>00000000000013d9 &lt;T_sum&gt;:\n    13d9:       f3 0f 1e fa             endbr64 \n    13dd:       55                      push   %rbp\n    13de:       48 89 e5                mov    %rsp,%rbp\n    13e1:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n    13e8:       eb 16                   jmp    1400 &lt;T_sum+0x27&gt;\n    13ea:       48 8b 05 4f 2c 00 00    mov    0x2c4f(%rip),%rax        # 4040 &lt;sum&gt;\n    13f1:       48 83 c0 01             add    $0x1,%rax\n    13f5:       48 89 05 44 2c 00 00    mov    %rax,0x2c44(%rip)        # 4040 &lt;sum&gt;\n    13fc:       83 45 fc 01             addl   $0x1,-0x4(%rbp)\n    1400:       81 7d fc ff e0 f5 05    cmpl   $0x5f5e0ff,-0x4(%rbp)\n    1407:       7e e1                   jle    13ea &lt;T_sum+0x11&gt;\n    1409:       90                      nop\n    140a:       90                      nop\n    140b:       5d                      pop    %rbp\n    140c:       c3                      ret\n</code></pre> </li> <li> <p>-O1\u8f93\u51fa<code>sum = 100000000 2*n = 200000000</code></p> Bash<pre><code>00000000000011e3 &lt;T_sum&gt;:\n    11e3:       f3 0f 1e fa             endbr64 \n    11e7:       48 8b 15 52 2e 00 00    mov    0x2e52(%rip),%rdx        # 4040 &lt;sum&gt;\n    11ee:       48 8d 42 01             lea    0x1(%rdx),%rax\n    11f2:       48 81 c2 01 e1 f5 05    add    $0x5f5e101,%rdx\n    11f9:       48 89 c1                mov    %rax,%rcx\n    11fc:       48 83 c0 01             add    $0x1,%rax\n    1200:       48 39 d0                cmp    %rdx,%rax\n    1203:       75 f4                   jne    11f9 &lt;T_sum+0x16&gt;\n    1205:       48 89 0d 34 2e 00 00    mov    %rcx,0x2e34(%rip)        # 4040 &lt;sum&gt;\n    120c:       c3                      ret\n</code></pre> </li> <li> <p>-O2\u8f93\u51fa<code>sum = 200000000 2*n = 200000000</code>\uff0c\u5373\u4fbf\u5982\u6b64\uff0c\u76f4\u63a5\u53d8\u6210\u4e00\u6761addq\u6307\u4ee4\uff0csum\u7684\u8f93\u51fa\u4ecd\u65e7\u4e0d\u4e00\u5b9a\u6b63\u786e\uff01\u5982\u540calipay\u7684\u4f8b\u5b50\u4e00\u6837\u5982\u679c\u52a0\u5165usleep(1)\u8fd8\u662f\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21\u7ed3\u679c\u90fd\u4e0d\u4e00\u6837\u3002</p> Bash<pre><code>0000000000001260 &lt;T_sum&gt;:\n    1260:       f3 0f 1e fa             endbr64 \n    1264:       48 81 05 d1 2d 00 00    addq   $0x5f5e100,0x2dd1(%rip)        # 4040 &lt;sum&gt;\n    126b:       00 e1 f5 05 \n    126f:       c3                      ret\n</code></pre> </li> </ul> </li> <li> <p>memory model:</p> <ul> <li>\u4f60\u4ee5\u4e3a\u7684\u5171\u4eab\u5185\u5b58: </li> <li>\u5b9e\u9645\u7684\u5171\u4eab\u5185\u5b58: \u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u5185\u5b58\u526f\u672c\uff0c\u4ed6\u4eec\u4e4b\u95f4\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u540c\u6b65 </li> <li>x86\uff1a\u5e02\u9762 \u201c\u6700\u5f3a\u201d \u5185\u5b58\u6a21\u578b (\u7c7b\u6bd4 ARM/RISC-V) </li> </ul> <p>mem_model.c: C<pre><code>#include &lt;thread.h&gt;\n#include &lt;stdatomic.h&gt;\n\nint x = 0, y = 0;\natomic_int flag;\n\n#define F1  1\n#define F2  2\n\n#define FLAG \\\n    atomic_load(&amp;flag)\n#define FLAG_XOR(val) \\\n    atomic_fetch_xor(&amp;flag, val)\n#define WAIT_FOR(cond) \\\n    while (!(cond))    \\\n        ;\n\n__attribute__((noinline))\nvoid write_x_read_y() {\n    int y_val;\n\n    asm volatile(\n        \"movl $1, %0;\" // x = 1\n        \"movl %2, %1;\" // y_val = y\n        : \"=m\"(x), \"=r\"(y_val)\n        : \"m\"(y)\n    );\n\n    printf(\"%d \", y_val);\n}\n\n__attribute__((noinline))\nvoid write_y_read_x() {\n    int x_val;\n\n    asm volatile(\n        \"movl $1, %0;\" // y = 1\n        \"movl %2, %1;\" // x_val = x\n        : \"=m\"(y), \"=r\"(x_val)\n        : \"m\"(x)\n    );\n\n    printf(\"%d \", x_val);\n}\n\nvoid T_1(int id) {\n    while (1) {\n        // Wait until F1 is raised.\n        WAIT_FOR((FLAG &amp; F1));\n\n        write_x_read_y();\n\n        // Put F1 down.\n        FLAG_XOR(F1);\n    }\n}\n\nvoid T_2() {\n    while (1) {\n        // Wait until F2 is raised.\n        WAIT_FOR((FLAG &amp; F2));\n\n        write_y_read_x();\n\n        // Put F2 down.\n        FLAG_XOR(F2);\n    }\n}\n\nvoid T_flag() {\n    while (1) {\n        x = 0;\n        y = 0;\n        __sync_synchronize(); // full barrier\n        usleep(1);            // + delay\n\n        // Now, x = 0, y = 0, and flag = 0.\n        // T_1 and T_2 should be waiting for their flags.\n        assert(FLAG == 0);\n\n        // flag = F1 | F2; Both flags are raised.\n        FLAG_XOR(F1 | F2);\n\n        // T1 and T2 are ready to go...\n        // They will eventually put F1 and F2 down.\n        WAIT_FOR(FLAG == 0);\n\n        printf(\"\\n\");\n        fflush(stdout);\n    }\n}\n\nint main() {\n    // All infinite loops\n    create(T_1);\n    create(T_2);\n    create(T_flag);\n}\n</code></pre></p> <p><code>./mem-model  | head -n 10000 | sort | uniq -c</code>\u8f93\u51fa\uff1a Bash<pre><code>7978 0 0 \n1783 0 1 \n 237 1 0 \n   2 1 1\n</code></pre></p> T_1 T_2 \u2460 x = 1  \u2461 load y \u2462 y = 1  \u2463 load x <p>\u51fa\u73b00 0\u7684\u539f\u56e0\u662f\u771f\u6b63\u7684memory model\u548c\u6211\u4eec\u60f3\u8c61\u7684\u5e76\u4e0d\u4e00\u6837\u3002\u5904\u7406\u5668\u4e5f\u662f\u7f16\u8bd1\u5668:</p> <ul> <li>\u9884\u53d6\u72b6\u6001\u673a\u6267\u884c\u7684\u82e5\u5e72\u6b65\uff0c\u7136\u540e\u50cf\u7f16\u8bd1\u5668\u4e00\u6837\u4f18\u5316</li> <li>Load(x); Store(y)</li> <li>x \u2260 y \u2192 \u4e24\u6761\u6307\u4ee4\u6267\u884c\u7684\u5148\u540e\u987a\u5e8f\u5c31\u65e0\u6240\u8c13</li> <li>Load cache miss \u2192 store \u53ef\u4ee5\u76f4\u63a5\u6267\u884c</li> </ul> </li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-6-1","title":"Lecture 6 \u5e76\u53d1\u63a7\u5236\uff1a\u4e92\u65a5 (1)","text":"<p>Take-away Messages</p> <p>\u5e76\u53d1\u7f16\u7a0b \u201c\u5f88\u96be\u201d\uff1a\u60f3\u8981\u5b8c\u5168\u7406\u89e3\u5e76\u53d1\u7a0b\u5e8f\u7684\u884c\u4e3a\uff0c\u662f\u975e\u5e38\u56f0\u96be\u7684\u2014\u2014\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a \u201c\u4e07\u80fd\u201d \u7684\u8c03\u5ea6\u5668\u53bb\u5e2e\u52a9\u6211\u4eec\u6c42\u89e3 NP-\u5b8c\u5168\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u4eba\u7c7b\u5e94\u5bf9\u8fd9\u79cd\u590d\u6742\u6027\u7684\u65b9\u6cd5\u5c31\u662f\u9000\u56de\u5230\u4e0d\u5e76\u53d1\u3002\u901a\u8fc7\u4e92\u65a5\u5b9e\u73b0 stop/resume the world\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5e76\u53d1\u7a0b\u5e8f\u7684\u6267\u884c\u53d8\u5f97\u66f4\u5bb9\u6613\u7406\u89e3\u2014\u2014\u800c\u53ea\u8981\u7a0b\u5e8f\u4e2d \u201c\u80fd\u5e76\u884c\u201d \u7684\u90e8\u5206\u8db3\u591f\u591a\uff0c\u4e32\u884c\u5316\u4e00\u5c0f\u90e8\u5206\u4e5f\u5e76\u4e0d\u4f1a\u5bf9\u6027\u80fd\u5e26\u6765\u81f4\u547d\u7684\u5f71\u54cd\u3002</p> <ol> <li>\u5b9e\u73b0\u4e92\u65a5\uff1aStop the World\u3002\u80fd\u5426\u4f7f\u5f53\u524d\u7a0b\u5e8f\u72b6\u6001\u673a\u72ec\u5360\u8ba1\u7b97\u673a\u7cfb\u7edf\uff1f<ul> <li>\u5355\u5904\u7406\u5668\u7cfb\u7edf\u4e2d \u201c\u5176\u4ed6\u4efb\u4f55\u4e8b\u201d\uff1a\u4ec5\u6709\u4e2d\u65ad\uff0c\u56e0\u6b64\u5173\u4e2d\u65ad\u5373\u53ef\u3002\u4f8b\u5982x86\u4e2d<code>cli</code> \u6e05\u9664 <code>eflags</code> \u4e2d\u7684 <code>IF</code> bit\u5373\u53ef\u5173\u4e2d\u65ad\u3002\u6ce8\u610f\uff1a\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u53ef\u4ee5\u5173\u4e2d\u65ad\uff0c\u7528\u6237\u7a0b\u5e8f\u5173\u4e2d\u65ad\u4f1aSegmentation fault\u3002</li> <li>\u4f46\u662f\u6ce8\u610f\u5904\u7406\u5668\u6709\u4e0d\u53ef\u5c4f\u853d\u4e2d\u65ad NMI (Non-Maskable Interrupts)\uff0c\u53ef\u4ee5\u5229\u7528 NMI \u5b9e\u73b0\u9519\u8bef\u76d1\u63a7<ul> <li>\u8bbe\u7f6e\u786c\u4ef6\u5b9a\u65f6\u89e6\u53d1</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u65f6\u590d\u4f4d\u5b9a\u65f6\u5668</li> <li>\u89e6\u53d1 timeout\uff0c\u6267\u884c NMI \u5904\u7406\u7a0b\u5e8f\uff0c\u4f8b\u5982\u91cd\u542f\u8ba1\u7b97\u673a</li> </ul> </li> <li>\u800c\u4e14\u5355\u5904\u7406\u5668\u7cfb\u7edf\u5173\u4e2d\u65ad\u53ef\u4ee5\uff0c\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0d\u884c<ul> <li>\u6bcf\u4e2a\u5904\u7406\u5668\u6709\u72ec\u7acb\u7684\u5bc4\u5b58\u5668\u7ec4</li> <li>\u4e2d\u65ad\u662f\u6bcf\u4e2a\u5904\u7406\u5668\u5185\u90e8\u72b6\u6001</li> </ul> </li> </ul> </li> <li>Peterson \u7b97\u6cd5\uff1a\u5395\u6240\u662f\u4e34\u754c\u8d44\u6e90\uff0c\u9700\u8981\u4e92\u65a5\u4f7f\u7528\u3002\uff08\u6ce8\u610fPeterson \u7b97\u6cd5\u4ec5\u4ec5\u80fd\u89e3\u51b3\u4e24\u4e2a\u7ebf\u7a0b\u4e92\u65a5\u7684\u60c5\u51b5\uff09<ul> <li>\u82e5\u5e0c\u671b\u8fdb\u5165\u5395\u6240\uff0c\u6309\u987a\u5e8f\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a<ol> <li>\u4e3e\u8d77\u81ea\u5df1\u7684\u65d7\u5b50 (store)</li> <li>\u628a\u5199\u6709\u5bf9\u65b9\u540d\u5b57\u7684\u5b57\u6761\u8d34\u5728\u5395\u6240\u95e8\u4e0a (store; \u8986\u76d6)\uff08\u770b\u8d77\u6765\u662f\u8c26\u8ba9\uff0c\u5b9e\u9645\u4e0a\u662f\u5229\u5df1\uff09</li> </ol> </li> <li>\u7136\u540e\u8fdb\u5165\u6301\u7eed\u7684\u89c2\u5bdf\u6a21\u5f0f\uff1a<ol> <li>\u89c2\u5bdf\u5bf9\u65b9\u662f\u5426\u4e3e\u65d7 (load)</li> <li>\u89c2\u5bdf\u5395\u6240\u95e8\u4e0a\u7684\u540d\u5b57 (load)<ul> <li>\u5bf9\u65b9\u4e0d\u4e3e\u65d7\u6216\u5395\u6240\u95e8\u4e0a\u7684\u540d\u5b57\u662f\u81ea\u5df1\uff0c\u8fdb\u5165\u5395\u6240\uff0c\u5426\u5219\u7ee7\u7eed\u89c2\u5bdf</li> </ul> </li> </ol> </li> <li>\u51fa\u5395\u6240\u540e\uff0c\u653e\u4e0b\u81ea\u5df1\u7684\u65d7\u5b50<ul> <li>\u4e0d\u7528\u7ba1\u95e8\u4e0a\u7684\u5b57\u6761</li> </ul> </li> </ul> </li> <li> <p>Peterson \u7b97\u6cd5\u8fdb\u5165\u4e34\u754c\u533a\u7684\u60c5\u51b5</p> <ul> <li>\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u4eba\u4e3e\u65d7\uff0c\u4ed6\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165</li> <li>\u5982\u679c\u4e24\u4e2a\u4eba\u540c\u65f6\u4e3e\u65d7\uff0c\u7531\u5395\u6240\u95e8\u4e0a\u7684\u6807\u7b7e\u51b3\u5b9a\u8c01\u8fdb<ul> <li>\u624b\u5feb\u6709(\u88ab\u53e6\u4e00\u4e2a\u4eba\u7684\u6807\u7b7e\u8986\u76d6)\u3001\u624b\u6162\u65e0</li> </ul> </li> </ul> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a\uff08\u4ec5\u4e3a\u6a21\u578b\u7b97\u6cd5\uff0c\u5e76\u975e\u6b63\u786e\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a\u6a21\u578b\u7684\u5047\u8bbe\uff1aAtomic load &amp; store\uff0c\u4f46\u8fd9\u4e2a\u5047\u8bbe\u5728\u73b0\u4ee3\u591a\u5904\u7406\u5668\u4e0a\u5e76\u4e0d\u6210\u7acb\uff0c\u9664\u975e\u4f7f\u7528\u5185\u5b58\u5c4f\u969c Memory Barrier <code>__sync_synchronize()</code>(= Compiler Barrier + x86: <code>mfence</code>)\uff09 C<pre><code>a = 1;    // \u4e3e\u8d77\u81ea\u5df1\u7684\u65d7\u5b50\nturn = B; // \u8d34\u4e0a\u5bf9\u65b9\u7684\u540d\u5b57\ndo {      // \u8fdb\u5165\u6301\u7eed\u89c2\u5bdf\u6a21\u5f0f\n} while (b &amp;&amp; turn == B); // \u5bf9\u65b9\u4e3e\u65d7\u4e14\u95e8\u4e0a\u662f\u5bf9\u65b9\u7684\u7684\u540d\u5b57\n\n// \u4e34\u754c\u533a\n\na = 0;    // \u653e\u4e0b\u81ea\u5df1\u7684\u65d7\u5b50\n\n/* b \u540c\u7406 =================== */\nb = 1;\nturn = A;\ndo {\n} while (a &amp;&amp; turn == A);\n\n// \u4e34\u754c\u533a\n\nb = 0;\n</code></pre></p> </li> <li> <p>Peterson \u7b97\u6cd5\u63a2\u7a76\uff0c\u5982\u679c\u6709\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4f1a\u6709cs\u540c\u65f6\u4e3a1/2\u7684\u60c5\u51b5\u3002\u901a\u8fc7mosaic model checker <code>mosaic -c peterson.py | grep \\\"cs\\\" | sort | uniq</code>\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u5230\u6ca1\u6709\u540c\u65f6\u4e3a1/2\u7684\u60c5\u51b5\u3002</p> Bash<pre><code>\"cs\": \"\"\n\"cs\": \"\u2776\"\n\"cs\": \"\u2777\"\n</code></pre> Python<pre><code>def T1():\n    while True:\n        heap.x = '\ud83c\udff4'    # T1\u7684\u65d7\u5b50\n        sys_sched()\n        heap.turn = '\u2777'   # \u5395\u6240\u95e8\u4e0a\u7684\u6807\u7b7e\n        sys_sched()\n        while True:\n            t = heap.turn\n            sys_sched()\n            y = heap.y != ''\n            sys_sched()\n            if not y or t == '\u2776':\n                break\n        sys_sched()\n        heap.cs += '\u2776'   # \u8fdb\u5395\u6240\u540e\u5199cs\u4e3a1\n        sys_sched()\n        heap.cs = heap.cs.replace('\u2776', '') # \u51fa\u5395\u6240\u540e\u5220\u9664cs\n        sys_sched()\n        heap.x = ''\n        sys_sched()\n\ndef T2():\n    while True:\n        heap.y = '\ud83c\udfc1'\n        sys_sched()\n        heap.turn = '\u2776'\n        sys_sched()\n        while True:\n            t = heap.turn\n            sys_sched()\n            x = heap.x\n            sys_sched()\n            if not x or t == '\u2777':\n                break\n            sys_sched()\n        sys_sched()\n        heap.cs += '\u2777'\n        sys_sched()\n        heap.cs = heap.cs.replace('\u2777', '')\n        sys_sched()\n        heap.y = ''\n        sys_sched()\n\ndef main():\n    heap.x = ''\n    heap.y = ''\n    heap.turn = ''\n    heap.cs = ''\n    sys_spawn(T1)\n    sys_spawn(T2)\n</code></pre> </li> <li> <p>\u771f\u6b63\u6b63\u786e\u7684perterson\u7b97\u6cd5\u5b9e\u73b0\uff1a</p> C<pre><code>#include &lt;thread.h&gt;\n#include &lt;stdatomic.h&gt;\n\n#define A 1\n#define B 2\n\n// The caveat is: no matter how many times we run this test\n// without seeing it fail, we cannot be certain that we have\n// inserted sufficient barriers. Understanding the correctness\n// of this code is far beyond the scope of this course.\n// \n#define BARRIER __sync_synchronize()\n//\n// Peterson's algorithm is wrong without proper barriers:\n//\n// #define BARRIER\n\natomic_int inside;\nlong count;\n\nvoid critical_section() {\n    // We expect this thread executing code exclusively,\n    // if the critical section is correctly implemented.\n\n    assert(\n        // assert(inside == 0);\n        // inside++\n        atomic_fetch_add(&amp;inside, +1) == 0\n    );\n\n    // On some machines, printing a character will hide\n    // the bug!\n    // putchar('.');\n\n    assert(\n        // assert(inside == 1);\n        // inside--\n        atomic_fetch_add(&amp;inside, -1) == 1\n    );\n}\n\nint volatile a = 0, b = 0, turn;\n\nvoid T_A() {\n    while (1) {\n        a = 1;                    BARRIER;\n        turn = B;                 BARRIER; // &lt;- this is critcal for x86\n        while (1) {\n            if (!b) break;        BARRIER;\n            if (turn != B) break; BARRIER;\n        }\n\n        // T_B can't execute critical_section now.\n        critical_section();\n\n        a = 0;                    BARRIER;\n    }\n}\n\nvoid T_B() {\n    while (1) {\n        b = 1;                    BARRIER;\n        turn = A;                 BARRIER;\n        while (1) {\n            if (!a) break;        BARRIER;\n            if (turn != A) break; BARRIER;\n        }\n\n        // T_A can't execute critical_section now.\n        critical_section();\n\n        b = 0;                    BARRIER;\n    }\n}\n\nint main() {\n    create(T_A);\n    create(T_B);\n}\n</code></pre> </li> <li> <p>\u5728\u591a\u5904\u7406\u5668\u4e0a\u5b9e\u73b0\u4e92\u65a5: \u8f6f\u4ef6\u4e0d\u591f\uff0c\u786c\u4ef6\u6765\u51d1, \u786c\u4ef6\u63d0\u4f9b\u539f\u5b50\u6307\u4ee4 - \u524d\u7f00<code>lock</code></p> <ul> <li>\u539f\u5b50\u6307\u4ee4\uff1a\u4e00\u5c0f\u6bb5\u65f6\u95f4\u7684 \u201cStop the World\u201d \u6267\u884c</li> <li>\u4e0d\u53ef\u6253\u65ad\u7684 load + \u8ba1\u7b97 + store<ul> <li>x86: Bus Lock; RISC-V: LR/SC (\u6765\u81ea MIPS) + atomic</li> </ul> </li> <li>\u5728\u591a\u5904\u7406\u5668\u4e0a\u5b9e\u73b0\u6b63\u786e\u7684 1 + 1\uff1a<code>asm volatile(\"lock addq $1, %0\" : \"+m\"(sum));</code> or <code>asm volatile(\"lock incq %0\" : \"+m\"(sum));</code></li> </ul> </li> <li> <p>\u901a\u8fc7\u786c\u4ef6\u539f\u5b50\u6307\u4ee4<code>atomic_xchg</code> or <code>lock cmpxchgl</code>\u5b9e\u73b0\u81ea\u65cb\u9501\uff1a</p> C<pre><code>int status = \u2705; // \u6b64\u65f6\u5395\u6240\u95e8\u662f\u2705\uff0c\u6211\u4eec\u60f3\u7528\u274c\u53bb\u6362\u5b83\uff0cgot\u5f97\u5230\u2705\u662f\u60f3\u8981\u7684\u72b6\u6001\uff0c\u5426\u5219\u5c31\u91cd\u65b0\u5c1d\u8bd5\n\nvoid lock() {\nretry:\n    int got = atomic_xchg(&amp;status, \u274c);\n    if (got != \u2705) {\n        goto retry;\n    }\n}\n\nvoid unlock() {\n    atomic_xchg(&amp;status, \u2705);\n}\n</code></pre> <p>sum-locked.c\u5f97\u5230\u6b63\u786e\u7684\u6c42\u548csum: C<pre><code>#include &lt;thread.h&gt;\n\n// We create 3 threads in this example.\n#define T        3\n#define N  1000000\n\n#define LOCKED   1\n#define UNLOCKED 0\n\nint status = UNLOCKED;\n\nvoid lock() {\n    int expected;\n    do {\n        // Try compare status with expected.\n        // If the comparison succeeded, perform\n        // an exchange.\n        expected = UNLOCKED;\n        asm volatile (\n            \"lock cmpxchgl %2, %1\"\n            : \"+a\" (expected) // Value for comparison.\n                            // x86 uses eax/rax.\n            : \"m\" (status),   // Memory location.\n            \"r\" (LOCKED)    // Value to be written if\n                            // status == expected\n            : \"memory\", \"cc\"\n        );\n    } while (expected != UNLOCKED);\n}\n\nvoid unlock() {\n    // To be safer:\n    //\n    // asm volatile (\n    //     \"movl %1, %0\"\n    //     : \"=m\" (status)\n    //     : \"r\" (UNLOCKED)\n    //     : \"memory\"\n    // );\n\n    // But actually we can do this:\n    asm volatile(\"\" ::: \"memory\");\n    status = UNLOCKED;\n}\n\n\nlong volatile sum = 0;\n\nvoid T_sum(int tid) {\n    for (int i = 0; i &lt; N; i++) {\n        lock();\n\n        // This critical section is even longer; but\n        // it should be safe--the world is stopped.\n        // We also marked sum as volatile to make\n        // sure it is loaded and stored in each\n        // loop iteration.\n        for (int _ = 0; _ &lt; 10; _++) {\n            sum++;\n        }\n\n        unlock();\n    }\n\n    printf(\"Thread %d: sum = %ld\\n\", tid, sum);\n}\n\nint main() {\n    for (int i = 0; i &lt; T; i++) {\n        create(T_sum);\n    }\n\n    join();\n\n    printf(\"sum  = %ld\\n\", sum);\n    printf(\"%d*n = %ld\\n\", T * 10, T * 10L * N);\n}\n</code></pre></p> <p>\u7136\u800c\uff0c\u5728\u7528\u6237\u6001\u5b9e\u73b0\u81ea\u65cb\u9501\u6709\u4e2a\u95ee\u9898\uff1a\u4e00\u4e2a\u6838\u5360\u7528\u4e86\u8fd9\u4e2alock\u540e\uff0c\u5047\u8bbe\u4e2d\u65ad\u6765\u4e86\u5207\u6362\u5230\u4e86\u5176\u4ed6\u6838\u5fc3\u4e0a\u7684\u7ebf\u7a0b\uff0c\u4e5f\u60f3\u62e5\u6709\u8fd9\u628alock\uff0c\u7531\u4e8e\u4e4b\u524d\u7684lock\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u5176\u4ed6\u6838\u5fc3\u4e0a\u7684\u7ebf\u7a0b\u5c31\u4f1a\u4e00\u76f4\u81ea\u65cb\u7b49\u5f85\uff0c\u6d6a\u8d39\u8d44\u6e90\u3002\u53e6\u4e00\u79cd\u60c5\u51b5\u662f\uff0c\u5047\u8bbe\u4e2d\u65ad\u5230\u6765\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u4e5f\u60f3\u8bbf\u95ee\u8fd9\u4e2alock\u4fdd\u62a4\u7684\u5185\u5bb9\uff0c\u7136\u800c\u56e0\u4e3alock\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u7b49\u5f85\uff0c\u9677\u5165\u6b7b\u9501\u3002\u5b9e\u9645\u4e0a\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u6001\u7684\u81ea\u65cb\u9501\u5b9e\u73b0\u65f6\u4f1a\u5173\u4e2d\u65ad\u3002</p> </li> <li> <p>\u4e0a\u8ff0\u4ee3\u7801\u91cc<code>unlock()</code>\u91cc\u9700\u8981compiler barrier<code>asm volatile(\"\" ::: \"memory\");</code>\u7684\u539f\u56e0\uff1a</p> <ul> <li>\u4ece\u5faa\u73af 10 \u6b21\u6539\u6210\u5faa\u73af 1 \u6b21\uff0csum \u9519\u4e86\uff01</li> <li>\u9632\u6b62\u7f16\u8bd1\u5668\u505a\u4f18\u5316\uff0c\u5426\u5219\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u628a<code>unlock()</code>\u4ee3\u7801\u590d\u5236\u5230\u5230sum++\u4e4b\u540e\uff0c\u53ef\u80fd\u7684\u4f18\u5316\u662f\uff0c\u5148\u505a\u91ca\u653e\u9501\uff0c\u518d\u505asum++\uff0c\u5c31\u4f1a\u6709\u95ee\u9898\u3002</li> </ul> <p>\u9519\u8bef\u4ee3\u7801\uff1a C<pre><code>void unlock() {\n    status = UNLOCKED;\n}\n</code></pre> \u7f16\u8bd1\u540e\uff1a GAS<pre><code>movq    sum(%rip), %rax\nandl    $0, status(%rip)\naddq    $1, %rax\nmovq    %rax, sum(%rip)\n</code></pre></p> <p>\u6b63\u786e\u4ee3\u7801\uff1a C<pre><code>void unlock() {\n    asm volatile(\"\" ::: \"memory\");\n    status = UNLOCKED;\n}\n</code></pre> \u7f16\u8bd1\u540e\uff1a GAS<pre><code>movq    sum(%rip), %rax\naddq    $1, %rax\nmovq    %rax, sum(%rip)\nandl    $0, status(%rip)\n</code></pre></p> <p>Compiler Explorer</p> </li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-7-2","title":"Lecture 7 \u5e76\u53d1\u63a7\u5236\uff1a\u4e92\u65a5 (2)","text":"<p>Take-away Messages</p> <p>\u201c\u4e92\u65a5\u201d \u770b\u8d77\u6765\u7b80\u5355\uff0c\u7528\u81ea\u65cb\u9501\u5c31\u80fd\u5b9e\u73b0\uff0c\u4f46\u5982\u679c\u5728\u5b9e\u9645\u7684\u573a\u666f (\u4f8b\u5982\u53ef\u88ab\u4e2d\u65ad\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u3001\u4e0d\u5e0c\u671b\u6d6a\u8d39 CPU \u8d44\u6e90\u7684\u5e94\u7528\u7a0b\u5e8f\u7b49)\uff0c\u5b9e\u9645\u7684\u4e92\u65a5\u5b9e\u73b0\u5c31\u4e0d\u518d\u7b80\u5355\u3002\u6211\u4eec\u5728 xv6 \u7684\u81ea\u65cb\u9501\u5b9e\u73b0\u4e2d\uff0c\u53d1\u73b0\u4e86\u8bb8\u591a \u201c\u9632\u5fa1\u6027\u7f16\u7a0b\u201d \u7684\u4f8b\u5b50\uff0c\u5148\u5047\u8bbe\u7a0b\u5e8f\u5458\u53ef\u80fd\u4f1a\u72af\u4e00\u5207\u53ef\u80fd\u7684\u9519\u8bef\u2014\u2014\u7136\u540e\u4e0d\u65ad\u52a0\u4ee5\u68c0\u67e5\u3002\u800c \u201c\u6b63\u786e\u6027\u5b8c\u5168\u7531\u5f00\u53d1\u8005\u8d1f\u8d23\u201d \u7684\u65f6\u4ee3\u5c06\u8981\u8fc7\u53bb\uff0c\u6211\u4eec\u5c06\u4f1a\u5728\u672a\u6765\u8d8a\u6765\u8d8a\u591a\u5730\u770b\u5230\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u673a\u5236\uff0c\u5e2e\u52a9\u6211\u4eec\u5199\u51fa\u6b63\u786e\u7684\u4ee3\u7801\u3002</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4e2d\u7684\u81ea\u65cb\u9501\u5b9e\u73b0\uff1a\u5229\u7528\u8ba1\u7b97\u673a\u7cfb\u7edf\u72b6\u6001\u673a\u7684\u89c6\u89d2\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4e2d\u7684\u81ea\u65cb\u9501\u4e0d\u4ec5\u8981\u5b9e\u73b0\u5904\u7406\u5668\u95f4\u7684\u4e92\u65a5\uff0c\u8fd8\u8981\u6b63\u786e\u5904\u7406\u4e2d\u65ad\uff0c\u4ee5\u53ca\u9501\u7684\u5d4c\u5957\u3002\u5f53\u591a\u4e2a\u9700\u6c42\u53e0\u52a0\u65f6\uff0c\u4f5c\u51fa\u4e00\u4e2a\u6b63\u786e\u7684\u5b9e\u73b0\u5c31\u4e0d\u518d\u663e\u7136\u3002</p> C<pre><code>#include &lt;am.h&gt;\n#include &lt;spinlock.h&gt;\n\n// This is a ported version of spin-lock\n// from xv6-riscv to AbstractMachine:\n// https://github.com/mit-pdos/xv6-riscv\n\nvoid push_off();\nvoid pop_off();\nbool holding(spinlock_t *lk);\n\nvoid spin_lock(spinlock_t *lk) {\n    // Disable interrupts to avoid deadlock.\n    push_off();\n\n    // This is a deadlock.\n    if (holding(lk)) {\n        panic(\"acquire %s\", lk-&gt;name);\n    }\n\n    // This our main body of spin lock.\n    int got;\n    do {\n        got = atomic_xchg(&amp;lk-&gt;status, LOCKED);\n    } while (got != UNLOCKED);\n\n    lk-&gt;cpu = mycpu;\n}\n\nvoid spin_unlock(spinlock_t *lk) {\n    if (!holding(lk)) {\n        panic(\"release %s\", lk-&gt;name);\n    }\n\n    lk-&gt;cpu = NULL;\n    atomic_xchg(&amp;lk-&gt;status, UNLOCKED);\n\n    pop_off();\n}\n\n// Check whether this cpu is holding the lock.\n// Interrupts must be off.\nbool holding(spinlock_t *lk) {\n    return (\n        lk-&gt;status == LOCKED &amp;&amp;\n        lk-&gt;cpu == &amp;cpus[cpu_current()]\n    );\n}\n\n// push_off/pop_off are like intr_off()/intr_on()\n// except that they are matched:\n// it takes two pop_off()s to undo two push_off()s.\n// Also, if interrupts are initially off, then\n// push_off, pop_off leaves them off.\nvoid push_off(void) {\n    int old = ienabled();\n    struct cpu *c = mycpu;\n\n    iset(false);\n    if (c-&gt;noff == 0) {\n        c-&gt;intena = old;\n    }\n    c-&gt;noff += 1;\n}\n\nvoid pop_off(void) {\n    struct cpu *c = mycpu;\n\n    // Never enable interrupt when holding a lock.\n    if (ienabled()) {\n        panic(\"pop_off - interruptible\");\n    }\n\n    if (c-&gt;noff &lt; 1) {\n        panic(\"pop_off\");\n    }\n\n    c-&gt;noff -= 1;\n    if (c-&gt;noff == 0 &amp;&amp; c-&gt;intena) {\n        iset(true);\n    }\n}\n</code></pre> Bash<pre><code>\u76f4\u89c2\u60f3\u6cd5:\n\u5173\u672cCPU\u7684\u4e2d\u65ad\n    |\n  lock\n    |\n  sum++\n    |\n  unlock\n    |\n\u5f00\u672cCPU\u7684\u4e2d\u65ad (\u274c, \u5982\u679c\u5728\u60f3\u8fdb\u4e34\u754c\u533a\u505asum++\u4e4b\u524d\u672c\u8eab\u4e2d\u65ad\u5c31\u662f\u5173\u7684\u5462\uff1f\u8fd9\u6837\u7ed3\u675f\u5c82\u4e0d\u662f\u8bef\u5f00\u4e86\u4e2d\u65ad\uff0c\u5e76\u6ca1\u6709\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001)\n\n\u6b63\u786e\u505a\u6cd5:\n\u5173\u672cCPU\u7684\u4e2d\u65ad\n    |\n  lock\n    |\n  sum++\n    |\n  unlock\n    |\n\u6062\u590d\u672cCPU\u7684\u4e2d\u65ad\u60c5\u51b5 (\u5de7\u5999\u5229\u7528c-&gt;noff\u6765\u8bb0\u5f55\u6b21\u6570, \u5e76\u4e14\u53ea\u6709\u4e00\u5f00\u59cb\u5c31\u662f\u5f00\u4e2d\u65ad\u7684\u65f6\u5019: c-&gt;intena, \u624d\u5f00\u4e2d\u65ad)\n</code></pre> </li> <li> <p>\u81ea\u65cb\u7684\u540e\u679c: \u540c\u4e00\u4efd\u8ba1\u7b97\u4efb\u52a1\uff0c\u65f6\u95f4 (CPU cycles) \u548c\u7a7a\u95f4 (\u5185\u5b58\u5360\u7528) \u4f1a\u968f\u5904\u7406\u5668\u6570\u91cf\u7684\u589e\u957f\u800c\u53d8\u5316\u3002\u7528\u81ea\u65cb\u9501\u5b9e\u73b0 sum++: \u66f4\u591a\u7684\u5904\u7406\u5668, \u66f4\u5dee\u7684\u6027\u80fd\uff08\u56e0\u4e3a\u5176\u4ed6cpu\u90fd\u5728\u7a7a\u8f6c\uff0ccpu\u5229\u7528\u7387\u4e0b\u964d\u4e86\uff09\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u81ea\u65cb\u9501\u7684scalability\u5f88\u5dee\uff0c\u5e76\u4e0d\u662f\u7ebf\u6027\u53d8\u5316\u7684\u3002</p> <p></p> <p>\u4e00\u4e2a\u975e\u5e38\u806a\u660e\u7684\u60f3\u6cd5\uff1aRead-copy-update C<pre><code>Counter *c_current;\n\nint get() {\n    // Read\n    Counter *c = c_current;\n    return c-&gt;sum;\n}\n\nvoid increment() {\n    SPIN_LOCKED {\n        // Copy\n        Counter *c = alloc_counter();\n        c-&gt;sum = c_current-&gt;sum + 1;\n        smp_wmb(); // Memory barrier\n\n        // Update\n        c_current = c;\n    }\n}\n</code></pre></p> <p>\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5bf9\u8c61\u5177\u6709 \u201cread-mostly\u201d \u7684\u7279\u70b9\uff08\u4e5f\u5c31\u662f\u8bfb\u5199\u4e0d\u5bf9\u79f0\uff0c\u4fee\u6539\u4e0d\u9891\u7e41\uff0c\u4f46\u8bfb\u5374\u5f88\u9891\u7e41\uff09\uff0c\u53ef\u4ee5\u5728\u8bfb\u7684\u65f6\u5019\u4e0d\u4e0a\u9501\uff0c\u53ea\u6709\u5199\u7684\u65f6\u5019\u4e0a\u9501\uff0c\u800c\u4e14\u5199\u7684\u65f6\u5019\u662f\u5728\u81ea\u5df1\u7684\u526f\u672c\u4e0a\u5199\uff0c\u7136\u540e\u518d\u628a\u6307\u9488\u6307\u5411\u81ea\u5df1\u7684\u526f\u672c\u3002\u8fd9\u6837\u505a\u727a\u7272\u4e86\u8bfb\u5199\u4e00\u81f4\u6027\uff0c\u6709\u7684\u7ebf\u7a0b\u4e5f\u8bb8\u4f1a\u8bfb\u5230\u65e7\u7684\u7248\u672c\uff0c\u4f46\u6211\u4eec\u8ba4\u4e3a\u8fd9\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u65e7\u7248\u672c\u5bf9\u8c61\u4f1a\u5b58\u5728\u4e00\u4e2a \u201cgraceful period\u201d\uff0c\u76f4\u5230\u67d0\u4e2a\u65f6\u523b\uff0c\u6240\u6709 CPU read \u90fd\u4f1a\u8bbf\u95ee\u5230\u65b0\u7248\u672c\u3002\u8fd9\u6837\u5927\u591a\u6570\u8bfb\u7684\u60c5\u51b5\u6ca1\u5fc5\u8981\u4f7f\u7528\u81ea\u65cb\u9501\uff0c\u51cf\u5c11\u5176\u4ed6 CPU \u7a7a\u8f6c\u7684\u65f6\u95f4\u4ece\u800c\u63d0\u9ad8 CPU \u5229\u7528\u7387\u3002</p> <p>\u8bfb\u5199\u4e0d\u5bf9\u79f0\u7684\u4f8b\u5b50\uff1aLinux\u7528\u6237\u548c\u7ec4\u4fe1\u606f</p> <ul> <li>\u65e0\u65f6\u4e0d\u523b\u5728\u68c0\u67e5 (Permission Denied)</li> <li>\u4f46\u51e0\u4e4e\u4ece\u4e0d\u4fee\u6539\u7528\u6237</li> </ul> </li> <li> <p>\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4e92\u65a5: \u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u8f83\u597d\u5730\u4f7f\u7528\u81ea\u65cb\u9501\uff1f</p> <ul> <li>\u6027\u80fd\u95ee\u9898 (1)\uff1a\u9664\u4e86\u8fdb\u5165\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\uff0c\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u7684\u7ebf\u7a0b\u90fd\u5728\u7a7a\u8f6c<ul> <li>\u4e89\u62a2\u9501\u7684\u5904\u7406\u5668\u8d8a\u591a\uff0c\u5229\u7528\u7387\u8d8a\u4f4e</li> <li>\u5982\u679c\u4e34\u754c\u533a\u8f83\u957f\uff0c\u4e0d\u5982\u628a\u5904\u7406\u5668\u8ba9\u7ed9\u5176\u4ed6\u7ebf\u7a0b</li> </ul> </li> <li>\u6027\u80fd\u95ee\u9898 (2)\uff1a\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5173\u4e2d\u65ad<ul> <li>\u6301\u6709\u81ea\u65cb\u9501\u7684\u7ebf\u7a0b\u88ab\u5207\u6362</li> <li>\u5bfc\u81f4 100% \u7684\u8d44\u6e90\u6d6a\u8d39</li> <li>(\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u80fd \u201c\u544a\u8bc9\u201d \u64cd\u4f5c\u7cfb\u7edf\u5c31\u597d\u4e86)</li> </ul> </li> </ul> <p>\u89e3\u51b3\uff1a\u901a\u8fc7<code>syscall</code>\u628a\u9501\u7684\u5b9e\u73b0\u653e\u5230\u64cd\u4f5c\u7cfb\u7edf\u91cc\u5c31\u597d\u5566</p> <ul> <li><code>syscall(SYSCALL_lock, &amp;lk);</code><ul> <li>\u8bd5\u56fe\u83b7\u5f97 <code>lk</code>\uff0c\u4f46\u5982\u679c\u5931\u8d25\uff0c\u5c31\u5207\u6362\u5230\u5176\u4ed6\u7ebf\u7a0b</li> </ul> </li> <li><code>syscall(SYSCALL_unlock, &amp;lk);</code><ul> <li>\u91ca\u653e <code>lk</code>\uff0c\u5982\u679c\u6709\u7b49\u5f85\u9501\u7684\u7ebf\u7a0b\u5c31\u5524\u9192</li> </ul> </li> </ul> C<pre><code>pthread_mutex_t lock;\npthread_mutex_init(&amp;lock, NULL);\n\npthread_mutex_lock(&amp;lock);\npthread_mutex_unlock(&amp;lock);\n</code></pre> Bash<pre><code>                   T1\n                    |\n                syscall(acquire, lock)\n                    |\n--------------- Enter OS kernel --------------- \n|                                             |\n| OS spin lock locked                         |\n|                                             |\n|    try aquire lock:                         |\n|        if fail: mark as wait for the lock,  |\n|                 switch to other tasks       |\n|                                             |\n| OS spin lock released                       |\n--------------- Exit OS kernel ----------------\n\n                   T2\n                    |\n                syscall(release, lock)\n                    |\n--------------- Enter OS kernel --------------- \n|                                             |\n| OS spin lock locked                         |\n|                                             |\n|    release lock:                            |\n|        T1 is waiting for the lock:          |\n|           awake T1                          |\n|                                             |\n| OS spin lock released                       |\n--------------- Exit OS kernel ----------------\n</code></pre> </li> <li> <p>\u8fdb\u9636\u7684Futex: Fast Userspace muTexes</p> <ul> <li>Fast Path: \u81ea\u65cb\u4e00\u6b21\u3002\u65e0\u4eba\u4e89\u62a2\u65f6\uff0c\u65e0\u9700\u52a8\u7528<code>syscall</code>\uff0c\u76f4\u63a5\u8fdb\u4e34\u754c\u533a<ul> <li>\u4e00\u6761\u539f\u5b50\u6307\u4ee4\uff0c\u6210\u529f\u76f4\u63a5\u8fdb\u5165\u4e34\u754c\u533a</li> </ul> </li> <li>Slow Path: \u81ea\u65cb\u5931\u8d25\u3002\u6709\u4eba\u4e89\u62a2\u65f6\uff0c\u624d\u9700\u8981\u7528\u5230<code>syscall</code><ul> <li>\u8bf7\u6c42\u7cfb\u7edf\u8c03\u7528 <code>futex_wait</code></li> </ul> </li> </ul> </li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-8","title":"Lecture 8 \u8c03\u8bd5\u7406\u8bba\u4e0e\u5b9e\u8df5","text":"<ol> <li>\u9700\u6c42 \u2192 \u8bbe\u8ba1 \u2192 \u4ee3\u7801 (Fault/bug) \u2192 \u6267\u884c (Error) \u2192 \u5931\u8d25 (Failure)</li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-9-1","title":"Lecture 9 \u5e76\u53d1\u63a7\u5236\uff1a\u540c\u6b65 (1)","text":"<p>Take-away Messages</p> <p>\u540c\u6b65\u7684\u672c\u8d28\u662f\u7ebf\u7a0b\u9700\u8981\u7b49\u5f85\u67d0\u4ef6\u5b83\u6240\u9884\u671f\u7684\u4e8b\u4ef6\u53d1\u751f\uff0c\u800c\u4e8b\u4ef6\u7684\u53d1\u751f\u603b\u662f\u53ef\u4ee5\u7528\u6761\u4ef6 (\u4f8b\u5982 depth \u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\uff0c\u6216\u662f\u7a0b\u5e8f\u5904\u4e8e\u67d0\u4e2a\u7279\u5b9a\u7684\u72b6\u6001) \u6765\u8868\u8fbe\u3002\u56e0\u6b64\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u8bbe\u8ba1\u8005\u5b9e\u73b0\u4e86\u6761\u4ef6\u53d8\u91cf\uff0c\u5c06\u6761\u4ef6\u68c0\u67e5\u548c\u4e34\u754c\u533a \u201c\u653e\u5728\u4e00\u8d77\u201d\uff0c\u4ee5\u5b9e\u73b0\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u3002\u8fd9\u662f\u4e07\u80fd\u7684\u540c\u6b65\u65b9\u6cd5\u3002</p> <ol> <li> <p>Synchronization \u540c\u6b65\uff1a\u63a7\u5236\u5e76\u53d1\uff0c\u4f7f\u5f97 \u201c\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u968f\u65f6\u95f4\u53d8\u5316\u7684\u91cf\u5728\u53d8\u5316\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u4e00\u5b9a\u7684\u76f8\u5bf9\u5173\u7cfb\u201d\u3002\u4f8b\u5b50\uff1a</p> <ul> <li>\u6f14\u594f\u97f3\u4e50\u4e2d\u7684\u540c\u6b65<ul> <li>\u6bcf\u4e2a\u4e50\u624b\u90fd\u662f\u4e00\u4e2a \u201c\u7ebf\u7a0b\u201d</li> <li>\u8282\u62cd i \u5230\u8fbe \u2192 \u6f14\u594f ni</li> </ul> </li> <li>\u4f60\u4e0e\u5ba4\u53cb\u7ea6\u5b9a\u572823:59:59\u5728\u5b66\u6d3b\u95e8\u53e3\u76f8\u89c1</li> <li>\u76f8\u5f53\u4e8e\u4e16\u754c\u7ebf\u7684\u6536\u675f\uff0c\u6b64\u524d\u7ebf\u7a0b\u90fd\u5404\u81ea\u6267\u884c\uff0c\u4f46\u662f\u5728\u67d0\u4e2a\u65f6\u95f4\u8282\u70b9\u65f6\u9700\u8981\u540c\u6b65\uff0c\u7136\u540e\u518d\u5404\u81ea\u6267\u884c\u3002\u5728\u67d0\u4e2a\u77ac\u95f4\u8fbe\u5230 \u201c\u4e92\u76f8\u5df2\u77e5\u201d \u7684\u72b6\u6001\uff0c\u201c\u5148\u5230\u5148\u7b49\u201d\uff0c\u5728\u6761\u4ef6\u8fbe\u6210\u7684\u77ac\u95f4\u518d\u6b21\u6062\u590d\u5e76\u884c</li> </ul> C<pre><code>void T_player() {\n    while (!end) {\n        wait_next_beat();\n        play_next_note();\n    }\n}\n\nvoid T_conductor() {\n    while (!end) {\n        wait_next_beat();\n        release(); // release() \u4e4b\u540e\uff0cplayer \u90fd\u4f1a\u6f14\u594f\u4e0b\u4e00\u62cd\n    }\n}\n\n// \u81ea\u65cb\u5b9e\u73b0\nvoid wait_next_beat(int expect) {\n    // This is a spin-wait loop.\nretry:\n    mutex_lock(&amp;lk);\n    // This read is protected by a mutex.\n    int got = n;\n    mutex_unlock(&amp;lk);\n\n    if (got != expect) goto retry;\n}\n</code></pre> </li> <li> <p>\u7ecf\u5178\u540c\u6b65\u95ee\u9898\uff1a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898</p> <ul> <li>Producer \u548c Consumer \u5171\u4eab\u4e00\u4e2a\u7f13\u51b2\u533a<ul> <li>Producer (\u751f\u4ea7\u6570\u636e)\uff1a \u5982\u679c\u7f13\u51b2\u533a\u6709\u7a7a\u4f4d\uff0c\u653e\u5165\uff1b\u5426\u5219\u7b49\u5f85</li> <li>Consumer (\u6d88\u8d39\u6570\u636e)\uff1a\u5982\u679c\u7f13\u51b2\u533a\u6709\u6570\u636e\uff0c\u53d6\u8d70\uff1b\u5426\u5219\u7b49\u5f85</li> </ul> </li> </ul> <p>\u4f8b\u5b50\uff1a C<pre><code>void produce() { printf(\"(\"); }\nvoid consume() { printf(\")\"); }\n</code></pre></p> <ul> <li>\u751f\u4ea7 = \u6253\u5370\u5de6\u62ec\u53f7 (push into buffer)</li> <li>\u6d88\u8d39 = \u6253\u5370\u53f3\u62ec\u53f7 (pop from buffer)</li> <li>\u5728 <code>printf</code> \u524d\u540e\u589e\u52a0\u4ee3\u7801\uff0c\u4f7f\u5f97\u6253\u5370\u7684\u62ec\u53f7\u5e8f\u5217\u6ee1\u8db3<ul> <li>\u4e00\u5b9a\u662f\u67d0\u4e2a\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u7684\u524d\u7f00</li> <li>\u62ec\u53f7\u5d4c\u5957\u7684\u6df1\u5ea6\u4e0d\u8d85\u8fc7 n<ul> <li>n = 3, <code>((())())(((</code> \u5408\u6cd5</li> <li>n=3, <code>(((()))), (()))</code> \u4e0d\u5408\u6cd5</li> </ul> </li> </ul> </li> </ul> <p>pc-1.c: \u9519\u8bef\u7684\u81ea\u65cb\u5b9e\u73b0 C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\nmutex_t lk = MUTEX_INIT();\n\nint n, depth = 0;\n\nvoid T_produce() {\n    while (1) {\nretry:\n        mutex_lock(&amp;lk);\n        int ready = (depth &lt; n);\n        mutex_unlock(&amp;lk);\n        if (!ready) goto retry;\n\n        assert(depth &lt; n); // \u274c, \u6b64\u65f6lk\u5df2\u7ecf\u88ab\u91ca\u653e\uff0c\u5982\u679c\u88ab\u5207\u6362\u5230\u522b\u7684\u7ebf\u7a0b\uff0c\u522b\n        // \u7684\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u66f4\u6539depth\uff0c\u56e0\u6b64depth &lt; n \u4e0d\u4e00\u5b9a\u6210\u7acb\uff0c\u8fd9\u4e2aassert\u4f1a\u89e6\u53d1\n\n        mutex_lock(&amp;lk);\n        printf(\"(\");\n        depth++;\n        mutex_unlock(&amp;lk);\n    }\n}\n\nvoid T_consume() {\n    while (1) {\nretry:\n        mutex_lock(&amp;lk);\n        int ready = (depth &gt; 0);\n        mutex_unlock(&amp;lk);\n        if (!ready) goto retry;\n\n        assert(depth &gt; 0);\n\n        mutex_lock(&amp;lk);\n        printf(\")\");\n        depth--;\n        mutex_unlock(&amp;lk);\n    }\n}\n</code></pre></p> <p>pc-2.c: \u6b63\u786e\u7684\u81ea\u65cb\u5b9e\u73b0\uff08\u7136\u800c\u81ea\u65cb\u6d6a\u8d39\u4e86CPU\uff09 C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\nmutex_t lk = MUTEX_INIT();\n\nint n, depth = 0;\n\nvoid T_produce() {\n    while (1) {\nretry:\n        mutex_lock(&amp;lk);\n        if (!(depth &lt; n)) {\n            mutex_unlock(&amp;lk); // \u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u7acb\u9a6c\u91ca\u653e\u9501\n            goto retry; // \u6d6a\u8d39CPU\u2757\n        }\n\n        // \u2705\u80fd\u8d70\u5230\u8fd9\u91cc\u8bf4\u660e\u4e00\u5b9a\u6ee1\u8db3\u6761\u4ef6 depth &lt; n\uff0c\n        // \u56e0\u6b64\u53ef\u4ee5\u5b89\u5168\u5730\u4fee\u6539\u5171\u4eab\u72b6\u6001\uff0c\u6b64\u65f6\u9501\u4e5f\u6ca1\u88ab\u91ca\u653e\u6389\n\n        // The check of sync condition (depth &lt; n) is within\n        // the same critical section. As long as we safely\n        // protected the shared state, this condition should\n        // always hold at this point.\n        assert(depth &lt; n);\n\n        printf(\"(\");\n        depth++;\n\n        // And at this point, the condition (depth &gt; 0) is\n        // satisfied. However, a consumer could proceed with\n        // checking depth only if the lock is released.\n        mutex_unlock(&amp;lk);\n    }\n}\n\nvoid T_consume() {\n    while (1) {\nretry:\n        mutex_lock(&amp;lk);\n        if (!(depth &gt; 0)) {\n            mutex_unlock(&amp;lk);\n            goto retry;\n        }\n\n        assert(depth &gt; 0);\n\n        printf(\")\");\n        depth--;\n\n        mutex_unlock(&amp;lk);\n    }\n}\n</code></pre></p> <p>pc-cv.c: \u9519\u8bef\u7684\u6761\u4ef6\u53d8\u91cf\u5b9e\u73b0 C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\nint n, depth = 0;\nmutex_t lk = MUTEX_INIT();\ncond_t cv = COND_INIT();\n\n#define CAN_PRODUCE (depth &lt; n)\n#define CAN_CONSUME (depth &gt; 0)\n\nvoid T_produce() {\n    while (1) {\n        mutex_lock(&amp;lk);\n\n        if (!CAN_PRODUCE) { // \u274c, \u5e94\u8be5\u662fwhile\uff0c\u800c\u4e0d\u662fif\uff0c\u56e0\u4e3a\u88ab\u5524\u9192\n                            // \u540e\u6709\u53ef\u80fd\u53c8\u88ab\u522b\u7684\u7ebf\u7a0b\u62a2\u6389\u4e86\uff0c\u6761\u4ef6\u53c8\u4e0d\u6ee1\u8db3\uff0c\n                            // \u9700\u8981\u91cd\u65b0\u68c0\u67e5\u6761\u4ef6\n\n            // \u672c\u8d28\u539f\u56e0\uff1aproducer\u548cconsumer\u7b49\u5f85\u7684\u4e0d\u662f\u540c\u4e00\u4e2a\u6761\u4ef6\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u540c\n            // \u4e00\u4e2a\u6761\u4ef6\u53d8\u91cfcv\u3002\u7528\u540c\u4e00\u4e2a\u6761\u4ef6\u53d8\u91cf\uff0c\u5c31\u76f8\u5f53\u4e8e\u5524\u9192\u7684\u65f6\u5019\u591a\u5524\u9192\u4e86\uff0c\u591a\n            // \u5524\u9192\u7684\u8981\u81ea\u5df1\u68c0\u67e5\u81ea\u5df1\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\n\n            cond_wait(&amp;cv, &amp;lk);\n            // This is subtle. Seemingly \"more efficient\"\n            // implementation is dangerous for newbies.\n        }\n\n        printf(\"(\");\n        depth++;\n\n        cond_signal(&amp;cv);\n        mutex_unlock(&amp;lk);\n    }\n}\n\nvoid T_consume() {\n    while (1) {\n        mutex_lock(&amp;lk);\n\n        if (!CAN_CONSUME) {\n            cond_wait(&amp;cv, &amp;lk);\n        }\n\n        printf(\")\");\n        depth--;\n\n        cond_signal(&amp;cv);\n        mutex_unlock(&amp;lk);\n    }\n}\n</code></pre></p> <p>pc-cv-broadcast.c: \u6b63\u786e\u7684\u6761\u4ef6\u53d8\u91cf\u5b9e\u73b0 C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\nint n, depth = 0;\nmutex_t lk = MUTEX_INIT();\ncond_t cv = COND_INIT();\n\n#define CAN_PRODUCE (depth &lt; n)\n#define CAN_CONSUME (depth &gt; 0)\n\nvoid T_produce() {\n    while (1) {\n        mutex_lock(&amp;lk);\n\n        while (!CAN_PRODUCE) {\n            cond_wait(&amp;cv, &amp;lk); // wait\u65f6: \u91ca\u653e\u9501\uff0c\u5207\u6362\u5230\u522b\u7684\u7ebf\u7a0b\n            // We are here if the thread is being waked up, with\n            // the mutex being acquired. Then we check once again,\n            // and move out of the loop if CAN_PRODUCE holds.\n\n            // \u56de\u6765\u8fd9\u91cc\u65f6: \u83b7\u5f97\u9501\uff0c\u7136\u540e\u4e0b\u4e00\u8f6ewhile\u68c0\u67e5\u6761\u4ef6\n        }\n\n        // We still hold the mutex--and we check again.\n        assert(CAN_PRODUCE);\n\n        printf(\"(\");\n        depth++;\n\n        cond_broadcast(&amp;cv);\n        mutex_unlock(&amp;lk);\n    }\n}\n\nvoid T_consume() {\n    while (1) {\n        mutex_lock(&amp;lk);\n\n        while (!CAN_CONSUME) {\n            cond_wait(&amp;cv, &amp;lk);\n        }\n\n        printf(\")\");\n        depth--;\n\n        cond_broadcast(&amp;cv);\n        mutex_unlock(&amp;lk);\n    }\n}\n</code></pre></p> </li> <li> <p>\u201c\u4e07\u80fd\u201d \u7684\u540c\u6b65\u65b9\u6cd5\uff1a\u6761\u4ef6\u53d8\u91cf\uff08\u6761\u4ef6\u4e0d\u6ee1\u8db3\u65f6\u7b49\u5f85\uff0c\u6761\u4ef6\u6ee1\u8db3\u65f6\u5524\u9192\uff09</p> C<pre><code>mutex_t lk = MUTEX_INIT();\ncond_t cv = COND_INIT();\n\n//------------------------------------------------\nmutex_lock(&amp;lk);\nwhile (!condition) {\n    cond_wait(&amp;cv, &amp;lk);\n}\n// Wait for someone for wake-up.\nassert(condition);\n\nmutex_unlock(&amp;lk);\n\n//------------------------------------------------\ncond_signal(&amp;cv);     // Wake up a (random) thread\ncond_broadcast(&amp;cv);  // Wake up all threads\n</code></pre> <p>\u6761\u4ef6\u53d8\u91cf\u7684\u6b63\u786e\u6253\u5f00\u65b9\u5f0f\uff1a</p> <ul> <li>\u4f7f\u7528 while \u5faa\u73af\u548c broadcast<ul> <li>\u603b\u662f\u5728\u5524\u9192\u540e\u518d\u6b21\u68c0\u67e5\u540c\u6b65\u6761\u4ef6</li> <li>\u603b\u662f\u5524\u9192\u6240\u6709\u6f5c\u5728\u53ef\u80fd\u88ab\u5524\u9192\u7684\u4eba</li> </ul> </li> <li>\u5728\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u65f6\uff0c\u5173\u952e\u5728\u4e8e\u7406\u89e3 \u201c\u540c\u6b65\u6210\u529f\u201d \u7684\u6761\u4ef6\u662f\u4ec0\u4e48\u3002</li> </ul> </li> <li> <p>\u540c\u6b65\u673a\u5236\u7684\u5e94\u7528</p> <ul> <li>\u6709\u4e09\u79cd\u7ebf\u7a0b<ul> <li><code>Ta</code>\u82e5\u5e72\uff1a\u6b7b\u5faa\u73af\u6253\u5370 <code>&lt;</code></li> <li><code>Tb</code>\u82e5\u5e72\uff1a\u6b7b\u5faa\u73af\u6253\u5370 <code>&gt;</code></li> <li><code>Tc</code>\u82e5\u5e72\uff1a\u6b7b\u5faa\u73af\u6253\u5370 <code>_</code></li> </ul> </li> <li>\u4efb\u52a1\uff1a<ul> <li>\u5bf9\u7ebf\u7a0b\u540c\u6b65\uff0c\u4f7f\u5f97\u5c4f\u5e55\u6253\u5370\u51fa <code>&lt;&gt;&lt;_</code> \u548c <code>&gt;&lt;&gt;_</code> \u7684\u7ec4\u5408</li> </ul> </li> </ul> <p>\u540c\u6b65\u6210\u529f\u7684\u6761\u4ef6\u662f\u4ec0\u4e48</p> <p>\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\uff0c\u53ea\u8981\u56de\u7b54\u4e09\u4e2a\u95ee\u9898\uff1a\u6253\u5370 <code>&lt;</code> \u7684\u6761\u4ef6\uff1f\u6253\u5370 <code>&gt;</code> \u7684\u6761\u4ef6\uff1f\u6253\u5370 <code>_</code> \u7684\u6761\u4ef6\uff1f</p> <p>\u5229\u7528\u72b6\u6001\u673a\u89c6\u89d2\u6765\u89e3\u51b3\uff1a </p> C<pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\n#define LENGTH(arr) (sizeof(arr) / sizeof(arr[0]))\n\nenum { A = 1, B, C, D, E, F, };\n\nstruct rule {\nint from, ch, to;\n} rules[] = {\n    {A, '&lt;', B},\n    {B, '&gt;', C},\n    {C, '&lt;', D},\n    {A, '&gt;', E},\n    {E, '&lt;', F},\n    {F, '&gt;', D},\n    {D, '_', A},\n};\n\nint current = A, quota = 1;\n\nmutex_t lk = MUTEX_INIT();\ncond_t cv = COND_INIT();\n\nint next(char ch) {\n    for (int i = 0; i &lt; LENGTH(rules); i++) {\n        struct rule *rule = &amp;rules[i];\n        if (rule-&gt;from == current &amp;&amp; rule-&gt;ch == ch) {\n        return rule-&gt;to;\n        }\n    }\n    return 0;\n}\n\nstatic int can_print(char ch) {\n    return next(ch) != 0 &amp;&amp; quota &gt; 0;\n}\n\nvoid fish_before(char ch) {\n    mutex_lock(&amp;lk);\n    while (!can_print(ch)) {\n        cond_wait(&amp;cv, &amp;lk);\n    }\n    quota--;\n    mutex_unlock(&amp;lk);\n}\n\nvoid fish_after(char ch) {\n    mutex_lock(&amp;lk);\n    quota++;\n    current = next(ch);\n    assert(current);\n    cond_broadcast(&amp;cv);\n    mutex_unlock(&amp;lk);\n}\n\nconst char roles[] = \".&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;___\";\n\nvoid fish_thread(int id) {\n    char role = roles[id];\n    while (1) {\n        fish_before(role);\n        putchar(role); // Not lock-protected\n        fish_after(role);\n    }\n}\n\nint main() {\n    setbuf(stdout, NULL);\n    for (int i = 0; i &lt; strlen(roles); i++)\n        create(fish_thread);\n}\n</code></pre> </li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-10-2","title":"Lecture 10 \u5e76\u53d1\u63a7\u5236\uff1a\u540c\u6b65 (2)","text":"<p>Take-away Messages</p> <p>\u4fe1\u53f7\u91cf\u53ef\u4ee5\u770b\u505a\u662f\u4e92\u65a5\u9501\u7684\u4e00\u4e2a \u201c\u63a8\u5e7f\u201d\uff0c\u53ef\u4ee5\u7406\u89e3\u6210\u6e38\u6cf3\u9986\u7684\u624b\u73af\u3001\u888b\u5b50\u91cc\u7684\u7403\uff0c\u901a\u8fc7\u8ba1\u6570\u7684\u65b9\u5f0f\u5b9e\u73b0\u540c\u6b65\u2014\u2014\u5728\u7b26\u5408\u8fd9\u4e2a\u62bd\u8c61\u65f6\uff0c\u4f7f\u7528\u4fe1\u53f7\u91cf\u80fd\u591f\u5e26\u6765\u4f18\u96c5\u7684\u4ee3\u7801\u3002\u4f46\u4fe1\u53f7\u91cf\u4e0d\u662f\u4e07\u80fd\u7684\u2014\u2014\u7406\u89e3\u7ebf\u7a0b\u540c\u6b65\u7684\u6761\u4ef6\u624d\u662f\u771f\u6b63\u81f3\u5173\u91cd\u8981\u7684\u3002</p> <ol> <li> <p>E. W. Dijkstra \u53d1\u660e\u7684\u53e6\u4e00\u79cd\u5171\u4eab\u5185\u5b58\u7cfb\u7edf\u4e2d\u5e38\u7528\u7684\u540c\u6b65\u65b9\u6cd5\uff1a\u4fe1\u53f7\u91cf\u3002 </p> <p>\u7528\u4e92\u65a5\u9501\u5b9e\u73b0\u540c\u6b65, \u4e00\u4e2a\u5947\u5999\u7684\u60f3\u6cd5:</p> <ul> <li>\u521b\u5efa\u9501\u65f6\uff0c\u7acb\u5373 \u201c\u83b7\u5f97\u201d \u5b83 (\u603b\u662f\u6210\u529f)</li> <li>\u5176\u4ed6\u4eba\u60f3\u8981\u83b7\u5f97\u65f6\u5c31\u4f1a\u7b49\u5f85<ul> <li>\u6b64\u65f6 release \u5c31\u5b9e\u73b0\u4e86\u540c\u6b65</li> </ul> </li> <li>\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u9501\uff0c\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u89e3\u9501 \ud83d\ude02 (\u5b9e\u9645\u4ee3\u7801\u8fd9\u4e48\u5199\u662fUndefined behavior)</li> </ul> <p>\u7528\u4e92\u65a5\u9501\u5b9e\u73b0\u8ba1\u7b97\u56fe, Acquire-Release \u5b9e\u73b0\u8ba1\u7b97\u56fe:</p> <ul> <li>\u4e3a\u6bcf\u4e00\u6761\u8fb9 <code>e = (u,v)</code> \u5206\u914d\u4e00\u4e2a\u4e92\u65a5\u9501 \ud83d\udd12</li> <li>\u521d\u59cb\u65f6\uff0c\u5168\u90e8\u5904\u4e8e\u9501\u5b9a\u72b6\u6001</li> <li>\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u9700\u8981\u83b7\u5f97\u6240\u6709\u5165\u8fb9\u7684\u9501\u624d\u80fd\u7ee7\u7eed<ul> <li>\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u7684\u8282\u70b9\u7acb\u5373\u5f00\u59cb\u8ba1\u7b97</li> </ul> </li> <li> <p>\u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u91ca\u653e\u6240\u6709\u51fa\u8fb9\u5bf9\u5e94\u7684\u9501</p> <p>example\uff1a</p> <p></p> </li> </ul> C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n#include &lt;unistd.h&gt;\n\n#define LENGTH(arr) (sizeof(arr) / sizeof(arr[0]))\n\nconst int N = 7;\n\nstruct Edge {\n    int from, to;\n    mutex_t mutex;\n} edges[] = {\n    {1, 2, MUTEX_INIT()},\n    {2, 3, MUTEX_INIT()},\n    {2, 4, MUTEX_INIT()},\n    {2, 5, MUTEX_INIT()},\n    {4, 6, MUTEX_INIT()},\n    {5, 6, MUTEX_INIT()},\n    {4, 7, MUTEX_INIT()},\n};\n\nvoid T_worker(int id) {\n    for (int i = 0; i &lt; LENGTH(edges); i++) {\n        struct Edge *e = &amp;edges[i];\n        if (e-&gt;to == id) {\n            mutex_lock(&amp;e-&gt;mutex);\n        }\n    }\n\n    printf(\"Start %d\\n\", id);\n    sleep(1);\n    printf(\"End %d\\n\", id);\n    sleep(1);\n\n    for (int i = 0; i &lt; LENGTH(edges); i++) {\n        struct Edge *e = &amp;edges[i];\n        if (e-&gt;from == id) {\n            // Well... This is undefined behavior\n            // for POSIX threads. This is just a\n            // hack for demonstration.\n            mutex_unlock(&amp;e-&gt;mutex);\n        }\n    }\n}\n\nint main() {\n    for (int i = 0; i &lt; LENGTH(edges); i++) {\n        struct Edge *e = &amp;edges[i];\n        mutex_lock(&amp;e-&gt;mutex);\n    }\n\n    for (int i = 0; i &lt; N; i++) {\n        create(T_worker);\n    }\n}\n</code></pre> </li> <li> <p>\u672c\u8d28\uff1a\u201cRelease as Synchronization\u201d</p> <p>Release-Acquire \u5b9e\u73b0\u4e86 happens-before</p> <ul> <li>Acquire = \u7b49\u5f85 token\uff0c\u5f80\u888b\u5b50\u91cc\u53d6\u7403 (\u5982\u679c\u6b64\u65f6\u888b\u91cc\u6ca1\u6709\u7403\uff0c\u5219\u9700\u8981\u7b49\u5f85)\uff0cP</li> <li>Release = \u53d1\u51fa token\uff0c\u5f80\u888b\u5b50\u91cc\u653e\u7403 (\u5982\u679c\u6709\u4eba\u5728\u7b49\u5f85\uff0c\u76f4\u63a5\u628a\u7403\u4ea4\u7ed9\u4ed6)\uff0cV</li> <li>\u6ce8\u610f\u6211\u4eec\u53ef\u4ee5\u6709\u591a\u4e2a\u53e3\u888b</li> </ul> <p>\u4fe1\u53f7\u91cf\u7684 API: (\u4fe1\u53f7\u91cf\u5b9e\u9645\u4e0a\u662f\u7279\u6b8a\u7684\u6761\u4ef6\u53d8\u91cf\uff0c\u9690\u542b\u4e86\u4e00\u4e2a\u7279\u522b\u7684\u6761\u4ef6: \u7403\u7684\u6570\u91cf\u5927\u4e8e 0) C<pre><code>void P(sem_t *sem) {\n    // P - prolaag\n    //     try + decrease/down/wait/acquire\n    atomic {\n        wait_until(sem-&gt;count &gt; 0) {\n            sem-&gt;count--;\n        }\n    }\n}\n\nvoid V(sem_t *sem) {\n    // V - verhoog\n    //     increase/up/post/signal/release\n    atomic {\n        sem-&gt;count++;\n    }\n}\n</code></pre></p> </li> <li> <p>\u4fe1\u53f7\u91cf\u7684\u4e24\u79cd\u5178\u578b\u5e94\u7528</p> <ol> <li>\u5b9e\u73b0\u4e00\u6b21\u4e34\u65f6\u7684 happens-before: <ul> <li>A \u2192 V(s) \u2192 P(s)  \u2192 B<ul> <li>\u8fd9\u5c31\u662f\u521a\u624d\u7684 \u201c\u4e92\u65a5\u9501\u5b9e\u73b0\u540c\u6b65\u201d</li> </ul> </li> </ul> </li> <li>\u7ba1\u7406\u8ba1\u6570\u578b\u8d44\u6e90<ul> <li>\u6e38\u6cf3\u6c60\u91cc\u7684\u4eba\u4e0d\u80fd\u8d85\u8fc7 n \u4e2a</li> <li>\u505c\u8f66\u573a\u91cc\u7684\u8f66\u4e0d\u80fd\u8d85\u8fc7 n \u4e2a</li> <li>\u4f46\u53ef\u4ee5\u6709\u591a\u4e2a \u201c\u505c\u8f66\u573a\u201d\u3001\u201c\u6e38\u6cf3\u6c60\u201d</li> <li>\u6211\u4eec\u4e5f\u53ef\u4ee5\u521b\u9020\u51fa\u8f66\u4f4d</li> </ul> </li> </ol> </li> <li> <p>\u4f8b\u5b501\uff1a\u4f7f\u7528\u4fe1\u53f7\u91cf\u5b9e\u73b0\u7ebf\u7a0b join()\uff1a\u6211\u4eec\u65e2\u53ef\u4ee5\u7528\u4e00\u4e2a\u4fe1\u53f7\u91cf\u5b9e\u73b0\u4e00\u6b21\u4e34\u65f6\u7684 happens-before\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u8ba1\u6570\u578b\u4fe1\u53f7\u91cf\u7b49\u5f85\u6570\u91cf\u6b63\u786e\u7684\u7ebf\u7a0b\u7ed3\u675f\u3002     C<pre><code>#include &lt;thread-sync.h&gt;\n\nsem_t done[16];\nint count = 0;\n\nvoid worker_init(int T) {\n    count = T;\n    for (int i = 1; i &lt;= T; i++) {\n        SEM_INIT(&amp;done[i], 0);\n    }\n}\n\nvoid worker_done(int id) {\n    V(&amp;done[id]);\n}\n\nvoid worker_join() {\n    for (int i = 1; i &lt;= count; i++) {\n        P(&amp;done[i]);\n    }\n}\n</code></pre></p> <p>\u4f8b\u5b502\uff1a\u4f18\u96c5\u5730\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u3002\u751f\u4ea7\u8005\u628a\u7403\u4ece empty \u53e3\u888b\u53d6\u8d70\uff0c\u6253\u5370\u4e4b\u540e\u628a\u7403\u653e\u5165 fill \u53e3\u888b\uff1b\u6d88\u8d39\u8005\u5219\u6070\u597d\u76f8\u53cd\u3002\u6574\u4e2a\u7cfb\u7edf\u6ee1\u8db3 empty + fill + \u6b63\u5728\u6253\u5370\u7684\u7ebf\u7a0b = \u7f13\u51b2\u533a\u5927\u5c0f\u7684\u5168\u5c40\u7ea6\u675f\u3002 C<pre><code>void produce() {\n    P(&amp;empty);\n    printf(\"(\");\n    V(&amp;fill);\n}\n\nvoid consume() {\n    P(&amp;fill);\n    printf(\")\");\n    V(&amp;empty);\n}\n</code></pre> </p> </li> <li> <p>\u4fe1\u53f7\u91cf v.s. \u6761\u4ef6\u53d8\u91cf</p> <ul> <li>\u4fe1\u53f7\u91cf<ul> <li>\u4e92\u65a5\u9501\u7684\u81ea\u7136\u63a8\u5e7f</li> <li>\u5e72\u51c0\u3001\u4f18\u96c5\uff1a\u6ca1\u6709\u6761\u4ef6\u53d8\u91cf\u7684 \u201c\u81ea\u65cb\u201d</li> </ul> </li> <li>\u6761\u4ef6\u53d8\u91cf<ul> <li>\u4e07\u80fd\uff1a\u9002\u7528\u4e8e\u4efb\u4f55\u540c\u6b65\u6761\u4ef6</li> <li>\u4e0d\u592a\u597d\u7528\uff1a\u4ee3\u7801\u603b\u611f\u89c9\u4e0d\u592a\u5e72\u51c0</li> </ul> </li> </ul> <p>\u4f8b\u5b50\uff1a\u54f2\u5b66\u5bb6\u5403\u996d\u95ee\u9898 (E. W. Dijkstra, 1960)</p> <ul> <li>\u54f2\u5b66\u5bb6 (\u7ebf\u7a0b) \u6709\u65f6\u601d\u8003\uff0c\u6709\u65f6\u5403\u996d</li> <li>\u5403\u996d\u9700\u8981\u540c\u65f6\u5f97\u5230\u5de6\u624b\u548c\u53f3\u624b\u7684\u53c9\u5b50</li> </ul> <p></p> <p>\u6761\u4ef6\u53d8\u91cf</p> <ul> <li>\u540c\u6b65\u6761\u4ef6\uff1a<code>avail[lhs] &amp;&amp; avail[rhs]</code></li> <li>\u80cc\u6a21\u677f\u5373\u53ef\uff0c\u4e00\u5b9a\u6b63\u786e\u2705</li> </ul> <p>\u4fe1\u53f7\u91cf</p> <ul> <li><code>P(&amp;sem[lhs]) &amp;&amp; P(&amp;sem[rhs])</code></li> <li>\u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u95ee\u9898\uff1f\u9762\u5bf9\u590d\u6742\u7684\u540c\u6b65\u6761\u4ef6\uff0c\u5bb9\u6613\u51fa\u9519...</li> </ul> C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\n#define N 5\n\nsem_t avail[N];\n\nvoid Tphilosopher(int id) {\n    int lhs = (id + N - 1) % N; // id - 1\u53ef\u80fd\u4e3a\u8d1f\u6570\uff0c\u6545 + N\n    int rhs = id % N;\n\n    while (1) {\n        P(&amp;avail[lhs]);\n        printf(\"+ %d by T%d\\n\", lhs, id); // \u274c, \u5982\u679c 5 \u4e2a\u54f2\u5b66\u5bb6\u540c\u65f6\u4e3e\u8d77\n                                          // \u5de6\u624b\u7684\u53c9\u5b50 -&gt; \u6b7b\u9501\u4e86\n        P(&amp;avail[rhs]);\n        printf(\"+ %d by T%d\\n\", rhs, id);\n\n        // Eat.\n        // Philosophers are allowed to eat in parallel.\n\n        printf(\"- %d by T%d\\n\", lhs, id);\n        printf(\"- %d by T%d\\n\", rhs, id);\n        V(&amp;avail[lhs]);\n        V(&amp;avail[rhs]);\n    }\n}\n\nint main() {\n    for (int i = 0; i &lt; N; i++) {\n        SEM_INIT(&amp;avail[i], 1);\n    }\n\n    for (int i = 0; i &lt; N; i++) {\n        create(Tphilosopher);\n    }\n}\n</code></pre> <ul> <li>\u5982\u679c 5 \u4e2a\u54f2\u5b66\u5bb6\u540c\u65f6\u4e3e\u8d77\u5de6\u624b\u7684\u53c9\u5b50\u2026\u2026\u6b7b\u9501\u4e86<ul> <li>\u6211\u4eec\u9700\u8981\u7981\u6b62\u8fd9\u4ef6\u4e8b\u53d1\u751f</li> </ul> </li> </ul> <p>\u4fe1\u53f7\u91cfWorkaround 1: \u4ece\u684c\u5b50\u4e0a\u8d76\u8d70\u4e00\u4e2a\u4eba</p> <ul> <li>\u76f4\u89c2\u7406\u89e3\uff1a\u5927\u5bb6\u5148\u4ece\u684c\u4e0a\u9000\u51fa<ul> <li>\u888b\u5b50\u91cc\u6709 4 \u5f20\u5361</li> <li>\u62ff\u5230\u5361\u7684\u53ef\u4ee5\u4e0a\u684c\u5403\u996d (\u62ff\u53c9\u5b50)</li> <li>\u5403\u5b8c\u4ee5\u540e\u628a\u5361\u5f52\u8fd8\u5230\u888b\u5b50</li> </ul> </li> </ul> C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\n#define N 5\n\nsem_t table;\nsem_t avail[N];\n\nvoid Tphilosopher(int id) {\n    int lhs = (id + N - 1) % N;\n    int rhs = id % N;\n\n    while (1) {\n        // Come to table\n        P(&amp;table);\n\n        P(&amp;avail[lhs]);\n        printf(\"+ %d by T%d\\n\", lhs, id);\n        P(&amp;avail[rhs]);\n        printf(\"+ %d by T%d\\n\", rhs, id);\n\n        // Eat.\n        // Philosophers are allowed to eat in parallel.\n\n        printf(\"- %d by T%d\\n\", lhs, id);\n        printf(\"- %d by T%d\\n\", rhs, id);\n        V(&amp;avail[lhs]);\n        V(&amp;avail[rhs]);\n\n        // Leave table\n        V(&amp;table);\n    }\n}\n\nint main() {\n    SEM_INIT(&amp;table, N - 1); // \u2705 \u4fdd\u8bc1\u684c\u5b50\u4e0a\u81f3\u591a\u6709 N - 1 \u4e2a\u4eba\n\n\n    for (int i = 0; i &lt; N; i++) {\n        SEM_INIT(&amp;avail[i], 1); // N\u4e2a\u888b\u5b50\uff0c\u6bcf\u4e2a\u888b\u5b50\u91cc\u81f3\u591a1\u4e2a\u53c9\u5b50\n    }\n\n    for (int i = 0; i &lt; N; i++) {\n        create(Tphilosopher);\n    }\n}\n</code></pre> <p>\u4fe1\u53f7\u91cfWorkaround 2: Lock Ordering</p> <ul> <li>\u7ed9\u53c9\u5b50\u7f16\u53f7\uff0c\u603b\u662f\u5148\u62ff\u7f16\u53f7\u5c0f\u7684</li> </ul> C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\n#define N 5\n\nsem_t avail[N];\n\nvoid Tphilosopher(int id) {\n    int lhs = (id + N - 1) % N;\n    int rhs = id % N;\n\n    while (1) {\n        if (lhs &lt; rhs) // \u2705\u4fdd\u8bc1\u7f16\u53f7\u5c0f\u7684\u5148\u62ff\n        {\n            P(&amp;avail[lhs]);\n            P(&amp;avail[rhs]);\n        }\n        else\n        {\n            P(&amp;avail[rhs]);\n            P(&amp;avail[lhs]);\n        }\n        printf(\"+ %d by T%d\\n\", lhs, id);\n        printf(\"+ %d by T%d\\n\", rhs, id);\n\n        // Eat.\n        // Philosophers are allowed to eat in parallel.\n\n        printf(\"- %d by T%d\\n\", lhs, id);\n        printf(\"- %d by T%d\\n\", rhs, id);\n        V(&amp;avail[lhs]);\n        V(&amp;avail[rhs]);\n    }\n}\n\nint main() {\n    for (int i = 0; i &lt; N; i++) {\n        SEM_INIT(&amp;avail[i], 1);\n    }\n\n    for (int i = 0; i &lt; N; i++) {\n        create(Tphilosopher);\n    }\n}\n</code></pre> </li> <li> <p>\u7528\u6761\u4ef6\u53d8\u91cf\u5b9e\u73b0\u4fe1\u53f7\u91cf: easy     C<pre><code>void P(sem_t *sem) {\n    hold(&amp;sem-&gt;mutex) {\n        while (!COND)\n            cond_wait(&amp;sem-&gt;cv, &amp;sem-&gt;mutex);\n        sem-&gt;count--;\n    }\n}\n\nvoid V(sem_t *sem) {\n    hold(&amp;sem-&gt;mutex) {\n        sem-&gt;count++;\n        cond_broadcast(&amp;sem-&gt;cv);\n    }\n}\n</code></pre></p> <p>\u7528\u4fe1\u53f7\u91cf\u5b9e\u73b0\u6761\u4ef6\u53d8\u91cf: hard, \u4e0b\u9762\u8fd9\u4e2a\u662f\u9519\u8bef\u5b9e\u73b0 C<pre><code>void wait(struct condvar *cv, mutex_t *mutex) {\n    mutex_lock(&amp;cv-&gt;lock);\n    cv-&gt;nwait++;\n    mutex_unlock(&amp;cv-&gt;lock);\n\n    mutex_unlock(mutex); // \u5fc5\u987b\u5148\u91ca\u653e\u9501\uff0c\u518dsleep\u3002\u5426\u5219\u5e26\u7740\u9501\u53bbsleep\u4e86\u8bdd\uff0c\n                         // \u6ca1\u4eba\u518d\u80fd\u83b7\u5f97mutex\u8fd9\u628a\u9501\uff0c\u518d\u4e5f\u6539\u5199\u4e0d\u4e86\u72b6\u6001\u4e86\u3002\n\n                         // \u7136\u800c\uff0c\u82e5\u662f\u5148\u91ca\u653e\u4e86\u9501\uff0c\u6b64\u65f6\u6709\u53ef\u80fd\u522b\u7684\u7ebf\u7a0b\u6267\u884c\u4e86V\uff0c\n                         // \u6b64\u65f6\u522b\u7684\u7ebf\u7a0b\u6b63\u597d\u5728\u7b49P\uff0c\u7ed3\u679c\u76f4\u63a5\u6210\u529f\u4e86\uff0c\u538b\u6839\u4e0d\u7528\n                         // sleep\uff0c\u63a5\u7740\u5c31\u80fd\u5f80\u4e0b\u6267\u884c\u4e86\u3002\u62a2\u8d70\u4e86\u672c\u7ebf\u7a0bsleep\u540e\n                         // \u60f3\u8981\u83b7\u5f97\u7684\u7403\u3002\u4e5f\u5c31\u662f\u9519\u8bef\u7684\u5524\u9192\u4e86\u522b\u7684\u7ebf\u7a0b\u3002\n                         // \u5e0c\u671b\u7684\u662f\u751f\u4ea7\u8005\u5524\u9192\u6d88\u8d39\u8005\uff0c\u6d88\u8d39\u8005\u5524\u9192\u751f\u4ea7\u8005\u3002\u7136\u800c\n                         // \u73b0\u5728\u8fd9\u6837\u662f\u6709\u53ef\u80fd\u751f\u4ea7\u8005T1\u5524\u9192\u4e86\u751f\u4ea7\u8005T2\uff0c\u6d88\u8d39\u8005\u65e0\n                         // \u6cd5\u88ab\u5524\u9192\uff0c\u751f\u4ea7\u8005\u53c8\u7b49\u7740\u6d88\u8d39\u8005\u62ff\u8d70buffer\u7684\u4e1c\u897f\uff0c\u5bfc\n                         // \u81f4\u7cfb\u7edf\u518d\u4e5f\u65e0\u4efb\u4f55\u8fdb\u5ea6\u3002\n    P(&amp;cv-&gt;sleep);\n    // \u201c\u91ca\u653e\u9501\u5e76\u7761\u7720\u201d \u9700\u8981\u88ab\u5b9e\u73b0\u6210\u4e00\u4e2a\u539f\u5b50\u64cd\u4f5c (\u4f8b\u5982\uff0c\u7528\u81ea\u65cb\u5b9e\u73b0)\uff0c\u4f46\u8fd9\u4e00\u70b9\u5e76\n    // \u4e0d\u5bb9\u6613\u7528\u4fe1\u53f7\u91cf\u5b9e\u73b0\n\n    mutex_lock(mutex); // \u7761\u9192\u540e\u91cd\u65b0\u83b7\u5f97mutex\u8fd9\u628a\u9501\n}\n\nvoid broadcast(struct condvar *cv) {\n    mutex_lock(&amp;cv-&gt;lock);\n\n    for (int i = 0; i &lt; cv-&gt;nwait; i++) {\n        V(&amp;cv-&gt;sleep);\n    }\n    cv-&gt;nwait = 0;\n\n    mutex_unlock(&amp;cv-&gt;lock);\n}\n</code></pre></p> <p>\u5b9e\u73b0\u56f0\u96be\u7684\u672c\u8d28\u539f\u56e0\uff1a</p> <ul> <li>\u5148\u91ca\u653e\u9501\uff0c\u518d\u6267\u884c P<ul> <li>\u91ca\u653e\u9501\u7684\u4e00\u77ac\u95f4\u53ef\u80fd\u4e0e broadcast \u5e76\u53d1</li> </ul> </li> <li>\u5148\u6267\u884c P\uff0c\u518d\u91ca\u653e\u9501<ul> <li>P(&amp;cv-&gt;sleep) \u4f1a \u201c\u6c38\u4e45\u7761\u7720\u201d</li> </ul> </li> </ul> <p>\u9519\u8bef\u5b9e\u73b0\uff1a C<pre><code>#include &lt;thread.h&gt;\n#include &lt;thread-sync.h&gt;\n\nsem_t fill, empty;\n\nstruct condvar {\n    int nwait;\n    sem_t sleep;\n    mutex_t lock;\n} cv;\n\nvoid init(struct condvar *cv) {\n    cv-&gt;nwait = 0;\n    mutex_init(&amp;cv-&gt;lock);\n    SEM_INIT(&amp;cv-&gt;sleep, 0);\n}\n\nvoid wait(struct condvar *cv, mutex_t *mutex) {\n    // At this point, we hold \"mutex\".\n    mutex_lock(&amp;cv-&gt;lock);\n    cv-&gt;nwait++;\n    mutex_unlock(&amp;cv-&gt;lock);\n\n    // We have marked this thread as \"waiting\".\n    // Now we release the lock and go to sleep.\n    //\n    // &lt;-- broadcast() may happen here.\n    //     Suppose T1 calls broadcast() and proceeds\n    //     with execution. T1 may call wait() and\n    //     erroneously being signaled.\n    mutex_unlock(mutex);\n\n    // &lt;-- also, here.\n    P(&amp;cv-&gt;sleep);\n\n    // Re-acquire the mutex.\n    mutex_lock(mutex);\n}\n\nvoid broadcast(struct condvar *cv) {\n    mutex_lock(&amp;cv-&gt;lock);\n\n    // Wake up all waiting threads.\n    for (int i = 0; i &lt; cv-&gt;nwait; i++) {\n        V(&amp;cv-&gt;sleep);\n    }\n    cv-&gt;nwait = 0;\n    mutex_unlock(&amp;cv-&gt;lock);\n}\n\nint n = 1, depth = 0;\nmutex_t lk = MUTEX_INIT();\nstruct condvar cv;\n\n#define CAN_PRODUCE (depth &lt; n)\n#define CAN_CONSUME (depth &gt; 0)\n\nvoid T_produce() {\n    while (1) {\n        mutex_lock(&amp;lk);\n\n        while (!CAN_PRODUCE) {\n            wait(&amp;cv, &amp;lk);\n        }\n\n        printf(\"(\");\n        fflush(stdout);\n        depth++;\n\n        mutex_unlock(&amp;lk);\n\n        // Yes. We can broadcast without\n        // holding the mutex.\n        broadcast(&amp;cv);\n        usleep(10);\n    }\n}\n\nvoid T_consume() {\n    init(&amp;cv);\n\n    while (1) {\n        mutex_lock(&amp;lk);\n\n        while (!CAN_CONSUME) {\n            wait(&amp;cv, &amp;lk);\n        }\n\n        printf(\")\");\n        fflush(stdout);\n        depth--;\n\n        mutex_unlock(&amp;lk);\n\n        broadcast(&amp;cv);\n        usleep(10);\n    }\n}\n\nint main() {\n    for (int i = 0; i &lt; 1; i++) {\n        create(T_consume);\n        create(T_produce);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-11","title":"Lecture 11 \u771f\u5b9e\u4e16\u754c\u7684\u5e76\u53d1\u7f16\u7a0b","text":"<p>Take-away Messages</p> <p>\u5bf9\u5e76\u53d1\u7f16\u7a0b\u7684\u4e89\u8bae\u4e00\u76f4\u5b58\u5728\uff0c\u4f8b\u5982 \u201cThreads cannot be implemented as a library\u201d\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5728\u5f88\u591a\u5e94\u7528\u9886\u57df\u770b\u5230\u4e86 \u201c\u9886\u57df\u7279\u5b9a\u201d \u7684\u89e3\u51b3\u65b9\u6848\uff1aWeb \u4e2d\u7684\u5f02\u6b65\u7f16\u7a0b\u3001\u9ad8\u6027\u80fd\u8ba1\u7b97\u4e2d\u7684 MPI \u548c OpenMI\u3001\u6570\u636e\u4e2d\u5fc3\u4e2d\u7684 goroutines\u3001\u4eba\u5de5\u667a\u80fd\u65f6\u4ee3\u7684 CUDA\u3002\u66f4\u6709\u8da3\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff1a\u6539\u53d8\u4e16\u754c\u7684\u6280\u672f\uff0c\u5f80\u5f80\u53ea\u662f\u4e00\u4e2a\u5c0f\u5c0f\u7684\u5947\u601d\u5999\u60f3,\u6700\u7ec8\u575a\u6301\u5230\u5e95\u5f97\u5230\u7684\u2014\u2014\u5b83\u4eec\u5f88\u96be\u88ab \u201c\u89c4\u5212\u201d \u51fa\u6765\uff0c\u800c\u662f\u9700\u8981\u4e00\u4e9b \u201c\u80cc\u9053\u800c\u9a70\u201d \u7684\u4eba\u575a\u6301\u5230\u5e95\u3002\u5728\u5f53\u4eca\u7684\u793e\u4f1a\u73af\u5883\u4e0b\uff0c\u6211\u4eec\u6700\u7f3a\u5c11\u7684\u662f\u6709\u80fd\u529b\u80cc\u9053\u800c\u9a70\u7684\u4eba\u2014\u2014\u6709\u4e86\u4e0b\u4e00\u4ee3\u4eba\u7684\u8fdb\u6b65\uff0c\u624d\u4f1a\u6709\u5305\u5bb9\u4ed6\u4eec\u7684\u571f\u58e4\u3002</p> <ol> <li> <p>\u9ad8\u6027\u80fd\u8ba1\u7b97\u4e2d\u7684\u5e76\u884c\u7f16\u7a0b</p> <ul> <li>\u901a\u5e38\u8ba1\u7b97\u56fe\u5bb9\u6613\u9759\u6001\u5207\u5206 (\u673a\u5668-\u7ebf\u7a0b\u4e24\u7ea7\u4efb\u52a1\u5206\u89e3)<ul> <li>\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u89e3\u51b3\u4e00\u5207<ul> <li>MPI - \u201cmessage passing libraries\u201d, OpenMP - \u201cmulti-platform shared-memory parallel programming (C/C++ and Fortran)\u201d</li> </ul> </li> </ul> </li> </ul> C<pre><code>// \u52a0\u4e0a\u8fd9\u4e2a\uff0c\u4e0b\u9762\u7684for\u5faa\u73af\u5c31\u80fd\u5728\u4e0d\u540c\u7684\u7ebf\u7a0b\u91cc\u5e76\u884c\u8ba1\u7b97\n#pragma omp parallel num_threads(128) \nfor (int i = 0; i &lt; 1024; i++) {\n}\n</code></pre> </li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-12-bugs","title":"Lecture 12 \u5e76\u53d1 Bugs","text":"<p>Take-away Messages</p> <p>\u4eba\u7c7b\u672c\u8d28\u4e0a\u662f sequential creature\uff0c\u56e0\u6b64\u603b\u662f\u901a\u8fc7 \u201c\u5757\u7684\u987a\u5e8f\u6267\u884c\u201d \u8fd9\u4e00\u7b80\u5316\u6a21\u578b\u53bb\u7406\u89e3\u5e76\u53d1\u7a0b\u5e8f\uff0c\u4e5f\u76f8\u5e94\u6709\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u5e76\u53d1 bugs\uff1a</p> <ul> <li>Atomicity violation\uff0c\u672c\u5e94\u539f\u5b50\u5b8c\u6210\u4e0d\u88ab\u6253\u65ad\u7684\u4ee3\u7801\u88ab\u6253\u65ad</li> <li>Order violation\uff0c\u672c\u5e94\u6309\u67d0\u4e2a\u987a\u5e8f\u5b8c\u6210\u7684\u672a\u80fd\u88ab\u6b63\u786e\u540c\u6b65</li> </ul> <p>\u4e0e\u8fd9\u4e24\u7c7b bugs \u5173\u8054\u7684\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u662f\u6570\u636e\u7ade\u4e89\uff0c\u5373\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u5185\u5b58\uff0c\u4e14\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u5199\u3002\u6570\u636e\u7ade\u4e89\u975e\u5e38\u5371\u9669\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u7f16\u7a0b\u65f6\u8981\u5c3d\u529b\u907f\u514d\u3002</p> <ol> <li> <p>\u5e38\u89c1\u7684\u5e76\u53d1 bugs\uff1a\u6b7b\u9501\u3001\u6570\u636e\u7ade\u4e89\u3001\u539f\u5b50\u6027\u548c\u987a\u5e8f\u8fdd\u53cd\u3002</p> <ul> <li>\u6b7b\u9501 (Deadlock): A deadlock is a state in which each member of a group is waiting for another member, including itself, to take action. \u6b7b\u9501\u4ea7\u751f\u7684\u5fc5\u8981\u6761\u4ef6\uff1a<ul> <li>Mutual-exclusion - \u4e00\u4e2a\u53e3\u888b\u4e00\u4e2a\u7403\uff0c\u5f97\u5230\u7403\u624d\u80fd\u7ee7\u7eed</li> <li>Wait-for - \u5f97\u5230\u7403\u7684\u4eba\u60f3\u8981\u66f4\u591a\u7684\u7403</li> <li>No-preemption - \u4e0d\u80fd\u62a2\u522b\u4eba\u7684\u6301\u6709\u7684\u7403</li> <li>Circular-chain - \u5f62\u6210\u5faa\u73af\u7b49\u5f85\u7403\u7684\u5173\u7cfb</li> </ul> </li> <li> <p>\u6570\u636e\u7ade\u4e89 (Data race)\uff1a\u4e0d\u540c\u7684\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u5185\u5b58\uff0c\u4e14\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u5199\u3002</p> <p>Case 1: \u4e0a\u9519\u4e86\u9501 C<pre><code>void T_1() { spin_lock(&amp;A); sum++; spin_unlock(&amp;A); }\nvoid T_2() { spin_lock(&amp;B); sum++; spin_unlock(&amp;B); }\n</code></pre></p> <p>Case 2: \u5fd8\u8bb0\u4e0a\u9501 C<pre><code>void T_1() { spin_lock(&amp;A); sum++; spin_unlock(&amp;A); }\nvoid T_2() { sum++; }\n</code></pre></p> </li> <li> <p>\u539f\u5b50\u6027\u548c\u987a\u5e8f\u8fdd\u53cd</p> <ul> <li>\u539f\u5b50\u6027\u8fdd\u53cd (Atomicity Violation)<ul> <li>\u201cABA\u201d: \u4ee3\u7801\u88ab\u522b\u4eba \u201c\u5f3a\u52bf\u63d2\u5165\u201d\u3002\u5373\u4fbf\u5206\u522b\u4e0a\u9501 (\u6d88\u9664\u6570\u636e\u7ade\u4e89)\uff0c\u4f9d\u7136\u662f AV </li> </ul> </li> <li>\u987a\u5e8f\u8fdd\u53cd (Order Violation)<ul> <li>\u201cBA\u201d: \u4e8b\u4ef6\u672a\u6309\u9884\u5b9a\u7684\u987a\u5e8f\u53d1\u751f\u3002\u4f8b\u5b50\uff1aconcurrent use-after-free </li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"OS/%E5%B9%B6%E5%8F%91/#lecture-13-bugs","title":"Lecture 13 \u5e94\u5bf9 (\u5e76\u53d1) Bugs","text":"<p>Take-away Messages</p> <p>Bugs (\u5305\u62ec\u5e76\u53d1 bugs) \u4e00\u76f4\u4ee5\u6765\u56f0\u6270\u7740\u6240\u6709\u8f6f\u4ef6\u5de5\u7a0b\u7684\u5b9e\u8df5\u8005\u3002\u6211\u4eec\u4e0d\u4ec5\u8981\u5e94\u5bf9 specification crisis (\u5b9a\u4e49\u5230\u5e95\u4ec0\u4e48\u662f\u5bf9\u7684)\uff0c\u751a\u81f3\u5373\u4fbf\u77e5\u9053 specification\uff0c\u4e5f\u96be\u4ee5\u5e94\u5bf9\u73b0\u4ee3\u8f6f\u4ef6\u7684\u590d\u6742\u6027\u3002\u4e3a\u4e86\u90e8\u5206\u5e94\u5bf9\u8fd9\u4e00\u70b9\u4ece\u800c\u5b9e\u73b0 \u201c\u66f4\u6b63\u786e\u201d \u7684\u8f6f\u4ef6\uff0c\u6211\u4eec\u628a\u5bf9\u7a0b\u5e8f\u7684\u9884\u671f\u8868\u8fbe\u5728\u7a0b\u5e8f\u4e2d (race-free, lock ordering, ...)\uff0c\u800c\u4e0d\u662f\u8ba9\u7a0b\u5e8f\u5728\u81ea\u7136\u72b6\u6001\u4e0b\u6084\u6084\u8fdb\u5165\u6709\u95ee\u9898\u7684\u72b6\u6001\uff0c\u5c31\u662f\u6211\u4eec\u76ee\u524d\u89e3\u51b3\u7a0b\u5e8f\u8c03\u8bd5\u95ee\u9898\u7684\u6298\u4e2d\u529e\u6cd5\u3002\u201c\u5c71\u5be8\u201d sanitizer \u7ed9\u6211\u4eec\u5e26\u6765\u7684\u542f\u53d1\u5219\u662f\uff1a\u5982\u679c\u6211\u4eec\u80fd\u6e05\u695a\u5730\u8ffd\u6eaf\u5230\u95ee\u9898\u4ea7\u751f\u7684\u672c\u6e90\uff0c\u6211\u4eec\u5c31\u603b\u662f\u80fd\u627e\u5230\u597d\u7684\u5e94\u5bf9\u65b9\u6cd5\u2014\u2014\u5c71\u5be8\u7684 sanitizers \u5728\u6697\u4e2d\u5e2e\u52a9\u4f60\u5b9e\u73b0 fail-fast \u7684\u7a0b\u5e8f\uff0c\u4ece\u800c\u51cf\u8f7b\u4f60\u8c03\u8bd5\u95ee\u9898\u7684\u8d1f\u62c5\u3002</p> <ol> <li> <p>\u6b7b\u9501\u7684\u907f\u514d: </p> <ul> <li>Lock ordering: \u907f\u514d\u5faa\u73af\u7b49\u5f85<ul> <li>\u4e25\u683c\u6309\u7167\u7f16\u53f7\u987a\u5e8f\u83b7\u5f97\u6240\u6709\u9501</li> </ul> </li> </ul> <p>lockdep: \u4e3a\u6bcf\u4e00\u4e2a\u9501\u90fd\u8ffd\u8e2a\u4e0a\u9501\u7684\u987a\u5e8f\u4f1a\u5e26\u6765\u76f8\u5f53\u7684\u5f00\u9500\u3002\u66f4\u7ecf\u6d4e\u7684\u65b9\u5f0f\u662f\u628a\u6240\u6709\u5728\u540c\u4e00\u884c\u4ee3\u7801\u4e2d\u521d\u59cb\u5316\u7684\u9501\u90fd\u770b\u6210\u662f \u201c\u540c\u4e00\u4e2a\u9501\u201d\uff0c\u8fd9\u6837\u9501\u7684\u6570\u91cf\u5c31\u5927\u5e45\u51cf\u5c11\u4e86\u3002\u5f53\u7136\u8fd9\u4e5f\u4f1a\u635f\u5931\u4e00\u4e9b\u68c0\u6d4b\u7cbe\u5ea6\uff0c\u4f8b\u5982\u54f2\u5b66\u5bb6\u5403\u996d\u95ee\u9898\u4e2d\uff0c\u5982\u679c\u6240\u6709\u7684\u9501\u90fd\u5728\u540c\u4e00\u884c\u4ee3\u7801\u4e2d\u521d\u59cb\u5316\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u533a\u5206\u5b83\u4eec\u7684\u4e0a\u9501\u987a\u5e8f\u4e86\u3002</p> <p>lockdep.cc C++<pre><code>#include \"lockdep.h\"\n#include &lt;vector&gt;\n#include &lt;set&gt;\n#include &lt;iostream&gt;\n#include &lt;cassert&gt;\n#include &lt;string&gt;\n\nusing std::string, std::cout, std::endl, std::set;\nusing edge = std::pair&lt;string, string&gt;;\n\n// Subtle: this *memory-leak* is intentional.\n// There lacks a mechanism to force destructor join()\n// to be called *before* global objects' destructions.\nstatic auto* vertices = new set&lt;string&gt;();\nstatic auto* edges = new set&lt;edge&gt;();\n\n// It's safe to auto-destruct thread-local objects.\nstatic thread_local set&lt;string&gt; held_locks;\n\nstatic void check_cycles();\nstatic mutex_t GL = MUTEX_INIT();\n\nclass HoldLock {\n    mutex_t *lk;\n\npublic:\n    HoldLock(mutex_t *lock): lk(lock) {\n        mutex_lock(lk);\n    }\n\n    ~HoldLock() {\n        mutex_unlock(lk);\n    }\n};\n\n// This function is to be C-linked; name mangling is disabled.\nextern \"C\"\nvoid lock(lock_t *lk) {\n    // Vertices and edges (set&lt;&gt;s) are shared across threads.\n    // Keep them safe with an RAII-guarded lock.\n    { [[maybe_unused]] HoldLock h(&amp;GL);\n        bool updated = false;\n\n        vertices-&gt;insert(lk-&gt;name);\n        for (auto name : held_locks) {\n            edge e(name, lk-&gt;name);\n            if (!edges-&gt;contains(e)) {\n                edges-&gt;insert(e);\n                updated = true;\n            }\n        }\n\n        if (updated) {\n            check_cycles();\n        }\n    }\n\n    // The held_locks is declared as thread_local.\n    // No need for locks.\n    held_locks.insert(lk-&gt;name);\n\n    mutex_lock(&amp;lk-&gt;mutex);\n}\n\nextern \"C\"\nvoid unlock(lock_t *lk) {\n    mutex_unlock(&amp;lk-&gt;mutex);\n\n    held_locks.erase(lk-&gt;name);\n}\n\nstatic void check_cycles() {\n    // At this point, we must have held GL.\n    // Unfortunately, there is no graceful way to check if\n    // this lock is held by the current thread.\n    assert(pthread_mutex_trylock(&amp;GL) == EBUSY);\n\n    // Transitive closure by Floyd-Warshall's algorithm.\n    for (auto v: *vertices)\n        for (auto u: *vertices)\n            for (auto w: *vertices)\n                if (edges-&gt;contains({u, v}) &amp;&amp; edges-&gt;contains({v, w})) {\n                    edges-&gt;insert({u, w});\n                }\n\n    // Check for cycles\n    cout &lt;&lt; endl &lt;&lt; \"Lockdep check:\" &lt;&lt; endl;\n    for (auto [u, v] : *edges) {\n        cout &lt;&lt; \"    \" &lt;&lt; u &lt;&lt; \" -&gt; \" &lt;&lt; v &lt;&lt; endl;\n        if (u == v) {\n            cout &lt;&lt; \"    \\033[31m!!! Cycle detected for \"\n                &lt;&lt; u &lt;&lt; \"\\033[0m\" &lt;&lt; endl;\n        }\n    }\n}\n</code></pre></p> <p>lockdep.h C<pre><code>#include &lt;thread-sync.h&gt;\n\ntypedef struct {\n    mutex_t mutex;\n    const char *name;\n} lock_t;\n\n#define STRINGIFY(s) #s\n#define TOSTRING(s) STRINGIFY(s)\n#define LOCK_INIT() \\\n    ((lock_t) { \\\n        .mutex = MUTEX_INIT(), \\\n        .name = __FILE__ \":\" TOSTRING(__LINE__), \\\n    })\n\n#ifndef __cplusplus\nvoid lock(lock_t *lk);\nvoid unlock(lock_t *lk);\n#else\nextern \"C\" void lock(lock_t *lk);\nextern \"C\" void unlock(lock_t *lk);\n#endif\n</code></pre></p> <p>main.c C<pre><code>#include &lt;thread.h&gt;\n#include \"lockdep.h\"\n\nlock_t lk1 = LOCK_INIT();\nlock_t lk2 = LOCK_INIT();\nlock_t lk3 = LOCK_INIT();\n\nstruct some_object {\n    lock_t lock;\n    int data;\n};\n\nvoid object_init(struct some_object *obj) {\n    obj-&gt;lock = LOCK_INIT();\n    obj-&gt;data = 100;\n}\n\nvoid create_object() {\n    struct some_object *obj = malloc(sizeof(struct some_object));\n    assert(obj);\n    object_init(obj);\n\n    lock(&amp;obj-&gt;lock);\n    unlock(&amp;obj-&gt;lock);\n\n    free(obj);\n}\n\nvoid T_1() {\n    lock(&amp;lk1);\n    lock(&amp;lk2);\n    create_object();\n    unlock(&amp;lk1);\n    unlock(&amp;lk2);\n}\n\nvoid T_2() {\n    sleep(3);\n\n    lock(&amp;lk2);\n    lock(&amp;lk3);\n    create_object();\n    unlock(&amp;lk2);\n    unlock(&amp;lk3);\n}\n\nvoid T_3() {\n    sleep(6);\n\n    lock(&amp;lk3);\n    lock(&amp;lk1);\n    create_object();\n    unlock(&amp;lk1);\n    unlock(&amp;lk3);\n}\n\nint main() {\n    create(T_1);\n    create(T_2);\n    create(T_3);\n}\n</code></pre></p> </li> <li> <p>\u9632\u5fa1\u6027\u7f16\u7a0b</p> <ul> <li> <p>Buffer Overrun \u68c0\u67e5\uff1aCanary (\u91d1\u4e1d\u96c0) \u201c\u727a\u7272\u201d \u5185\u5b58\u5355\u5143\uff0c\u9884\u8b66 memory error</p> <p>C<pre><code>#define MAGIC 0x55555555\n#define BOTTOM (STK_SZ / sizeof(u32) - 1)\nstruct stack { char data[STK_SZ]; };\n\nvoid canary_init(struct stack *s) {\n    u32 *ptr = (u32 *)s;\n    for (int i = 0; i &lt; CANARY_SZ; i++)\n        ptr[BOTTOM - i] = ptr[i] = MAGIC;\n}\n\nvoid canary_check(struct stack *s) {\n    u32 *ptr = (u32 *)s;\n    for (int i = 0; i &lt; CANARY_SZ; i++) {\n        panic_on(ptr[BOTTOM - i] != MAGIC, \"underflow\");\n        panic_on(ptr[i] != MAGIC, \"overflow\");\n    }\n}\n</code></pre> </p> </li> <li> <p>\u53e6\u4e00\u79cd Canary:</p> C<pre><code>int foo() {\n    // \u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\uff1b\u4f4d\u4e8e\u5c40\u90e8\u53d8\u91cf\u548c\u8fd4\u56de\u5730\u5740\u4e4b\u524d\n    u32 canary = SOME_VALUE;\n\n    ... // \u5b9e\u9645\u51fd\u6570\n\n    canary ^= SOME_VALUE; // \u5982\u679c\u7a0b\u5e8f\u88ab\u653b\u51fb\u6216\u51fa\u9519\n                        // canary \u5c31\u4e0d\u4f1a\u5f52\u96f6\u4e86\n    assert(canary == 0);\n    return ret;\n}\n</code></pre> </li> <li> <p>\u201c\u70eb\u70eb\u70eb\u3001\u5c6f\u5c6f\u5c6f\u548c\u847a\u847a\u847a\u201d\u7684\u6765\u6e90\uff1a</p> <ul> <li>\u672a\u521d\u59cb\u5316\u6808: <code>0xcccccccc</code></li> <li>\u672a\u521d\u59cb\u5316\u5806: <code>0xcdcdcdcd</code></li> <li>\u5bf9\u8c61\u5934\u5c3e: <code>0xfdfdfdfd</code></li> <li>\u5df2\u56de\u6536\u5185\u5b58: <code>0xdddddddd</code></li> </ul> Python<pre><code>for i in [0xcc, 0xcd, 0xdd, 0xfd]:\n    print((bytes([i]) * 80).decode('gbk'))\n</code></pre> </li> <li> <p>\u4f4e\u914d\u7248 Lockdep</p> C<pre><code>int spin_cnt = 0;\nwhile (xchg(&amp;lk, \u274c) == \u274c) {\n    // \u81ea\u65cb\u6b21\u6570\u8fc7\u591a\uff0c\u8bf4\u660e\u53ef\u80fd\u6709\u6b7b\u9501\n    if (spin_cnt++ &gt; SPIN_LIMIT) {\n        panic(\"Spin limit exceeded @ %s:%d\\n\",\n            __FILE__, __LINE__);\n    }\n}\n</code></pre> </li> <li> <p>\u4f4e\u914d\u7248 AddressSanitizer</p> C<pre><code>// allocation\nfor (int i = 0; (i + 1) * sizeof(u32) &lt;= size; i++) {\n    panic_on(((u32 *)ptr)[i] == MAGIC, \"double-allocation\");\n    arr[i] = MAGIC;\n}\n\n// free\nfor (int i = 0; (i + 1) * sizeof(u32) &lt;= alloc_size(ptr); i++) {\n    panic_on(((u32 *)ptr)[i] == 0, \"double-free\");\n    arr[i] = 0;\n}\n</code></pre> </li> <li> <p>\u4f4e\u914d\u7248 ThreadSanitizer</p> C<pre><code>// Suppose x is lock-protected\n\n...\nint observe1 = x;\ndelay();\nint observe2 = x;\n// \u5982\u679c\u5b58\u5728data race\uff0c\u90a3\u4e48x\u4f1a\u88ab\u6539\u5199\uff0c\u5219\u89e6\u53d1assert\nassert(observe1 == observe2);\n...\n</code></pre> </li> <li> <p>SemanticSanitizer</p> <ul> <li> <p>\u68c0\u67e5\u6574\u6570\u662f\u5426\u5728\u67d0\u4e2a\u8303\u56f4</p> C<pre><code>#define CHECK_INT(x, cond) \\\n    ({ panic_on(!((x) cond), \\\n    \"int check fail: \" \\\n    #x \" \" #cond); \\\n    })\n\n// Example:\nCHECK_INT(waitlist-&gt;count, &gt;= 0);\n</code></pre> </li> <li> <p>\u68c0\u67e5\u6307\u9488\u662f\u5426\u4f4d\u4e8e\u5806\u533a</p> C<pre><code>#define CHECK_HEAP(ptr) \\\n    ({ panic_on(!IN_RANGE((ptr), heap)); })\n</code></pre> </li> </ul> </li> </ul> </li> </ol>"},{"location":"OS/%E6%80%BB%E7%BB%93/","title":"\u603b\u7ed3","text":"<p> \u7ea6 205 \u4e2a\u5b57  104 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"OS/%E6%80%BB%E7%BB%93/#lecture-30","title":"Lecture 30 \u8bfe\u7a0b\u603b\u7ed3","text":"<ol> <li> <p>fork-based DFS: \u5982\u679c\u6211\u4eec\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u603b\u662f\u9700\u8981\u7ef4\u62a4\u5f53\u524d\u7684 \u201c\u641c\u7d22\u72b6\u6001\u201d\u3002\u901a\u5e38\u8fd9\u662f\u901a\u8fc7\u5c06\u72b6\u6001\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u5b9e\u73b0\u7684 (\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u7528\u7ef4\u62a4\u5168\u5c40\u72b6\u6001\u7684\u65b9\u5f0f\u5b9e\u73b0)\u3002\u501f\u52a9 fork()\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2a\u641c\u7d22\u5206\u652f\u521b\u5efa\u4e00\u4e2a\u5f53\u524d\u72b6\u6001\u7684\u5feb\u7167\uff0c\u5b9e\u73b0\u5e76\u884c\u641c\u7d22\u3002</p> <p>\u5e76\u884c\u641c\u7d22\uff1a\u901a\u8fc7\u521b\u5efa\u5b50\u8fdb\u7a0b\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u5728\u591a\u4e2a\u8def\u5f84\u4e0a\u8fdb\u884c\u641c\u7d22\uff0c\u8fd9\u5927\u5927\u63d0\u9ad8\u4e86\u641c\u7d22\u6548\u7387\u3002\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u90fd\u4f1a\u63a2\u7d22\u4e00\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\uff0c\u800c\u7236\u8fdb\u7a0b\u5219\u8d1f\u8d23\u7b49\u5f85\u6240\u6709\u5b50\u8fdb\u7a0b\u5b8c\u6210\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;sys/wait.h&gt;\n\n#define DEST '+'\n#define EMPTY '.'\n\nstruct move {\n    int move, x, y;\n} moves[] = {\n    {'&gt;', 0, 1},\n    {'v', 1, 0},\n    {'&lt;', 0, -1},\n    {'^', -1, 0},\n};\n\nchar map[][512] = {\n    \"######\",\n    \"#...+#\",\n    \"#..#.#\",\n    \"#..#.#\",\n    \"#....#\",\n    \"######\",\n    \"\",\n};\n\nvoid display(int steps);\nvoid dfs(int x, int y, int steps);\n\nint main() {\n    dfs(1, 1, 0);\n}\n\n\nvoid dfs(int x, int y, int steps) {\n    // Each search level gets 1 second of delay.\n    sleep(1);\n\n    if (map[x][y] == DEST) {\n        display(steps);\n        exit(0);\n    } else {\n        int nfork = 0;\n\n        for (struct move *m = moves; m &lt; moves + 4; m++) {\n            int x1 = x + m-&gt;x, y1 = y + m-&gt;y;\n            int pid = fork();\n\n            assert(pid &gt;= 0);\n\n            if (pid == 0) {\n                // Forked worker process\n\n                map[x][y] = m-&gt;move;\n                if (map[x1][y1] == DEST || map[x1][y1] == EMPTY) {\n                    dfs(x1, y1, steps + 1);\n                    // \u53ea\u6709\u4e0b\u4e00\u4e2a\u641c\u7d22\u7684\u4f4d\u7f6e\u662fDEST\u6216EMPTY\uff0c\u624d\u9012\u5f52\u641c\u7d22\n                    // \u5df2\u641c\u7d22\u8fc7\u7684\u5730\u65b9\u5c31\u4e0d\u518d\u91cd\u590d\u4e86\n                }\n                exit(0);\n            } else {\n                nfork++;\n\n                // If we wait here, the search will be serialized.\n                // waitpid(pid, NULL, 0);\n            }\n        }\n\n        while (nfork--) // \u7b49\u5f85\u6240\u6709\u5b50\u8fdb\u7a0b\u7ed3\u675f\n            wait(NULL);\n    }\n}\n\nvoid display(int steps) {\n    #define append(buf, ...) sprintf(buf + strlen(buf), __VA_ARGS__)\n\n    char buf[4096] = {0};\n\n    append(buf, \"%d steps\\n\", steps);\n    for (int i = 0; map[i][0]; i++) {\n        for (const char *s = map[i]; *s; s++) {\n            const char *draw;\n            switch (*s) {\n            case EMPTY: draw = \"   \"; break;\n            case DEST:  draw = \" \u25cb \"; break;\n            case '&gt;':   draw = \" \u2192 \"; break;\n            case '&lt;':   draw = \" \u2190 \"; break;\n            case '^':   draw = \" \u2191 \"; break;\n            case 'v':   draw = \" \u2193 \"; break;\n            default:    draw = \"\u2587\u2587\u2587\"; break;\n            }\n            append(buf, draw);\n        }\n        append(buf, \"\\n\");\n    }\n    append(buf, \"\\n\");\n\n    write(STDOUT_FILENO, buf, strlen(buf));\n}\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8d8a\u5f80\u540e\u7684steps\u90fd\u662f\u4e00\u77ac\u95f4\u8f93\u51fa\u7ed3\u679c\u7684\uff0c\u4f8b\u59829 steps\u7684\u6240\u6709\u7ed3\u679c\u90fd\u662f\u540c\u65f6\u8f93\u51fa\u7684\u3002</p> <p></p> </li> </ol>"},{"location":"OS/%E6%8C%81%E4%B9%85%E5%8C%96/","title":"\u6301\u4e45\u5316","text":"<p> \u7ea6 3468 \u4e2a\u5b57  162 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 14 \u5206\u949f</p>"},{"location":"OS/%E6%8C%81%E4%B9%85%E5%8C%96/#lecture-25","title":"Lecture 25 \u5b58\u50a8\u8bbe\u5907\u539f\u7406","text":"<p>Take-away Messages</p> <p>\u65e0\u8bba\u662f\u5185\u5b58\u8fd8\u662f\u6301\u4e45\u5b58\u50a8\uff0c\u6700\u7ec8\u80dc\u51fa\u7684\u4ecd\u7136\u662f\u7535\u2014\u2014\u5b83\u7684\u5bc6\u5ea6\u548c\u901f\u5ea6\u662f\u5176\u4ed6\u4ecb\u8d28\u96be\u4ee5\u6bd4\u62df\u7684\u3002\u4f46\u540c\u65f6\u6211\u4eec\u4e5f\u770b\u5230\uff0cNAND Flash \u4f5c\u4e3a\u6301\u4e45\u5b58\u50a8\u65f6\u6709\u7740\u5de8\u5927\u7684\u7f3a\u9677\u2014\u2014\u5199\u5165\u5bff\u547d\u3002\u4f46\u6211\u4eec\u4e5f\u770b\u5230\u4e86\u5de5\u4e1a\u754c\u7adf\u7136\u6562\u4e8e\u8bd5\u5236\u8fd9\u6837\u8de8\u65f6\u4ee3\u7684\u4ea7\u54c1\uff0c\u5728\u5341\u591a\u5e74\u7684\u4e89\u8bae\u4e2d\u7ec8\u7a76\u6210\u4e3a\u4e86\u4eca\u5929\u5b58\u50a8\u7684\u4e3b\u89d2\u3002\u5982\u679c\u66f4\u5feb\u7684 non-volatile memory \u5230\u6765\u53c8\u9000\u573a\uff0c\u6211\u4eec\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u662f\u5426\u4f1a\u53d1\u751f\u7ffb\u5929\u8986\u5730\u7684\u53d8\u5316\uff1f</p> <p>\u6b22\u8fce\u5230\u5927\u5bb6\u9605\u8bfb\u8bfe\u5802\u4e2d\u7684\u4e00\u4e9b blogs\uff0c\u4ee5\u53ca\u81ea\u5df1\u6536\u96c6\u4e00\u4e9b\u6709\u8da3\u7684\u8d44\u6599\uff0c\u4f8b\u5982 How do rewriteable CDs work? \u548c Coding for SSDs\u3002\u6d77\u91cf\u7684\u9605\u8bfb\u5e2e\u52a9\u4f60\u5f62\u6210\u6b63\u786e\u7684 \u201c\u8ba1\u7b97\u673a\u79d1\u5b66\u4e16\u754c\u89c2\u201d\uff0c\u7528\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u65b9\u5f0f\u5904\u7406\u95ee\u9898\u3002</p> <ol> <li> <p>\u78c1\u5b58\u50a8</p> <ul> <li> <p>\u78c1\u5e26\uff1a\u4f5c\u4e3a\u5b58\u50a8\u8bbe\u5907\u7684\u5206\u6790</p> <p>\u6210\u672c\u4e0e\u98ce\u9669</p> \u4ef7\u683c \u5bb9\u91cf \u53ef\u9760\u6027 \u4f4e - \u5ec9\u4ef7\u6750\u6599 \u9ad8 \u5b58\u5728\u673a\u68b0\u90e8\u4ef6\u3001\u5b58\u5728\u4e22\u5931\u98ce\u9669 <p>\u8bfb\u5199\u6027\u80fd</p> \u987a\u5e8f\u8bfb\u5199 \u968f\u673a\u8bfb\u5199 \u52c9\u5f3a (\u9700\u8981\u7b49\u5f85\u5b9a\u4f4d) \u51e0\u4e4e\u5b8c\u5168\u4e0d\u884c <p>\u4eca\u5929\u7684\u5e94\u7528\u573a\u666f\uff1a\u51b7\u6570\u636e\u7684\u5b58\u6863\u548c\u5907\u4efd</p> </li> <li> <p>\u78c1\u76d8\uff1a\u4f5c\u4e3a\u5b58\u50a8\u8bbe\u5907\u7684\u5206\u6790</p> <p>\u6210\u672c\u4e0e\u98ce\u9669</p> \u4ef7\u683c \u5bb9\u91cf \u53ef\u9760\u6027 \u4f4e - \u9ad8\u5bc6\u5ea6\u4f4e\u6210\u672c \u9ad8 - 2.5D\uff0c\u4e0a\u4e07\u78c1\u9053 \u5b58\u5728\u673a\u68b0\u90e8\u4ef6 <p>\u8bfb\u5199\u6027\u80fd</p> \u987a\u5e8f\u8bfb\u5199 \u968f\u673a\u8bfb\u5199 \u8f83\u9ad8 \u52c9\u5f3a (\u9700\u8981\u7b49\u5f85\u5b9a\u4f4d) <p>\u4eca\u5929\u7684\u5e94\u7528\u573a\u666f\uff1a\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e3b\u529b\u6570\u636e\u5b58\u50a8\uff0c\u4f8b\u5982\u670d\u52a1\u5668\uff1a4 x 4TB HDD (RAID0)</p> </li> <li> <p>\u8f6f\u76d8\uff1a\u4f5c\u4e3a\u5b58\u50a8\u8bbe\u5907\u7684\u5206\u6790\uff08\u8f6f\u76d8\uff1a\u628a\u8bfb\u5199\u5934\u548c\u76d8\u7247\u5206\u5f00\u2014\u2014\u5b9e\u73b0\u6570\u636e\u79fb\u52a8\uff09</p> \u4ef7\u683c \u5bb9\u91cf \u53ef\u9760\u6027 \u4f4e - \u4f4e\u6210\u672c\u6750\u6599 \u9ad8 - \u88f8\u9732\u4ecb\u8d28\uff0c\u5bc6\u5ea6\u53d7\u9650 \u4f4e <p>\u8bfb\u5199\u6027\u80fd</p> \u987a\u5e8f\u8bfb\u5199 \u968f\u673a\u8bfb\u5199 \u4f4e \u4f4e <p>\u4eca\u5929\u7684\u5e94\u7528\u573a\u666f\uff1a\u5b58\u76d8\u6309\u94ae</p> </li> </ul> </li> <li> <p>\u5751\u5b58\u50a8</p> <ul> <li> <p>Compact Disk (CD, 1980)\uff1a\u5728\u53cd\u5c04\u5e73\u9762 (1) \u4e0a\u6316\u4e0a\u7c97\u7cd9\u7684\u5751 (0)\uff0c\u6fc0\u5149\u626b\u8fc7\u8868\u9762\uff0c\u5c31\u80fd\u8bfb\u51fa\u5751\u7684\u4fe1\u606f\u6765</p> \u4ef7\u683c \u5bb9\u91cf \u53ef\u9760\u6027 \u6781\u4f4e - \u201c\u538b\u76d8\u201d \u590d\u5236 \u9ad8 \u9ad8 - \u591a\u79cd\u4fdd\u62a4\u5c42 <p>\u8bfb\u5199\u6027\u80fd</p> \u987a\u5e8f\u8bfb\u5199 \u968f\u673a\u8bfb\u5199 \u4e00\u822c \u4f4e <p>\u4eca\u5929\u7684\u5e94\u7528\u573a\u666f\uff1a\u4f5c\u4e3a\u6570\u5b57\u6536\u85cf</p> <p>\u6700\u5927\u7684\u56f0\u96be\uff1a\u6316\u5751\u5bb9\u6613\u586b\u5751\u96be</p> <ul> <li>CD/R: \u7528\u6fc0\u5149\u5668\u70e7\u51fa\u4e00\u6b21\u6027\u7684\u5751 + append-only \u6570\u636e\u7ed3\u6784</li> <li>CD/RW: PCM (Phase-change Material)</li> </ul> </li> </ul> </li> <li> <p>\u7535\u5b58\u50a8</p> <ul> <li> <p>Flash Memory </p> \u4ef7\u683c \u5bb9\u91cf \u53ef\u9760\u6027 \u4f4e - \u5927\u89c4\u6a21\u96c6\u6210\u7535\u8def \u6781\u9ad8 \u9ad8 - \u968f\u4fbf\u6454 <p>\u8bfb\u5199\u6027\u80fd</p> \u987a\u5e8f\u8bfb\u5199 \u968f\u673a\u8bfb\u5199 \u6781\u9ad8 \u6781\u9ad8 </li> </ul> </li> </ol>"},{"location":"OS/%E6%8C%81%E4%B9%85%E5%8C%96/#lecture-26","title":"Lecture 26 \u8f93\u5165\u8f93\u51fa\u8bbe\u5907","text":"<p>Take-away Messages</p> <p>\u8f93\u5165/\u8f93\u51fa\u8bbe\u5907\u662f \u201c\u4e0e\u5904\u7406\u5668\u4ea4\u6362\u6570\u636e\u201d \u63a5\u53e3\u2014\u2014\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u8bbe\u5907\u53ef\u4ee5\u5b9e\u73b0\u5f97\u4efb\u610f\u590d\u6742\uff0c\u751a\u81f3\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u3002\u4ece\u6211\u4eec\u4eca\u5929\u7684\u6253\u5370\u673a\u3001SSD\u3001GPU\uff0c\u90fd\u9075\u5faa\u4e86\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u5728 CPU \u7684\u7edf\u4e00\u7ba1\u7406\u548c\u8c03\u5ea6\u4e0b\u5404\u81ea\u5b8c\u6210\u5404\u81ea\u7684\u529f\u80fd\u3002</p> <ol> <li> <p>\u5b9e\u73b0\u8f93\u5165/\u8f93\u51fa\uff1a\u4e00\u6839\u7ebf\u3001\u4e00\u6761\u6307\u4ee4 (\u6811\u8393\u6d3e\u4e0a\u5c31\u6709)</p> <ul> <li> <p>GPIO (General Purpose Input/Output)\uff08\u4e00\u6839\u53ef\u4ee5\u8bfb\u5199\u6570\u636e\u7684\u7ebf\uff09</p> <ul> <li>\u6781\u7b80\u7684\u6a21\u578b\uff1aMemory-mapped I/O \u76f4\u63a5\u8bfb\u53d6/\u5199\u5165\u7535\u5e73\u4fe1\u53f7</li> </ul> <p></p> </li> </ul> </li> <li> <p>I/O \u8bbe\u5907 = \u4e00\u4e2a\u80fd\u4e0e CPU \u4ea4\u6362\u6570\u636e\u7684\u63a5\u53e3/\u63a7\u5236\u5668/\u4e00\u7ec4\u5bc4\u5b58\u5668</p> <ul> <li>\u5c31\u662f \u201c\u51e0\u7ec4\u7ea6\u5b9a\u597d\u529f\u80fd\u7684\u7ebf\u201d (\u5bc4\u5b58\u5668)<ul> <li>\u901a\u8fc7\u63e1\u624b\u4fe1\u53f7\u4ece\u7ebf\u4e0a\u8bfb\u51fa/\u5199\u5165\u6570\u636e</li> </ul> </li> <li> <p>\u7ed9\u5bc4\u5b58\u5668 \u201c\u8d4b\u4e88\u201d \u4e00\u4e2a\u5185\u5b58\u5730\u5740 (Address Decoder)</p> <ul> <li>CPU \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6307\u4ee4 (in/out/MMIO) \u548c\u8bbe\u5907\u4ea4\u6362\u6570\u636e</li> <li>\u662f\u7684\uff0c\u5c31\u8fd9\u4e48\u7b80\u5355</li> </ul> <p></p> </li> <li> <p>CPU \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6307\u4ee4\u8bfb\u5199\u8fd9\u4e9b\u5bc4\u5b58\u5668</p> <ul> <li>Port-mapped I/O (PMIO)<ul> <li>I/O \u5730\u5740\u7a7a\u95f4\uff08port\uff09</li> <li>CPU \u76f4\u8fde I/O \u603b\u7ebf\uff0c\u901a\u8fc7 inb/outb \u6307\u4ee4\u8bfb\u5199</li> </ul> </li> <li>Memory-mapped I/O (MMIO)<ul> <li>\u76f4\u89c2\uff1a\u4f7f\u7528\u666e\u901a\u5185\u5b58\u8bfb\u5199\u6307\u4ee4\u5c31\u80fd\u8bbf\u95ee</li> <li>\u5e26\u6765\u4e86\u4e00\u4e9b\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7684\u9ebb\u70e6\uff1a\u7f16\u8bd1\u5668\u4f18\u5316\u3001\u7f13\u5b58\u3001\u4e71\u5e8f\u6267\u884c</li> </ul> </li> </ul> <p> Port-mapped I/O (PMIO) </p> <p> Memory-mapped I/O (MMIO) </p> </li> </ul> <p>a.c vs b.c: MMIO \u4e0b\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u8fd9\u4e2a\u5185\u5b58\u662f\u5916\u8bbe\u8fd8\u662f\u666e\u901a\u7684\u5185\u5b58\uff0c\u672c\u6765\u662f\u60f3\u63a7\u5236\u706f\u95ea\u70c1 1024 \u6b21\uff0c\u5374\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u6210\u4e86\u4e00\u6b21\u6307\u4ee4\uff0c\u7a0b\u5e8f\u5458\u5e94\u8be5\u4f7f\u7528 <code>volatile</code> \u5173\u952e\u5b57\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u4f18\u5316\uff0c\u5c31\u662f\u8981\u6267\u884c 1024 \u6b21\u3002</p> C<pre><code>#define ADDR 0X12345678\n\nvoid foo() {\n    for (int i = 0; i &lt; 1024; i++) {\n        // out(ADDR, 0);\n        (*(char *)ADDR) = 0;             // a.c\n        // (*(volatile char *)ADDR) = 0; // b.c\n    }\n}\n</code></pre> Bash<pre><code>linux$ gcc -c -O2 a.c\nlinux$ objdump -d a.o\n\na.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 &lt;foo&gt;:\n0:   f3 0f 1e fa             endbr64 \n4:   c6 04 25 78 56 34 12    movb   $0x0,0x12345678 # \u88ab\u4f18\u5316\u6210\u4e00\u6b21\u5199\u6307\u4ee4\nb:   00 \nc:   c3                      ret    \n\nlinux$ gcc -c -O2 b.c\nlinux$ objdump -d b.o\n\nb.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 &lt;foo&gt;:\n0:   f3 0f 1e fa             endbr64 \n4:   b8 00 04 00 00          mov    $0x400,%eax\n9:   0f 1f 80 00 00 00 00    nopl   0x0(%rax)\n10:   c7 04 25 78 56 34 12   movl   $0x0,0x12345678\n17:   00 00 00 00 \n1b:   83 e8 01               sub    $0x1,%eax\n1e:   75 f0                  jne    10 &lt;foo+0x10&gt;\n20:   c3                     ret    \nlinux$ \n</code></pre> <ul> <li> <p>\u4f8b\u5b50 (1): \u4e32\u53e3 (UART)\uff0c\u901a\u7528\u5f02\u6b65\u6536\u53d1\u4f20\u8f93\u5668\uff08Universal Asynchronous Receiver/Transmitter\uff09</p> <p>\u201cCOM1\u201d (Communication 1)</p> C<pre><code>#define COM1 0x3f8\n\nstatic int uart_init() {\noutb(COM1 + 2, 0);   // \u63a7\u5236\u5668\u76f8\u5173\u7ec6\u8282\noutb(COM1 + 3, 0x80);\noutb(COM1 + 0, 115200 / 9600);\n...\n}\n\nstatic void uart_tx(AM_UART_TX_T *send) {\noutb(COM1, send-&gt;data);\n}\n\nstatic void uart_rx(AM_UART_RX_T *recv) {\nrecv-&gt;data = (inb(COM1 + 5) &amp; 0x1) ? inb(COM1) : -1;\n}\n</code></pre> </li> <li> <p>\u4f8b\u5b50 (2): \u952e\u76d8\u63a7\u5236\u5668 IBM PC/AT 8042 PS/2 (Keyboard) Controller</p> <ul> <li>Port 0x60 (data), 0x64 (status/command)</li> <li>command = 0xED \u2192 LED \u706f\u63a7</li> <li>command = 0xF3 \u2192 \u8bbe\u7f6e\u91cd\u590d\u901f\u5ea6\u548c\u91cd\u590d\u5ef6\u8fdf</li> </ul> <p></p> </li> <li> <p>\u4f8b\u5b50 (3): \u78c1\u76d8\u63a7\u5236\u5668 ATA (Advanced Technology Attachment)</p> <ul> <li>IDE \u63a5\u53e3\u78c1\u76d8 (40pin data \u5f88 \u201c\u80a5\u201d \u7684\u6570\u636e\u7ebf + 4pin \u7535\u6e90)</li> <li>primary: 0x1f0 - 0x1f7; secondary: 0x170 - 0x177</li> </ul> C<pre><code>void readsect(void *dst, int sect) {\n    waitdisk();\n    out_byte(0x1f2, 1);          // sector count (1)\n    out_byte(0x1f3, sect);       // sector\n    out_byte(0x1f4, sect &gt;&gt; 8);  // cylinder (low)\n    out_byte(0x1f5, sect &gt;&gt; 16); // cylinder (high)\n    out_byte(0x1f6, (sect &gt;&gt; 24) | 0xe0); // drive\n    out_byte(0x1f7, 0x20);       // command (write)\n    waitdisk();\n    for (int i = 0; i &lt; SECTSIZE / 4; i ++)\n        ((uint32_t *)dst)[i] = in_long(0x1f0); // data\n}\n</code></pre> </li> <li> <p>\u4f8b\u5b50 (4): \u6253\u5370\u673a - \u6253\u5370\u673a\u5c06\u5b57\u8282\u6d41\u63cf\u8ff0\u7684\u6587\u5b57/\u56fe\u5f62\u6253\u5370\u5230\u7eb8\u5f20\u4e0a</p> <ul> <li>PostScript \u4e00\u79cd\u63cf\u8ff0\u9875\u9762\u5e03\u5c40\u7684 DSL (Page DL)</li> </ul> </li> </ul> </li> <li> <p>\u7ba1\u7406\u66f4\u591a\u7684 I/O \u8bbe\u5907\uff1a</p> <p>\uff081\uff09\u6211\u4eec\u4e0d\u60f3\u9020\u4e00\u53f0 \u201c\u8bbe\u5907\u5b9a\u6b7b\u201d \u7684\u8ba1\u7b97\u673a \u27a1\ufe0f \u603b\u7ebf\uff1a\u4e00\u4e2a\u7279\u6b8a\u7684 I/O \u8bbe\u5907</p> <ul> <li>\u63d0\u4f9b\u8bbe\u5907\u7684 \u201c\u865a\u62df\u5316\u201d\uff1a\u6ce8\u518c\u548c\u8f6c\u53d1<ul> <li>\u628a\u6536\u5230\u7684\u5730\u5740 (\u603b\u7ebf\u5730\u5740) \u548c\u6570\u636e\u8f6c\u53d1\u5230\u76f8\u5e94\u7684\u8bbe\u5907\u4e0a</li> <li>\u4f8b\u5b50: port I/O \u7684\u7aef\u53e3\u5c31\u662f\u603b\u7ebf\u4e0a\u7684\u5730\u5740<ul> <li>IBM PC \u7684 CPU \u5176\u5b9e\u53ea\u770b\u5230\u8fd9\u4e00\u4e2a I/O \u8bbe\u5907</li> </ul> </li> </ul> </li> <li>\u8fd9\u6837 CPU \u53ea\u9700\u8981\u76f4\u8fde\u4e00\u4e2a\u603b\u7ebf\u5c31\u884c\u4e86\uff01<ul> <li>\u4eca\u5929 PCI \u603b\u7ebf\u80a9\u8d1f\u4e86\u8fd9\u4e2a\u4efb\u52a1<ul> <li>\u603b\u7ebf\u53ef\u4ee5\u6865\u63a5\u5176\u4ed6\u603b\u7ebf (\u4f8b\u5982 PCI \u2192 USB)</li> </ul> </li> <li><code>lspci -tv</code> \u548c <code>lsusb -tv</code>: \u67e5\u770b\u7cfb\u7edf\u4e2d\u603b\u7ebf\u4e0a\u7684\u8bbe\u5907<ul> <li>\u6982\u5ff5\u7b80\u5355\uff0c\u5b9e\u9645\u975e\u5e38\u590d\u6742\u2026\u2026</li> <li>\u7535\u6c14\u7279\u6027\u3001burst \u4f20\u8f93\u3001\u4e2d\u65ad\u3001Plug and Play</li> </ul> </li> </ul> </li> </ul> <p>(2) CPU\uff1a\u53ea\u6709\u4e00\u6839\u4e2d\u65ad\u7ebf \u27a1\ufe0f \u6211\u4eec\u9700\u8981\u4e00\u4e2a \u201c\u4ef2\u88c1\u5668\u201d - \u4e2d\u65ad\u63a7\u5236\u5668</p> <ul> <li>\u6536\u96c6\u5404\u4e2a\u8bbe\u5907\u4e2d\u65ad\uff0c\u5e76\u9009\u62e9\u4e00\u4e2a\u53d1\u9001\u7ed9 CPU\uff0c\u5e76\u4e14\u5b8c\u6210\u5bf9\u8bbe\u5907\u7684\u5e94\u7b54</li> <li>\u4f8b\u5b50<ul> <li>Intel 8259 PIC<ul> <li>programmable interrupt controller</li> <li>\u53ef\u4ee5\u8bbe\u7f6e\u4e2d\u65ad\u5c4f\u853d\u3001\u4e2d\u65ad\u89e6\u53d1\u7b49\u2026\u2026</li> </ul> </li> <li>APIC (Advanced PIC)<ul> <li>local APIC: \u4e2d\u65ad\u5411\u91cf\u8868, IPI, \u65f6\u949f, \u2026\u2026</li> <li>I/O APIC: \u5176\u4ed6 I/O \u8bbe\u5907</li> </ul> </li> </ul> </li> </ul> <p>(3) \u89e3\u653e CPU \u7b97\u529b \u27a1\ufe0f Direct Memory Access (DMA)</p> <ul> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u5199\u5165 1 GB \u7684\u6570\u636e\u5230\u78c1\u76d8</p> <ul> <li>\u5373\u4fbf\u78c1\u76d8\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u4f9d\u7136\u9700\u8981\u975e\u5e38\u6d6a\u8d39\u65f6\u95f4\u7684\u5faa\u73af</li> <li>out \u6307\u4ee4\u5199\u5165\u7684\u662f\u8bbe\u5907\u7f13\u51b2\u533a\uff0c\u9700\u8981\u53bb\u603b\u7ebf\u4e0a\u7ed5\u4e00\u5708<ul> <li>cache disable; store \u5176\u5b9e\u5f88\u6162\u7684</li> </ul> </li> </ul> C<pre><code>for (int i = 0; i &lt; 1 GB / 4; i++) {\n    outl(PORT, ((u32 *)buf)[i]);\n}\n</code></pre> </li> <li> <p>\u52a0\u4e00\u4e2a\u901a\u7528\u5904\u7406\u5668\u592a\u6d6a\u8d39\uff0c\u4e0d\u5982\u52a0\u4e00\u4e2a\u7b80\u5355\u7684</p> <ul> <li>DMA: \u53ea\u80fd\u6267\u884c <code>memcpy(ATA0, buf, length);</code> \u7684\u5904\u7406\u5668</li> <li>\u652f\u6301\u7684\u51e0\u79cd\u7c7b\u578b\u7684 memcpy<ul> <li>memory \u2192 memory</li> <li>memory \u2192 device (register)</li> <li>device (register) \u2192 memory<ul> <li>\u5b9e\u9645\u5b9e\u73b0\uff1a\u76f4\u63a5\u628a DMA \u63a7\u5236\u5668\u8fde\u63a5\u5728\u603b\u7ebf\u548c\u5185\u5b58\u4e0a</li> <li>Intel 8237A</li> </ul> </li> </ul> </li> <li>\u4eca\u5929\uff1aPCI \u603b\u7ebf\u652f\u6301 DMA<ul> <li><code>sudo cat /proc/iomem</code></li> </ul> </li> </ul> </li> </ul> </li> <li> <p>\u586b\u8865 CPU \u7684\u7b97\u529b\u7a7a\u767d\uff1aGPU \u548c\u52a0\u901f\u5668</p> <ul> <li>\u8ba1\u7b97\u673a\u7cfb\u7edf\u91cc\u5145\u6ee1\u4e86 \u201cCPU\u201d<ul> <li>CPU: \u5927\u6838 + \u5c0f\u6838 + \u8d85\u5c0f\u6838</li> <li>DMA: \u6267\u884c memcpy() \u7684 CPU</li> <li>\u6253\u5370\u673a\uff1a\u89e3\u6790\u6267\u884c PCL/PostScript \u7684 CPU</li> <li>\u7f51\u5361\uff1a\u5206\u62e3\u4ee5\u592a\u7f51 packet (frame) \u7684 CPU<ul> <li>\u5b83\u4eec\u90fd\u53d7\u5230 CPU \u7684\u7edf\u4e00\u8c03\u914d</li> </ul> </li> </ul> </li> <li>GPU: \u5728\u7cfb\u7edf\u91cc\u52a0\u4e00\u4e2a\u4e13\u95e8\u753b\u56fe\u7684 CPU\uff0c\u4e0d\u518d\u9700\u8981\u90a3\u4e48\u591a\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5faa\u73af\u53ef\u4ee5\u76f4\u63a5\u7528\u8ba1\u6570\u5668\u5b9e\u73b0</li> </ul> C<pre><code>for (int x = 0; x &lt; W; x++)\n    for (int y = 0; y &lt;= H; y++)\n        for (int i = 0; i &lt; n; i++)\n            if (intersects(sprites[i], x, y)) {\n                fb[x][y] = sprites[i].pixel(x, y);\n            }\n</code></pre> </li> </ol> <p>Take-away Messages</p> <p>\u4efb\u4f55\u5b9e\u73b0\u4e86 struct file_operations \u7684\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u8c61\u53ef\u4ee5\u90fd\u662f \u201c\u6587\u4ef6\u201d\uff1a\u53ef\u4ee5\u662f /dev/null \u8fd9\u6837\u7684\u865a\u62df\u8bbe\u5907\uff0c\u53ef\u4ee5\u662f /proc/stat \u4e2d\u7684\u865a\u62df \u201c\u6587\u4ef6\u201d\uff0c\u53ef\u4ee5\u662f\u4e00\u4e2a\u7ba1\u9053\uff0c\u4e5f\u53ef\u4ee5\u662f\u6587\u4ef6\u7cfb\u7edf\u4e2d\u666e\u901a\u7684\u5b57\u8282\u5e8f\u5217\u3002</p> <ol> <li> <p>\u5e94\u7528\u7a0b\u5e8f\uff1a\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\uff08open, read, write, mmap, ...\uff09\u8bbf\u95ee\u6587\u4ef6\uff0c\u6c42\u8bc1\uff1a<code>strace readelf -h /bin/ls</code>\u3002</p> <ul> <li>\u6587\u4ef6\u662f \u201c\u865a\u62df\u78c1\u76d8\u201d\uff0c\u628a\u78c1\u76d8\u7684\u4e00\u90e8\u5206\u6620\u5c04\u5230\u5730\u5740\u7a7a\u95f4\uff0c\u518d\u81ea\u7136\u4e0d\u8fc7\u4e86</li> <li>\u6620\u5c04\u7684\u957f\u5ea6\u8d85\u8fc7\u6587\u4ef6\u5927\u5c0f\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u27a1\ufe0f SIGBUS</li> </ul> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    const char *filepath = \"example.txt\";\n    int fd = open(filepath, O_RDWR);\n    if (fd == -1) {\n        perror(\"open\");\n        exit(EXIT_FAILURE);\n    }\n\n    struct stat sb;\n    if (fstat(fd, &amp;sb) == -1) {\n        perror(\"fstat\");\n        close(fd);\n        exit(EXIT_FAILURE);\n    }\n\n    size_t length = sb.st_size + 4096;\n    void *addr = mmap(NULL, length, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);\n    if (addr == MAP_FAILED) {\n        perror(\"mmap\");\n        close(fd);\n        exit(EXIT_FAILURE);\n    }\n\n    // Overwrite this file.\n    char *data = (char *)addr;\n    for (size_t i = sb.st_size; i &lt; length; ++i) {\n        printf(\"Write byte %zu\\n\", i);\n        fflush(stdout);\n        data[i] = 'A';\n    }\n\n    if (munmap(addr, length) == -1) {\n        perror(\"munmap\");\n    }\n    close(fd);\n\n    return 0;\n}\n</code></pre> Bash<pre><code>yes | head -c 4000 &gt; example.txt\ngcc -Wall -g overwrite.c -o overwrite\n./overwrite\nWrite byte 4000\n...\nWrite byte 4095\nWrite byte 4096\nfish: Job 1, './overwrite' terminated by signal SIGBUS (Misaligned address error)\n</code></pre> </li> <li> <p>\u5b9e\u73b0\u6587\u4ef6\uff1a\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u4ee5\u8bbf\u95ee \u201c\u4e00\u5207\u201d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\u27a1\ufe0f \u5982\u4f60\u6240\u6599\uff1a\u4e00\u4e2a switch-case</p> C<pre><code>if (f-&gt;type == FD_PIPE)\n{\n    r = piperead(f-&gt;pipe, addr, n);\n} \nelse if (f-&gt;type == FD_DEVICE) \n{\n    if (f-&gt;major &lt; 0 || f-&gt;major &gt;= NDEV || !devsw[f-&gt;major].read)\n        return -1;\n    r = devsw[f-&gt;major].read(1, addr, n);\n} \nelse if (f-&gt;type == FD_INODE)\n{\n    ilock(f-&gt;ip);\n    if ((r = readi(f-&gt;ip, 1, addr, f-&gt;off, n)) &gt; 0)\n        f-&gt;off += r;\n    iunlock(f-&gt;ip);\n} \nelse \n{\n    panic(\"fileread\");\n}\n</code></pre> </li> <li> <p>\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\uff1a\u4e00\u4e2a <code>struct file_operations</code> \u7684\u5b9e\u73b0\uff0c\u628a\u7cfb\u7edf\u8c03\u7528 \u201c\u7ffb\u8bd1\u201d \u6210\u8bbe\u5907\u80fd\u542c\u61c2\u7684\u6570\u636e\uff0c\u5c31\u662f\u4e00\u6bb5\u666e\u901a\u7684\u5185\u6838\u4ee3\u7801</p> <ul> <li>/dev/null \u7684\u5b9e\u73b0</li> <li>/proc/stat \u7684\u5b9e\u73b0</li> </ul> </li> <li> <p>ioctl\uff1a\u201c\u975e\u6570\u636e\u201d \u7684\u8bbe\u5907\u529f\u80fd\u51e0\u4e4e\u5168\u90e8\u4f9d\u8d56 ioctl\uff0c\u201cArguments, returns, and semantics of ioctl() vary according to the device driver in question\u201d</p> </li> </ol>"},{"location":"OS/%E6%8C%81%E4%B9%85%E5%8C%96/#lecture-27","title":"Lecture 27 \u6587\u4ef6\u548c\u8bbe\u5907\u9a71\u52a8","text":""},{"location":"OS/%E6%8C%81%E4%B9%85%E5%8C%96/#lecture-28-fat-unix","title":"Lecture 28 FAT \u548c UNIX \u6587\u4ef6\u7cfb\u7edf","text":"<p>Take-away Messages</p> <p>\u628a\u6587\u4ef6\u7cfb\u7edf\u7406\u89e3\u6210\u4e00\u4e2a \u201c\u6570\u636e\u7ed3\u6784\u201d\uff0c\u5c31\u4e0d\u96be\u5206\u6790\u5176\u4e2d\u7684\u91cd\u70b9\u548c\u5b9e\u73b0\u8981\u70b9\u2014\u2014\u6211\u4eec\u603b\u662f\u628a\u6570\u636e\u6309\u7167\u5c40\u90e8\u6027\u7ec4\u7ec7\u8d77\u6765\uff0c\u65e0\u8bba\u662f FAT \u8fd8\u662f bitmap/inode \u7684\u8bbe\u8ba1\uff0c\u90fd\u5229\u7528\u4e86\u8fd9\u4e00\u70b9\u3002\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u8bbe\u8ba1\u662f \u201c\u76ee\u5f55\u4e5f\u662f\u6587\u4ef6\u201d\u2014\u2014\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u5c06\u76ee\u5f55\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u4f5c\u51fa\u89e3\u8bfb\uff0c\u4ece\u800c\u89e3\u6790\u51fa\u5176\u4e2d\u7684\u76ee\u5f55\u7ed3\u6784\u3002</p> <ol> <li> <p>\u6587\u4ef6\u7cfb\u7edf\uff1a\u6587\u4ef6 = <code>struct file_operations</code></p> <ul> <li>\u6570\u636e\u6587\u4ef6\uff1ahello.c, a.out, ...<ul> <li>\u865a\u62df\u7684\u78c1\u76d8</li> <li><code>vector&lt;char&gt;</code></li> </ul> </li> <li>\u8bbe\u5907\u9a71\u52a8<ul> <li>null, nuke0, ...</li> </ul> </li> <li>\u865a\u62df\u6587\u4ef6<ul> <li>\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4, ...</li> </ul> </li> </ul> </li> <li> <p>\u65b0\u9700\u6c42\uff1a\u600e\u4e48\u7ba1\u7406\u7cfb\u7edf\u4e2d\u4f17\u591a\u7684\u6587\u4ef6\uff1f\u27a1\ufe0f \u4fe1\u606f\u7684\u5c40\u90e8\u6027\uff1a\u5c06\u865a\u62df\u78c1\u76d8 (\u6587\u4ef6) \u7ec4\u7ec7\u6210\u6811\u72b6\u5c42\u6b21\u7ed3\u6784\uff0c\u903b\u8f91\u76f8\u5173\u7684\u6570\u636e\u5b58\u653e\u5728\u76f8\u8fd1\u7684\u76ee\u5f55</p> <ul> <li>UNIX \u7684\u8bbe\u8ba1\uff1a\u76ee\u5f55\u6811\u7684\u62fc\u63a5</li> <li>mount: \u5c06\u4e00\u4e2a\u76ee\u5f55\u89e3\u6790\u4e3a\u53e6\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u6839</li> <li><code>mount(source, target, filesystemtype, mountflags, data);</code></li> <li>\u518d\u770b \u201c\u6700\u5c0f Linux\u201d<ul> <li>\u521d\u59cb\u65f6\u53ea\u6709 /dev/console \u548c\u51e0\u4e2a\u6587\u4ef6</li> <li>/proc, /sys, \u751a\u81f3 /tmp \u90fd\u6ca1\u6709<ul> <li>\u7b54\u6848\uff1a\u5b83\u4eec\u90fd\u662f mount \u7cfb\u7edf\u8c03\u7528\u521b\u5efa\u51fa\u6765\u7684</li> </ul> </li> </ul> </li> <li>UNIX \u4e00\u8d2f\u7684\u8bbe\u8ba1\u54f2\u5b66\uff1a\u7075\u6d3b<ul> <li>Linux \u5b89\u88c5\u65f6\u7684 \u201cmount point\u201d</li> <li><code>/</code>, <code>/home</code>, <code>/var</code> \u53ef\u4ee5\u662f\u72ec\u7acb\u7684\u78c1\u76d8\u8bbe\u5907</li> </ul> </li> </ul> </li> <li> <p>Filesystem Hierarchy Standard: FHS enables software and user to predict the location of installed files and directories.</p> <p></p> </li> <li> <p>\u6587\u4ef6\u7cfb\u7edf API: \u76ee\u5f55\u7ba1\u7406</p> <p>mkdir</p> <ul> <li>\u521b\u5efa\u76ee\u5f55</li> </ul> <p>rmdir</p> <ul> <li>\u5220\u9664\u4e00\u4e2a\u7a7a\u76ee\u5f55</li> <li>\u6ca1\u6709 \u201c\u9012\u5f52\u5220\u9664\u201d \u7684\u7cfb\u7edf\u8c03\u7528<ul> <li>rm -rf \u4f1a\u904d\u5386\u76ee\u5f55\uff0c\u9010\u4e2a\u5220\u9664 (\u8bd5\u8bd5 strace)</li> </ul> </li> </ul> <p>getdents</p> <ul> <li>\u8fd4\u56de count \u4e2a\u76ee\u5f55\u9879 (ls, find, tree \u90fd\u4f7f\u7528\u8fd9\u4e2a)<ul> <li>\u66f4\u53cb\u597d\u7684\u65b9\u5f0f\uff1aglobbing</li> </ul> </li> </ul> </li> <li> <p>\u786c (hard) \u94fe\u63a5</p> <p>\u9700\u6c42\uff1a\u7cfb\u7edf\u4e2d\u53ef\u80fd\u6709\u540c\u4e00\u4e2a\u8fd0\u884c\u5e93\u7684\u591a\u4e2a\u7248\u672c</p> <ul> <li>libc-2.27.so, libc-2.26.so, ...</li> <li>\u8fd8\u9700\u8981\u4e00\u4e2a \u201c\u5f53\u524d\u7248\u672c\u7684 libc\u201d<ul> <li>\u7a0b\u5e8f\u9700\u8981\u94fe\u63a5 \u201clibc.so.6\u201d\uff0c\u80fd\u5426\u907f\u514d\u6587\u4ef6\u7684\u4e00\u4efd\u62f7\u8d1d\uff1f</li> </ul> </li> </ul> <p>(\u786c) \u94fe\u63a5\uff1a\u5141\u8bb8\u4e00\u4e2a\u6587\u4ef6\u88ab\u591a\u4e2a\u76ee\u5f55\u5f15\u7528</p> <ul> <li>\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u7684\u7279\u6027 (ls -i \u67e5\u770b)<ul> <li>\u4e0d\u80fd\u94fe\u63a5\u76ee\u5f55\u3001\u4e0d\u80fd\u8de8\u6587\u4ef6\u7cfb\u7edf</li> <li>\u5220\u9664\u6587\u4ef6\u7684\u7cfb\u7edf\u8c03\u7528\u79f0\u4e3a \u201cunlink\u201d (refcount--)</li> </ul> </li> </ul> </li> <li> <p>\u8f6f (symbolic) \u94fe\u63a5</p> <p>\u8f6f\u94fe\u63a5\uff1a\u5728\u6587\u4ef6\u91cc\u5b58\u50a8\u4e00\u4e2a \u201c\u8df3\u8f6c\u63d0\u793a\u201d</p> <ul> <li>\u8f6f\u94fe\u63a5\u4e5f\u662f\u4e00\u4e2a\u6587\u4ef6<ul> <li>\u5f53\u5f15\u7528\u8fd9\u4e2a\u6587\u4ef6\u65f6\uff0c\u53bb\u627e\u53e6\u4e00\u4e2a\u6587\u4ef6</li> <li>\u53e6\u4e00\u4e2a\u6587\u4ef6\u7684\u7edd\u5bf9/\u76f8\u5bf9\u8def\u5f84\u4ee5\u6587\u672c\u5f62\u5f0f\u5b58\u50a8\u5728\u6587\u4ef6\u91cc</li> <li>\u53ef\u4ee5\u8de8\u6587\u4ef6\u7cfb\u7edf\u3001\u53ef\u4ee5\u94fe\u63a5\u76ee\u5f55\u3001\u2026\u2026</li> </ul> </li> </ul> <p>\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u9650\u5236</p> <ul> <li>\u7c7b\u4f3c \u201c\u5feb\u6377\u65b9\u5f0f\u201d<ul> <li>\u94fe\u63a5\u6307\u5411\u7684\u4f4d\u7f6e\u4e0d\u5b58\u5728\u4e5f\u6ca1\u5173\u7cfb</li> <li>(\u4e5f\u8bb8\u4e0b\u6b21\u5c31\u5b58\u5728\u4e86)</li> </ul> </li> </ul> </li> <li> <p>\u6587\u4ef6\u7cfb\u7edf\uff1a\u5b9e\u73b0</p> <p>\u5982\u679c\u662f\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\uff1f</p> <ul> <li>\u501f\u52a9 RAM \u81ea\u7531\u5e03\u5c40\u76ee\u5f55\u548c\u6587\u4ef6\uff1a\u6587\u4ef6\u7cfb\u7edf\u5c31\u662f\u4e00\u4e2a Abstract DataType (ADT)</li> </ul> C++<pre><code>class FSObject {\n};\n\nclass File: FSObject {\n    std::vector&lt;char&gt; content;\n};\n\nclass Directory: FSObject {\n    std::map&lt;std::string,FSObject*&gt; children;\n};\n</code></pre> <p>\u56de\u5230\u300a\u64cd\u4f5c\u7cfb\u7edf\u300b\u8bfe\uff1a\u5bf9\u4e0d\u8d77\uff0c\u6ca1\u6709 Random Access Memory</p> <ul> <li>\u6211\u4eec\u53ea\u6709 block device</li> <li>\u4e24\u4e2a API<ul> <li><code>bread(int bid, struct block *b);</code></li> <li><code>bwrite(int bid, struct block *b);</code></li> </ul> </li> </ul> <p>\u5b9e\u73b0\uff1a</p> <ul> <li>read, write, ftruncate, ...</li> <li>mkdir, rmdir, readdir, link, unlink, ...<ul> <li>\u7528 bread/bwrite \u6a21\u62df RAM \u2192 \u4e25\u91cd\u7684\u8bfb/\u5199\u653e\u5927</li> <li>\u6211\u4eec\u9700\u8981\u66f4\u9002\u5408\u78c1\u76d8\u7684\u6570\u636e\u7ed3\u6784</li> </ul> </li> </ul> </li> <li> <p>FAT (File Allocation Table) \u548c UNIX \u6587\u4ef6\u7cfb\u7edf</p> <p>\u7528\u94fe\u8868\u5b58\u50a8\u6570\u636e\uff1a\u4e24\u79cd\u8bbe\u8ba1</p> <p>(1) \u5728\u6bcf\u4e2a\u6570\u636e\u5757\u540e\u653e\u7f6e\u6307\u9488 \u274c</p> <ul> <li>\u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\u3001\u65e0\u987b\u5355\u72ec\u5f00\u8f9f\u5b58\u50a8\u7a7a\u95f4</li> <li>\u7f3a\u70b9\uff1a\u6570\u636e\u7684\u5927\u5c0f\u4e0d\u662f \\(2^k\\) ; \u5355\u7eaf\u7684 lseek \u9700\u8981\u8bfb\u6574\u5757\u6570\u636e</li> </ul> <p>(2) \u5c06\u6307\u9488\u96c6\u4e2d\u5b58\u653e\u5728\u6587\u4ef6\u7cfb\u7edf\u7684\u67d0\u4e2a\u533a\u57df \u2705</p> <ul> <li>\u4f18\u70b9\uff1a\u5c40\u90e8\u6027\u597d\uff1blseek \u66f4\u5feb</li> <li>\u7f3a\u70b9\uff1a\u96c6\u4e2d\u5b58\u653e\u7684\u6570\u636e\u635f\u574f\u5c06\u5bfc\u81f4\u6570\u636e\u4e22\u5931</li> </ul> <p>\u54ea\u79cd\u65b9\u5f0f\u7684\u7f3a\u9677\u662f\u81f4\u547d\u3001\u96be\u4ee5\u89e3\u51b3\u7684\uff1f\u27a1\ufe0f (1)\u96be\u4ee5\u89e3\u51b3\uff0c\u5bf9\u4e8e(2)\u96c6\u4e2d\u5b58\u50a8\u7684\u6307\u9488\u5bb9\u6613\u635f\u574f\uff1f\u5b58 n \u4efd\u5c31\u884c\uff01</p> <p>FAT-12/16/32 (FAT entry\uff0c\u5373 \u201cnext \u6307\u9488\u201d \u7684\u5927\u5c0f)</p> <p></p> </li> <li> <p>\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\uff1a\u6587\u4ef6\u7cfb\u7edf\u6062\u590d</p> <ul> <li>\u5feb\u901f\u683c\u5f0f\u5316 = FAT \u8868\u4e22\u5931<ul> <li>\u6240\u6709\u7684\u6587\u4ef6\u5185\u5bb9 (\u5305\u62ec\u76ee\u5f55\u6587\u4ef6) \u90fd\u8fd8\u5728</li> <li>\u53ea\u662f\u5728\u6570\u636e\u7ed3\u6784\u773c\u91cc\u770b\u8d77\u6765\u90fd\u662f \u201cfree block\u201d</li> </ul> </li> <li>\u731c\u51fa\u6587\u4ef6\u7cfb\u7edf\u7684\u53c2\u6570 (SecPerClus, BytsPerSec, ...)\uff0c\u6062\u590d next \u5173\u7cfb</li> </ul> </li> <li> <p>FAT: \u6027\u80fd\u4e0e\u53ef\u9760\u6027</p> <p>\u6027\u80fd</p> <ul> <li>\u2705 \u5c0f\u6587\u4ef6\u7b80\u76f4\u592a\u5408\u9002\u4e86</li> <li>\u274c \u4f46\u5927\u6587\u4ef6\u7684\u968f\u673a\u8bbf\u95ee\u5c31\u4e0d\u884c\u4e86<ul> <li>4 GB \u7684\u6587\u4ef6\u8df3\u5230\u672b\u5c3e (4 KB cluster) \u6709 \\(2^{20}\\) \u6b21 next \u64cd\u4f5c</li> <li>\u7f13\u5b58\u80fd\u90e8\u5206\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</li> </ul> </li> <li>\u5728 FAT \u65f6\u4ee3\uff0c\u78c1\u76d8\u8fde\u7eed\u8bbf\u95ee\u6027\u80fd\u66f4\u4f73<ul> <li>\u4f7f\u7528\u65f6\u95f4\u4e45\u7684\u78c1\u76d8\u4f1a\u4ea7\u751f\u788e\u7247 (fragmentation)</li> <li>malloc \u4e5f\u4f1a\u4ea7\u751f\u788e\u7247\uff0c\u4e0d\u8fc7\u5bf9\u6027\u80fd\u5f71\u54cd\u4e0d\u592a\u5927</li> </ul> </li> </ul> <p>\u53ef\u9760\u6027</p> <ul> <li>\u7ef4\u62a4\u82e5\u5e72\u4e2a FAT \u7684\u526f\u672c\u9632\u6b62\u5143\u6570\u636e\u635f\u574f (\u989d\u5916\u7684\u5f00\u9500)</li> </ul> </li> <li> <p>ext2/UNIX \u6587\u4ef6\u7cfb\u7edf: Second Extended File System</p> <p>\u6309\u5bf9\u8c61\u65b9\u5f0f\u96c6\u4e2d\u5b58\u50a8\u6587\u4ef6/\u76ee\u5f55\u5143\u6570\u636e</p> <ul> <li>\u589e\u5f3a\u5c40\u90e8\u6027 (\u66f4\u6613\u4e8e\u7f13\u5b58)</li> <li>\u652f\u6301\u94fe\u63a5</li> </ul> <p>\u4e3a\u5927\u5c0f\u6587\u4ef6\u533a\u5206 fast/slow path</p> <ul> <li>\u5c0f\u7684\u65f6\u5019\u5e94\u8be5\u7528\u6570\u7ec4<ul> <li>\u8fde\u94fe\u8868\u904d\u5386\u90fd\u7701\u4e86</li> </ul> </li> <li>\u5927\u7684\u65f6\u5019\u5e94\u8be5\u7528\u6811 (B-Tree; Radix-Tree; ...)<ul> <li>\u5feb\u901f\u7684\u968f\u673a\u8bbf\u95ee</li> </ul> </li> </ul> </li> </ol>"},{"location":"OS/%E6%8C%81%E4%B9%85%E5%8C%96/#lecture-29","title":"Lecture 29 \u6301\u4e45\u6570\u636e\u7684\u53ef\u9760\u6027","text":"<p>Take-away Messages</p> <p>\u5b58\u50a8\u7cfb\u7edf\u652f\u6491\u4e86\u5f53\u4eca\u7684\u4e92\u8054\u7f51\u5de5\u4e1a\u2014\u2014\u6bcf\u4e2a SSD \u90fd\u662f \u201c\u5957\u5a03\u201d \u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\uff1b\u5b83\u4eec\u53c8\u7ec4\u6210\u4e86\u5927\u89c4\u6a21\u5b58\u50a8\u7f51\u7edc\uff0c\u6784\u6210\u4e86\u6211\u4eec\u4eca\u5929\u7684\u6570\u5b57\u4e16\u754c\u3002\u5b9e\u73b0\u4f4e\u6210\u672c\u3001\u9ad8\u6027\u80fd\u3001\u9ad8\u53ef\u9760\u7684\u5b58\u50a8\u5e76\u4e0d\u662f\u4e00\u4e2a\u5341\u5206\u7b80\u5355\u7684\u95ee\u9898\uff0c\u8fd9\u4e5f\u662f\u8ba1\u7b97\u673a\u4ea7\u4e1a\u8ba9\u6211\u4eec\u611f\u5230\u6fc0\u52a8\u7684\u539f\u56e0\u3002</p> <ol> <li> <p>\u5b9e\u73b0\u53ef\u9760\u7684\u78c1\u76d8\uff1aRAID\uff0c\u5b58\u50a8\u8bbe\u5907\u7684\u865a\u62df\u5316</p> <ul> <li>Redundant Array of Inexpensive (Independent) Disks (RAID)</li> <li>\u628a\u591a\u4e2a (\u4e0d\u53ef\u9760\u7684) \u78c1\u76d8\u865a\u62df\u6210\u4e00\u5757\u975e\u5e38\u53ef\u9760\u4e14\u6027\u80fd\u6781\u9ad8\u7684\u865a\u62df\u78c1\u76d8</li> <li>RAID (\u865a\u62df\u5316) = \u865a\u62df\u5757\u53f7\u5230 (\u78c1\u76d8, \u5757\u53f7) \u7684 \u201c\u6620\u5c04\u201d</li> <li>\u865a\u62df\u78c1\u76d8\u5757\u53ef\u4ee5\u5b58\u50a8\u5728\u4efb\u4f55\u7269\u7406\u78c1\u76d8\u4e0a<ul> <li>\u7269\u7406\u78c1\u76d8\u8bfb\u5199\u53ef\u4ee5\u5e76\u884c</li> <li>\u5b58\u50a8 &gt; 1 \u4efd\u5373\u53ef\u5b9e\u73b0\u5bb9\u9519</li> </ul> </li> <li>RAID-5: Rotating Parity\uff0c\u4f7f Parity \u5747\u5300\u5206\u5e03\u5728\u5404\u4e2a\u78c1\u76d8</li> </ul> <p></p> </li> <li> <p>\u5b9e\u73b0\u53ef\u9760\u7684\u6587\u4ef6\u7cfb\u7edf\uff1a\u5d29\u6e83\u4e00\u81f4\u6027 (Crash Consistency). </p> <p>Crash Consistency</p> <p>Move the file system from one consistent state (e.g., before the file got appended to) to another atomically (e.g., after the inode, bitmap, and new data block have been written to disk).</p> <ul> <li>File System Checking (FSCK)\uff1a\u6839\u636e\u78c1\u76d8\u4e0a\u5df2\u6709\u7684\u4fe1\u606f\uff0c\u6062\u590d\u51fa \u201c\u6700\u53ef\u80fd\u201d \u7684\u6570\u636e\u7ed3\u6784</li> <li>Jouraling\uff1a\u5148\u7528 append-only \u8bb0\u5f55\u65e5\u5fd7\uff0c\u7b49\u5f85\u843d\u76d8\uff0c\u518d\u66f4\u65b0\u6570\u636e\u7ed3\u6784</li> </ul> </li> </ol>"},{"location":"OS/%E7%BB%AA%E8%AE%BA/","title":"\u7eea\u8bba","text":"<p> \u7ea6 2038 \u4e2a\u5b57  323 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 11 \u5206\u949f</p>"},{"location":"OS/%E7%BB%AA%E8%AE%BA/#_2","title":"\u8d44\u6599","text":"<ul> <li>Yanyan's wiki</li> <li>\u8bfe\u7a0b\u7f51\u7ad9</li> <li>\u8bfe\u7a0b\u89c6\u9891</li> <li>\u6559\u6750 OSTEP</li> </ul>"},{"location":"OS/%E7%BB%AA%E8%AE%BA/#_3","title":"\u64cd\u4f5c\u7cfb\u7edf\u662f\u4ec0\u4e48","text":"<ol> <li>\u5728\u5e94\u7528\u7a0b\u5e8f\u773c\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf = \u5bf9\u8c61 + API\u3002\u4ece\u5e94\u7528\u7a0b\u5e8f\u7684\u89c6\u89d2\u770b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u5bf9\u8c61 (\u8fdb\u7a0b/\u7ebf\u7a0b\u3001\u5730\u5740\u7a7a\u95f4\u3001\u6587\u4ef6\u3001\u8bbe\u5907\u2026\u2026) \u548c\u64cd\u7eb5\u5b83\u4eec\u7684 API (\u7cfb\u7edf\u8c03\u7528)\u3002</li> <li>\u5728\u786c\u4ef6\u773c\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf = C \u7a0b\u5e8f\u3002\u4ece\u786c\u4ef6\u7684\u89c6\u89d2\u770b\uff0c\u64cd\u4f5c\u7cfb\u7edf\u662f\u4e00\u4e2a\u62e5\u6709\u8bbf\u95ee\u5168\u90e8\u786c\u4ef6\u529f\u80fd\u7684\u7a0b\u5e8f\u3002\u786c\u4ef6\u4f1a\u5e2e\u52a9\u64cd\u4f5c\u7cfb\u7edf\u5b8c\u6210\u6700\u521d\u7684\u521d\u59cb\u5316\u548c\u52a0\u8f7d\uff0c\u4e4b\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u52a0\u8f7d\u5b8c\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u540e\uff0c\u4ece\u6b64\u4f5c\u4e3a \u201c\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u201d \u5728\u540e\u53f0\u7ba1\u7406\u6574\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u3002</li> <li>\u5728\u4e0a\u5e1d\u773c\u4e2d\uff0c\u64cd\u4f5c\u7cfb\u7edf = \u4e00\u4e2a\u6570\u5b66\u5bf9\u8c61\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u8ba1\u7b97\u673a\u7cfb\u7edf (\u7535\u8def) \u5efa\u6a21\u6210\u6709\u9650\u72b6\u6001\u673a\u6a21\u578b\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u628a\u8fd0\u884c\u5728\u786c\u4ef6\u4e0a\u7684\u4efb\u4f55\u8f6f\u4ef6 (\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf) \u5efa\u6a21\u6210\u72b6\u6001\u673a\u3002</li> </ol> <p>Operating System concept</p> <p>Operating System: A body of software, in fact, that is responsible for making it easy to run programs (even allowing you to seemingly run many at the same time), allowing programs to share memory, enabling programs to interact with devices, and other fun stuff like that. (OSTEP)</p>"},{"location":"OS/%E7%BB%AA%E8%AE%BA/#lecture-1","title":"Lecture 1 \u64cd\u4f5c\u7cfb\u7edf\u6982\u8ff0","text":"<ol> <li>\u65f6\u949f\u3001\u5bfc\u7ebf\u3001\u903b\u8f91\u95e8(NAND\uff0c\u5373\u4e0e\u975e\u95e8)\u3001\u5bc4\u5b58\u5668\u662f\u6570\u5b57\u7cfb\u7edf\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\uff1a\u6570\u5b57\u7cfb\u7edf\u5728\u65f6\u949f\u9a71\u52a8\u4e0b\u79bb\u6563\u5730\u66f4\u65b0\u4e0b\u4e00\u5468\u671f\u7684\u5bc4\u5b58\u5668\u72b6\u6001\u3002</li> <li>\u6570\u5b57\u7535\u8def\u6a21\u62df\u5668\uff0c\u7f16\u8bd1\uff1a<code>gcc -o logisim -I. logisim.c</code>, \u5176\u4e2d<code>-I.</code>\u6307\u5b9a\u5f53\u524d\u76ee\u5f55\uff08<code>.</code>\uff09\u4e3a\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff0c\u8fd9\u610f\u5473\u7740\u7f16\u8bd1\u5668\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u67e5\u627e\u5934\u6587\u4ef6\u3002\u8fd0\u884c\uff1a<code>./logisim</code>\uff0c\u53ef\u89c6\u5316\u8fd0\u884c: <code>make run</code>\u6216<code>./logisim | python seg-display.py</code>\u3002\u5355\u72ec\u8fd0\u884c<code>python seg-display.py</code>\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u7b49\u7740\u8f93\u5165\uff0c\u6b64\u65f6\u8f93\u5165<code>A=1</code>\u5373\u53ef\u70b9\u4eae\u6570\u7801\u7ba1\u3002</li> <li>RISC-V \u5904\u7406\u5668\u6a21\u62df\u5668\uff0c\u7f16\u8bd1\uff1a<code>gcc -g -o mini-rv32ima main.c</code>\u6216<code>make</code>\uff0c\u8fd0\u884c\uff1a<code>./mini-rv32ima bin/fib.rv32i-bin 10</code>\uff0c\u7ed3\u679c\u5b58\u5728a0\u5bc4\u5b58\u5668\u3002CSR\uff08Control and Status Register\uff0c\u63a7\u5236\u548c\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u662f\u4e00\u7ec4\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\uff0c\u7528\u4e8e\u63a7\u5236\u548c\u76d1\u63a7\u5904\u7406\u5668\u7684\u8fd0\u884c\u72b6\u6001\u3002\u8fd9\u4e9b\u5bc4\u5b58\u5668\u901a\u5e38\u5305\u542b\u4e86\u5904\u7406\u5668\u7684\u5404\u79cd\u914d\u7f6e\u4fe1\u606f\u3001\u72b6\u6001\u4fe1\u606f\u548c\u63a7\u5236\u4fe1\u606f\uff0c\u4f8b\u5982\u4e2d\u65ad\u63a7\u5236\u3001\u65f6\u949f\u63a7\u5236\u3001\u6027\u80fd\u76d1\u63a7\u3001\u7535\u6e90\u7ba1\u7406\u7b49\u3002</li> </ol>"},{"location":"OS/%E7%BB%AA%E8%AE%BA/#lecture-2","title":"Lecture 2 \u5e94\u7528\u89c6\u89d2\u7684\u64cd\u4f5c\u7cfb\u7edf","text":"<p>Take-away Messages</p> <p>Everything (\u9ad8\u7ea7\u8bed\u8a00\u4ee3\u7801\u3001\u673a\u5668\u4ee3\u7801) \u90fd\u662f\u72b6\u6001\u673a\uff1b\u800c\u7f16\u8bd1\u5668\u5b9e\u73b0\u4e86\u4e24\u79cd\u72b6\u6001\u673a\u4e4b\u95f4\u7684\u7ffb\u8bd1\u3002\u65e0\u8bba\u4f55\u79cd\u72b6\u6001\u673a\uff0c\u5728\u6ca1\u6709\u64cd\u4f5c\u7cfb\u7edf\u65f6\uff0c\u5b83\u4eec\u53ea\u80fd\u505a\u7eaf\u7cb9\u7684\u8ba1\u7b97\uff0c\u751a\u81f3\u90fd\u4e0d\u80fd\u628a\u7ed3\u679c\u4f20\u9012\u5230\u7a0b\u5e8f\u4e4b\u5916\u2014\u2014\u800c\u7a0b\u5e8f\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u6c9f\u901a\u7684\u552f\u4e00\u6865\u6881\u662f\u7cfb\u7edf\u8c03\u7528 (\u4f8b\u5982 x86-64 \u7684 <code>syscall</code> \u6307\u4ee4)\u3002\u5982\u6b64\u91cd\u8981\u7684\u6865\u6881\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u81ea\u7136\u4e5f\u6709\u5de5\u5177\uff1a<code>strace</code> \u53ef\u4ee5\u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u5e8f\u5217\u3002</p> <ol> <li>hello.c: \u67e5\u770b\u6587\u4ef6\u7c7b\u578b<code>file a.out</code> C<pre><code>int main() {\n    printf(\"Hello, World\\n\");\n}\n</code></pre> Bash<pre><code>linux$ gcc hello.c \nlinux$ ./a.out \nHello, World\nlinux$ file a.out \na.out: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8fb1a66864c9ab4a1a8f9b6b2160b2226f1c03d3, for GNU/Linux 3.2.0, not stripped\nlinux$ objdump -d a.out | less\nlinux$ readelf -a a.out | less\nlinux$ gcc hello.c -static # \u9759\u6001\u94fe\u63a5\u610f\u5473\u7740\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5c06\u5305\u542b\u6240\u6709\u9700\u8981\u7684\u5e93\u4ee3\u7801\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u7cfb\u7edf\u4e2d\u5df2\u5b89\u88c5\u7684\u5171\u4eab\u5e93\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4ee5\u5728\u4efb\u4f55\u652f\u6301\u8be5\u67b6\u6784\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\uff0c\u800c\u4e0d\u9700\u8981\u62c5\u5fc3\u5e93\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002\u4f46\u662f\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u53ef\u6267\u884c\u6587\u4ef6\u4f1a\u6bd4\u8f83\u5927\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u6240\u6709\u7684\u5e93\u4ee3\u7801\u3002\nlinux$ file a.out \na.out: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=80ecb022dad2875af2eaf8f2b38d7a62d40ae20e, for GNU/Linux 3.2.0, not stripped\nlinux$ objdump -d a.out | less  # \u663e\u7136\u4e0d\u662f\u6700\u5c0f\u7684\u53ef\u6267\u884c\u6587\u4ef6\nlinux$ readelf -a a.out | less\n</code></pre></li> <li> <p>\u8bd5\u8bd5\u7a7a\u51fd\u6570\uff1a C<pre><code>int main() {\n}\n</code></pre> Bash<pre><code>linux$ gcc -c hello.c   # \u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5\uff0c\u751f\u6210hello.o\nlinux$ ld hello.o       # \u94fe\u63a5\uff0c\u751f\u6210a.out\uff0c\u867d\u7136\u6709warning\nld: warning: cannot find entry symbol _start; defaulting to 0000000000401000\nlinux$ ./a.out \nSegmentation fault\nlinux$ gdb a.out        # \u5f00\u59cb\u8c03\u8bd5\n</code></pre></p> <p>Segmentation fault</p> <p>\u8868\u793a\u7a0b\u5e8f\u8bbf\u95ee\u4e86\u4e0d\u5141\u8bb8\u8bbf\u95ee\u7684\u5185\u5b58\u533a\u57df\u3002\u8fd9\u901a\u5e38\u662f\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u7684\u9519\u8bef\u5bfc\u81f4\u7684\uff0c\u4f8b\u5982\u6307\u9488\u9519\u8bef\u3001\u6570\u7ec4\u8d8a\u754c\u3001\u6808\u6ea2\u51fa\u7b49\u3002</p> </li> <li> <p>\u5229\u7528gdb\u8c03\u8bd5\uff0c\u5728\u6267\u884creturn\u4e4b\u524d\uff0cM[rsp]\u91cc\u662f1(rsp: Stack Pointer\uff0c\u5373\u6808\u6307\u9488)\uff0c\u800c\u6267\u884creturn\u662f\u5c06M[rsp]\u8d4b\u503c\u7ed9PC\uff0crsp+8\uff08\u5c06\u8fd4\u56de\u5730\u5740\u4ece\u6808\u9876\u5f39\u51fa\uff0c\u5e76\u7f29\u6808\uff09\uff0cPC\u6307\u5411\u4e861\uff08\u663e\u7136\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u5730\u5740\uff09\uff0c\u6240\u4ee5\u4f1a\u51fa\u73b0segmentation fault\u3002 Bash<pre><code>(gdb) si       # \u4f9d\u6b21\u5355\u6b65\u6267\u884c\uff0c\u53d1\u73b0\u5230ret\u6307\u4ee4\u65f6\u518d\u4e0b\u4e00\u6b65\u5c31\u4f1a\u51fa\u73b0segmentation fault\n0x0000000000000001 in ?? ()  # \u8fd9\u91cc\u76841\u6709\u95ee\u9898\n(gdb) p $rsp   # \u6253\u5370\u6808\u6307\u9488\u7684\u503c, \u8f93\u51fa $1 = (void *) 0x7fffffffdcb0\n(gdb) x/x $rsp # \u67e5\u770bM[rsp]\uff0c\u8f93\u51fa 0x7fffffffdcb0: 0x00000001\n</code></pre></p> </li> <li>\u6700\u5c0f\u7684hello world\u7a0b\u5e8f\uff1aminimal.S GAS<pre><code>#include &lt;sys/syscall.h&gt;\n\n// The x86-64 system call Application Binary Interface (ABI):\n//     System call number: RAX\n//     Arguments: RDI, RSI, RDX, RCX, R8, R9\n//     Return value: RAX\n// See also: syscall(2) syscalls(2)\n\n#define syscall3(id, a1, a2, a3) \\\n    movq $SYS_##id, %rax; \\\n    movq $a1, %rdi; \\\n    movq $a2, %rsi; \\\n    movq $a3, %rdx; \\\n    syscall\n\n#define syscall2(id, a1, a2)  syscall3(id, a1, a2, 0)\n#define syscall1(id, a1)  syscall2(id, a1, 0)\n\n.globl _start\n_start:\n    syscall3(write, 1, addr1, addr2 - addr1) # \u6267\u884cwrite\u8fd9\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5f80\u7f16\u53f7\u4e3a1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff08\u5373\u6807\u51c6\u8f93\u51fa\uff09\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3aaddr2-addr1\n    syscall1(exit, 1)\n\naddr1:\n    .ascii \"\\033[01;31mHello, OS World\\033[0m\\n\"\naddr2:\n</code></pre></li> <li> <p>\u8ddf\u8e2a\u7cfb\u7edf\u8c03\u7528\uff1a<code>strace -f gcc -o hello hello.c &amp;| vim -</code> (fish\u53ef\u7528\uff0cbash\u4e0d\u53ef\u7528)\u3002<code>&amp;</code> \u7b26\u53f7\u8868\u793a\u5c06\u547d\u4ee4\u653e\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u800c <code>|</code> \u7b26\u53f7\u8868\u793a\u5c06 strace \u547d\u4ee4\u7684\u8f93\u51fa\u4f5c\u4e3a vim \u7f16\u8f91\u5668\u7684\u8f93\u5165\u3002<code>-</code> \u8868\u793a vim \u5e94\u8be5\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4ece\u4e00\u4e2a\u6587\u4ef6\u3002vim\u6253\u5f00\u540e\u7528<code>:%!grep -v -e '-1'</code>\u8fc7\u6ee4\u6389-1\u7684\u884c\uff0c\u7528<code>:%!grep -v -e open</code>\u8fc7\u6ee4\u6389\u5e26open\u7684\u884c\u3002</p> </li> <li> <p>Debug hanoi-nr.c\u8981\u914d\u7f6e\u597d\u7684.vscode/launch.json     JSON<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"C Debugger: Current File\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/hanoi-nr\",\n            \"args\": [],\n            \"cwd\": \"${workspaceFolder}\",\n        }\n    ]\n}\n</code></pre></p> <p>\u9012\u5f52\u7684\u6c49\u8bfa\u5854 hanoi-r.c\uff1a C<pre><code>#include &lt;stdio.h&gt;\n\nint hanoi(int n, char from, char to, char via) {\n    if (n == 1) {\n        printf(\"%c -&gt; %c\\n\", from, to);\n        return 1;\n    } else {\n        int c1 = hanoi(n - 1, from, via, to);\n        hanoi(1, from, to, via);\n        int c2 = hanoi(n - 1, via, to, from);\n        return c1 + c2 + 1;\n    }\n}\n</code></pre></p> <p>\u975e\u9012\u5f52\u7684\u6c49\u8bfa\u5854 hanoi-nr.c\uff1a C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n\nstruct Frame {\n    // Each frame has a program counter to keep track its next\n    // to-be-executed statement.\n    int pc;\n\n    // The internal state of the frame. This state includes\n    // both arguments and local variables (if any).\n    //\n    // Arguments:\n    int n;\n    char from, to, via;\n\n    // Local variables:\n    int c1, c2;\n};\n\ntypedef struct Frame Frame;\n\nint hanoi(int n, char from, char to, char via) {\n    Frame stk[64];\n    Frame *top = stk - 1;\n\n    // Function call: push a new frame (PC=0) onto the stack\n    #define call(...) ({ *(++top) = (Frame){.pc = 0, __VA_ARGS__}; })\n\n    // Function return: pop the top-most frame\n    #define ret(val) ({ top--; retval = (val); })\n\n\n    // The last function-return's value. It is not obvious\n    // that we only need one retval.\n    int retval = 0;\n\n    // The initial call to the recursive function\n    call(n, from, to, via);\n\n    while (1) {\n        // Fetch the top-most frame.\n        Frame *f = top;\n        if (top &lt; stk) {\n            // No top-most frame any more; we're done.\n            break;\n        }\n\n        // Jumps may change this default next pc.\n        int next_pc = f-&gt;pc + 1;\n\n        // Single step execution.\n\n        // Extract the parameters from the current frame. (It's\n        // generally a bad idea to reuse variable names in\n        // practice; but we did it here for readability.)\n        int n = f-&gt;n, from = f-&gt;from, to = f-&gt;to, via = f-&gt;via;\n\n        switch (f-&gt;pc) {\n            case 0:\n                if (n == 1) {\n                    printf(\"%c -&gt; %c\\n\", from, to);\n                    ret(1);\n                }\n                break;\n            case 1: call(n - 1, from, via, to); break;\n            case 2: f-&gt;c1 = retval; break;\n            case 3: call(1, from, to, via); break;\n            case 4: call(n - 1, via, to, from); break;\n            case 5: f-&gt;c2 = retval; break;\n            case 6: ret(f-&gt;c1 + f-&gt;c2 + 1); break;\n            default: assert(0);\n        }\n\n        f-&gt;pc = next_pc;\n    }\n\n    return retval;\n}\n</code></pre></p> <p>Call and Return</p> <p>\u51fd\u6570\u8c03\u7528\uff1a\u5728\u7a0b\u5e8f\u4e2d\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\u5730\u5740\uff08\u5373\u7a0b\u5e8f\u8ba1\u6570\u5668\uff09\u4fdd\u5b58\u5230\u6808\u4e2d\uff0c\u5e76\u8df3\u8f6c\u5230\u88ab\u8c03\u7528\u51fd\u6570\u7684\u8d77\u59cb\u5730\u5740\u3002\u88ab\u8c03\u7528\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u7a0b\u5e8f\u4f1a\u4ece\u6808\u4e2d\u53d6\u51fa\u4fdd\u5b58\u7684\u6307\u4ee4\u5730\u5740\uff0c\u5e76\u8df3\u8f6c\u5230\u8be5\u5730\u5740\u7ee7\u7eed\u6267\u884c\u3002</p> <p>\u51fd\u6570\u8fd4\u56de\uff1a\u5728\u51fd\u6570\u4e2d\u4f7f\u7528return\u8bed\u53e5\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd4\u56de\u503c\u4fdd\u5b58\u5230\u6808\u4e2d\uff0c\u5e76\u8df3\u8f6c\u5230\u8c03\u7528\u51fd\u6570\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\u8c03\u7528\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u7a0b\u5e8f\u4f1a\u4ece\u6808\u4e2d\u53d6\u51fa\u4fdd\u5b58\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u5c06\u5176\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0ccall\u662f\u957f\u51fa\u65b0\u7684frame(\u6ce8\u610f\u6bcf\u4e2aframe\u90fd\u6709\u81ea\u5df1\u7684pc\uff0c\u65b0\u957f\u51fa\u7684frame.pc = 0\uff0c\u65b0frame\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u90fd\u662f\u4ece\u81ea\u5df1fram\u7684pc=0\u5f00\u59cb\u4e00\u6b65\u6b65\u6267\u884c\u81ea\u5df1pc=1/2/3/...)\uff0creturn\u662f\u5f39\u51fa\u5f53\u524d\u7684frame\u5e76\u8bb0\u4e0b\u8fd4\u56de\u503c\u3002</p> </li> <li> <p>\u7f16\u8bd1\u5668\u4e0e\u7f16\u8bd1\u4f18\u5316</p> <p>\u7f16\u8bd1\u4f18\u5316</p> <p>C \u8bed\u8a00\u7f16\u8bd1\u5668\u5728\u8fdb\u884c\u4ee3\u7801\u4f18\u5316\u65f6\uff0c\u9075\u5faa\u7684\u57fa\u672c\u51c6\u5219\u662f\u5728\u4e0d\u6539\u53d8\u7a0b\u5e8f\u7684\u8bed\u4e49 (\u5373\u7a0b\u5e8f\u7684\u884c\u4e3a\u548c\u8f93\u51fa\u7ed3\u679c) \u7684\u524d\u63d0\u4e0b\uff0c\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u7387\u548c/\u6216\u51cf\u5c11\u7a0b\u5e8f\u7684\u8d44\u6e90\u6d88\u8017</p> <p>\u7f16\u8bd1\u4f18\u5316\u4e2d\u6700\u91cd\u8981\u7684 \u201c\u4e09\u677f\u65a7\u201d\uff1a</p> <ul> <li>\u51fd\u6570\u5185\u8054\uff1a\u5c06\u51fd\u6570\u8c03\u7528\u66ff\u6362\u4e3a\u51fd\u6570\u4f53\u672c\u8eab\u7684\u5185\u5bb9</li> <li>\u5e38\u91cf\u4f20\u64ad\uff1a\u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u5e76\u66ff\u6362</li> <li>\u6b7b\u4ee3\u7801\u6d88\u9664\uff1a\u5220\u9664\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6267\u884c\u5230\u7684\u4ee3\u7801</li> </ul> <p>\u7f16\u8bd1\u6b63\u786e\u6027: \u7cfb\u7edf\u8c03\u7528\u662f\u4f7f\u7a0b\u5e8f\u8ba1\u7b97\u7ed3\u679c\u53ef\u89c1\u7684\u552f\u4e00\u65b9\u6cd5</p> <ul> <li>\u4e0d\u6539\u53d8\u8bed\u4e49 = \u4e0d\u6539\u53d8\u53ef\u89c1\u7ed3\u679c</li> <li>\u72b6\u6001\u673a\u7684\u89c6\u89d2\uff1a\u6ee1\u8db3C/\u6c47\u7f16\u72b6\u6001\u673a\u751f\u6210\u7684\u6240\u6709 syscall \u5e8f\u5217\u5b8c\u5168\u4e00\u81f4\uff0c\u4efb\u4f55\u4f18\u5316\u90fd\u662f\u5141\u8bb8\u7684</li> </ul> <p>C \u4ee3\u7801\u4e2d\u7684\u4e0d\u53ef\u4f18\u5316\u90e8\u5206</p> <ul> <li>External function calls (\u94fe\u63a5\u65f6\u624d\u80fd\u786e\u5b9a\u5230\u5e95\u662f\u4ec0\u4e48\u4ee3\u7801)<ul> <li>\u672a\u77e5\u7684\u4ee3\u7801\u53ef\u80fd\u5305\u542b\u7cfb\u7edf\u8c03\u7528</li> <li>\u56e0\u6b64\u4e0d\u53ef\u5220\u9664\u3001\u79fb\u51fa\u5faa\u73af\u7b49\uff0c\u4e14\u8981\u4fdd\u8bc1\u53c2\u6570\u4f20\u9012\u5b8c\u5168\u4e00\u81f4</li> </ul> </li> <li>\u7f16\u8bd1\u5668\u63d0\u4f9b\u7684 \u201c\u4e0d\u53ef\u4f18\u5316\u201d \u6807\u6ce8<ul> <li>volatile [load | store | inline assembly]</li> </ul> </li> </ul> <p>example\uff1ainline.c C<pre><code>int equals(int x, int y) {\n    if (x == y) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint foo(int n) {\n    return equals(n, n) + equals(n, n - 1);\n}\n</code></pre> <code>gcc -O2 -c inline.c &amp;&amp; objdump -d inline.o</code>: \u53ef\u4ee5\u770b\u5230\u7f16\u8bd1\u5668\u76f4\u63a5\u5c061\u8d4b\u503c\u7ed9eax\u5bc4\u5b58\u5668\u4e86\uff0c\u800c\u4e0d\u662f\u8c03\u7528equals\u51fd\u6570\u3002</p> Bash<pre><code>0000000000000010 &lt;foo&gt;:\n10:   f3 0f 1e fa             endbr64 \n14:   b8 01 00 00 00          mov    $0x1,%eax\n19:   c3                      ret\n</code></pre> </li> </ol>"},{"location":"OS/%E7%BB%AA%E8%AE%BA/#lecture-3","title":"Lecture 3 \u786c\u4ef6\u89c6\u89d2\u7684\u64cd\u4f5c\u7cfb\u7edf","text":"<p>Take-away Messages</p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u662f\u4e25\u683c\u7684\u6570\u5b66\u5bf9\u8c61\uff1a\u6ca1\u6709\u9b54\u6cd5\uff1b\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u4e00\u5207\u884c\u4e3a\u90fd\u662f\u53ef\u89c2\u6d4b\u3001\u53ef\u7406\u89e3\u7684\u3002</p> <ul> <li>\u5904\u7406\u5668\u662f\u65e0\u60c5\u7684\u6267\u884c\u6307\u4ee4\u7684\u673a\u5668\u3002</li> <li>\u5904\u7406\u5668\u4f1a\u89c4\u5b9a\u597d Reset \u540e\u7684\u884c\u4e3a\u3002</li> <li>Reset \u540e Firmware \u5f00\u59cb\u8fd0\u884c\uff0c\u518d\u52a0\u8f7d\u64cd\u4f5c\u7cfb\u7edf\u3002</li> <li>\u5382\u5546\u9010\u6e10\u5f62\u6210\u4e86\u8fbe\u6210\u5171\u8bc6\u7684 Firmware Specification (IBM PC \u201c\u517c\u5bb9\u673a\u201d\u3001UEFI\u3001\u2026\u2026)\u3002</li> </ul> <ol> <li> <p>IBM PC/PC-DOS 2.0 (1983)\u65f6\u4ee3\uff1aFirmware (BIOS) \u4f1a\u52a0\u8f7d\u78c1\u76d8\u7684\u524d 512 \u5b57\u8282\u5230 0x7c00\uff0c\u5982\u679c\u8fd9 512 \u5b57\u8282\u6700\u540e\u662f <code>0x55, 0xAA</code>\uff0c\u5c31\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u7136\u540e\u4ece 0x7c00 \u5f00\u59cb\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u3002 Makefile<pre><code>minimal.img: Makefile\n    ( echo \"eb fe 11 22 33 44\" | xxd -r -p; \\\n      cat /dev/zero | head -c 504; \\\n      echo \"55 aa\" | xxd -r -p \\\n    ) &gt; minimal.img\n</code></pre></p> <p>\u8fd9\u4e2amakefile\u4f1a\u751f\u6210\u4e00\u4e2a512\u5b57\u8282\u7684img\u6587\u4ef6\uff0c\u524d6\u4e2a\u5b57\u8282\u662f<code>eb fe 11 22 33 44</code>\uff0c\u4e2d\u95f4504\u4e2a\u5b57\u8282\u90fd\u662f0\uff0c\u6700\u540e\u4e24\u4e2a\u5b57\u8282\u662f<code>55 aa</code>\u3002\u4f7f\u7528<code>qemu-system-x86_64 -monitor stdio minimal.img</code>\u542f\u52a8\u540e\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u770b\u5230eip\u786e\u5b9e\u662f0x7c00\uff0c\u5f53\u524d\u6307\u4ee4\u4e3a\u6b7b\u5faa\u73af\u3002(eb fe\u5373\u4e3a\u6b7b\u5faa\u73af<code>jmp .</code>)</p> Bash<pre><code>(qemu) p $eip\n0x7c00\n(qemu) x/i $eip\n0x0000000000007c00:  jmp    0x7c00\n</code></pre> <p>\u901a\u8fc7<code>qemu-system-x86_64 -s -S minimal.img &amp;</code>\u548c<code>gdb -x init.gdb</code>\u53ef\u4ee5\u770b\u5230\u662f2\u4e2a\u5b57\u82822\u4e2a\u5b57\u8282\u7684\u5c06\u78c1\u76d8\u5185\u5bb9\u642c\u52300x7c00\u5904\u7684\uff0c\u4f7f\u7528\u7684\u6307\u4ee4\u662f<code>rep insl (%dx),%es:(%edi)\u200b</code> Bash<pre><code># init.gdb\n# Kill process (QEMU) on gdb exits\ndefine hook-quit\n    kill\nend\n\ndefine hook-stop\n    printf \"Program Counter:\\n\"\n    x/i $rip + ($cs * 16)\n    printf \"------- Memory around 0x7c00 -------\\n\"\n    x/16b 0x7c00\nend\n\n# Connect to remote\ntarget remote localhost:1234\nwatch *0x7c00\nbreak *0x7c00\nlayout asm\ncontinue\n</code></pre></p> </li> </ol>"},{"location":"OS/%E7%BB%AA%E8%AE%BA/#lecture-4","title":"Lecture 4 \u6570\u5b66\u89c6\u89d2\u7684\u64cd\u4f5c\u7cfb\u7edf","text":"<p>Take-away Messages</p> <p>\u7a0b\u5e8f\u5c31\u662f\u72b6\u6001\u673a\uff1b\u72b6\u6001\u673a\u53ef\u4ee5\u7528\u7a0b\u5e8f\u8868\u793a\u3002\u56e0\u6b64\uff1a</p> <ul> <li>\u6211\u4eec\u53ef\u4ee5\u7528\u66f4 \u201c\u7b80\u5355\u201d \u7684\u65b9\u5f0f (\u4f8b\u5982 Python) \u63cf\u8ff0\u72b6\u6001\u673a\u3001\u5efa\u6a21\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684\u5e94\u7528\uff0c\u5e76\u4e14\u5b9e\u73b0\u64cd\u4f5c\u7cfb\u7edf\u7684\u53ef\u6267\u884c\u6a21\u578b\u3002</li> <li>\u4e00\u65e6\u628a\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u7a0b\u5e8f\u5f53\u505a \u201c\u6570\u5b66\u5bf9\u8c61\u201d \u5904\u7406\uff0c\u90a3\u4e48\u6211\u4eec\u56fe\u8bba\u3001\u6570\u7406\u903b\u8f91\u4e2d\u7684\u5de5\u5177\u5c31\u80fd\u88ab\u5e94\u7528\u4e8e\u5904\u7406\u7a0b\u5e8f\u2014\u2014\u4f8b\u5982\uff0c\u53ef\u4ee5\u7528\u56fe\u904d\u5386 \u201c\u66b4\u529b\u679a\u4e3e\u201d \u7684\u65b9\u6cd5\u8bc1\u660e\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u3002</li> </ul> <ol> <li>Debug os-model.py\u8981\u914d\u7f6e\u597d\u7684.vscode/launch.json JSON<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python Debugger: Current File\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${file}\",\n            \"args\": [\"hello.py\"],\n            \"console\": \"integratedTerminal\"\n        }\n    ]\n}\n</code></pre></li> <li> <p>os-model.py: 30\u884c\u5efa\u6a21\u64cd\u4f5c\u7cfb\u7edf Python<pre><code>#!/usr/bin/env python3\n\nimport sys\nimport random\nfrom pathlib import Path\n\nclass OS:\n    '''\n    A minimal executable operating system model. Processes\n    are state machines (Python generators) that can be paused\n    or continued with local states being saved.\n    '''\n\n    '''\n    We implement three system calls:\n\n    - read: read a random bit value.\n    - write: write a string to the buffer.\n    - spawn: create a new state machine (process).\n    '''\n    SYSCALLS = ['read', 'write', 'spawn']\n\n    class Process:\n        '''\n        A \"freezed\" state machine. The state (local variables,\n        program counters, etc.) are stored in the generator\n        object.\n        '''\n\n        def __init__(self, func, *args):\n            # func should be a generator function. Calling\n            # func(*args) returns a generator object.\n            self._func = func(*args)\n\n            # This return value is set by the OS's main loop.\n            self.retval = None\n\n        def step(self):\n            '''\n            Resume the process with OS-written return value,\n            until the next system call is issued.\n            '''\n            syscall, args, *_ = self._func.send(self.retval)\n            self.retval = None\n            return syscall, args\n\n    def __init__(self, src):\n        # This is a hack: we directly execute the source\n        # in the current Python runtime--and main is thus\n        # available for calling.\n        exec(src, globals())\n        self.procs = [OS.Process(main)]\n        self.buffer = ''\n\n    def run(self):\n        # Real operating systems waste all CPU cycles\n        # (efficiently, by putting the CPU into sleep) when\n        # there is no running process at the moment. Our model\n        # terminates if there is nothing to run.\n        while self.procs:\n\n            # There is also a pointer to the \"current\" process\n            # in today's operating systems.\n            current = random.choice(self.procs)\n\n            try:\n                # Operating systems handle interrupt and system\n                # calls, and \"assign\" CPU to a process.\n                match current.step():\n                    case 'read', _:\n                        current.retval = random.choice([0, 1])\n                    case 'write', s:\n                        self.buffer += s\n                    case 'spawn', (fn, *args):\n                        self.procs += [OS.Process(fn, *args)]\n                    case _:\n                        assert 0\n\n            except StopIteration:\n                # The generator object terminates.\n                self.procs.remove(current)\n\n        return self.buffer\n\nif __name__ == '__main__':\n    if len(sys.argv) &lt; 2:\n        print(f'Usage: {sys.argv[0]} file')\n        exit(1)\n\n    src = Path(sys.argv[1]).read_text()\n\n    # Hack: patch sys_read(...) -&gt; yield \"sys_read\", (...)\n    for syscall in OS.SYSCALLS:\n        src = src.replace(f'sys_{syscall}',\n                          f'yield \"{syscall}\", ')\n\n    stdout = OS(src).run()\n    print(stdout)\n</code></pre></p> </li> <li> <p>Mosaic Model and Checker:      Python<pre><code>def main():\n    pid = sys_fork()\n    sys_sched()  # non-deterministic context switch\n    if pid == 0:\n        sys_write('World\\n')\n    else:\n        sys_write('Hello\\n')\n</code></pre> <code>python mosaic.py -c examples/intro/hello.py | grep stdout | sort | uniq</code>\u8f93\u51fa\uff1a(-c checking\u6a21\u5f0f\u4e0b\uff0c\u4f1a\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c)     Bash<pre><code>\"stdout\": \"\",\n\"stdout\": \"Hello\\n\",\n\"stdout\": \"Hello\\nWorld\\n\",\n\"stdout\": \"World\\n\",\n\"stdout\": \"World\\nHello\\n\",\n</code></pre></p> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/","title":"\u865a\u62df\u5316","text":"<p> \u7ea6 8705 \u4e2a\u5b57  1699 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 50 \u5206\u949f</p>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-14","title":"Lecture 14 \u64cd\u4f5c\u7cfb\u7edf\u4e0a\u7684\u8fdb\u7a0b","text":"<p>Take-away Messages</p> <p>\u56e0\u4e3a \u201c\u7a0b\u5e8f = \u72b6\u6001\u673a\u201d\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u8fdb\u7a0b (\u8fd0\u884c\u7684\u7a0b\u5e8f) \u7ba1\u7406\u7684 API \u5f88\u81ea\u7136\u5730\u5c31\u662f\u72b6\u6001\u673a\u7684\u7ba1\u7406\u3002\u5728 UNIX/Linux \u4e16\u754c\u4e2d\uff0c\u4ee5\u4e0b\u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u521b\u5efa\u4e86\u6574\u4e2a \u201c\u8fdb\u7a0b\u4e16\u754c\u201d\uff0c\u4e0d\u8bba\u662f\u6211\u4eec\u5e38\u7528\u7684 IDE \u548c\u6d4f\u89c8\u5668\uff0c\u8fd8\u662f\u7f16\u8bd1\u65f6\u5728\u540e\u53f0\u8c03\u7528\u7684 gcc\u3002\u5176\u4e2d\uff1a</p> <ul> <li>fork: \u5bf9\u5f53\u524d\u72b6\u6001\u673a\u72b6\u6001\u8fdb\u884c\u5b8c\u6574\u590d\u5236</li> <li>execve: \u5c06\u5f53\u524d\u72b6\u6001\u673a\u72b6\u6001\u91cd\u7f6e\u4e3a\u67d0\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u63cf\u8ff0\u7684\u72b6\u6001\u673a</li> <li>exit: \u9500\u6bc1\u5f53\u524d\u72b6\u6001\u673a</li> </ul> <p>\u5728\u5bf9\u8fd9\u4e2a\u6982\u5ff5\u6709\u4e86\u7edd\u5bf9\u6b63\u786e\u4e14\u7edd\u5bf9\u4e25\u8c28\u7684\u7406\u89e3\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e5f\u5c31\u663e\u5f97\u4e0d\u90a3\u4e48\u795e\u79d8\u4e86\u3002</p> <ol> <li> <p>fork: \u521b\u5efa\u72b6\u6001\u673a\u3002\u505a\u4e00\u4efd\u72b6\u6001\u673a\u5b8c\u6574\u7684\u590d\u5236 (\u5185\u5b58\u3001\u5bc4\u5b58\u5668\u73b0\u573a)\u3002     C<pre><code>pid_t fork(void);\n</code></pre></p> <p>fork() \u7684\u884c\u4e3a</p> <ul> <li> <p>\u7acb\u5373\u590d\u5236\u72b6\u6001\u673a</p> <ul> <li>\u5305\u62ec\u6240\u6709\u4fe1\u606f\u7684\u5b8c\u6574\u62f7\u8d1d<ul> <li>\u6bcf\u4e00\u4e2a\u5b57\u8282\u7684\u5185\u5b58</li> <li>\u6253\u5f00\u7684\u6587\u4ef6 (\u5171\u4eab)</li> <li>\u2026\u2026</li> <li>\u590d\u5236\u5931\u8d25\u8fd4\u56de -1<ul> <li>errno \u4f1a\u8fd4\u56de\u9519\u8bef\u539f\u56e0 (man fork)</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>\u5982\u4f55\u533a\u5206\u4e24\u4e2a\u72b6\u6001\u673a\uff1f</p> <ul> <li>\u65b0\u521b\u5efa\u8fdb\u7a0b\uff1a\u5f97\u5230\u7684\u8fd4\u56de\u503c\u662f 0</li> <li>\u6267\u884c fork \u7684\u7236\u8fdb\u7a0b\uff1a\u5f97\u5230\u7684\u8fd4\u56de\u503c\u662f\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u53f7</li> </ul> </li> </ul> </li> <li> <p>\u9605\u8bfb\u4ee5\u4e0b\u7a0b\u5e8f\uff0c\u5199\u51fa\u8fd0\u884c\u7ed3\u679c     C<pre><code>pid_t x = fork();\npid_t y = fork();\nprintf(\"%d %d\\n\", x, y);\n</code></pre></p> <p>\u8f93\u51fa\uff1a Bash<pre><code>19489 19490\n19489 0\n0 19491\n0 0\n</code></pre> </p> <p>C<pre><code>for (int i = 0; i &lt; 2; i++) {\n    fork();\n    printf(\"Hello\\n\");\n}\n</code></pre> \u8f93\u51fa\uff1a6\u4e2aHello C<pre><code>Hello\nHello\nHello\nHello\nHello\nHello\n</code></pre></p> <p>\u7a0b\u5e8f\u7b49\u4ef7\u4e8e\uff1a C<pre><code>fork();\nprintf(\"Hello\\n\");\nfork();\nprintf(\"Hello\\n\");\n</code></pre> </p> <p>\u7136\u800c\uff0c<code>./demo-2 | wc -l</code>\u8f93\u51fa\u7684\u662f<code>8</code>\u3002\u539f\u56e0\uff1a\u5728\u7ec8\u7aef\u91cc\u6362\u884c\u6253\u5370\u65f6\u4f7f\u7528\u7684\u662fline buffer\uff0c\u6b64\u65f6\u6253\u53706\u4e2a\uff1b\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u6216\u4f7f\u7528\u7ba1\u9053\u65f6\u4f7f\u7528\u7684\u662ffull buffer\uff0c\u6b64\u65f6\u4f1a\u6253\u53708\u4e2a\uff0c\u6ca1\u6709\u5237\u65b0buffer\uff0c\u5bfc\u81f4\u6240\u6709\u5e26\u6709\u503c\u7684buffer\u4e5f\u88abfork\u4e86\u3002<code>man setbuf</code>\u53ef\u4ee5\u770b\u5230\u6709\u4e09\u79cd\u6a21\u5f0f<code>_IONBF unbuffered</code>/<code>_IOLBF line buffered</code>/<code>_IOFBF fully buffered</code>\u3002 \u6b64\u65f6\u7a0b\u5e8f\u7b49\u4ef7\u4e8e\uff1a C<pre><code>fork();\nbuf += \"Hello\";\nfork();\nbuf += \"Hello\";\nflush(buf);\n</code></pre> </p> </li> <li> <p>execve\uff1a\u91cd\u7f6e\u72b6\u6001\u673a\u3002\u5c06\u5f53\u524d\u8fdb\u7a0b\u91cd\u7f6e\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u63cf\u8ff0\u72b6\u6001\u673a\u7684\u521d\u59cb\u72b6\u6001\u3002</p> <p>C<pre><code>int execve(const char *filename,\n           char * const argv[], char * const envp[]);\n// \u4e09\u4e2a\u53c2\u6570\uff1a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8def\u5f84\u3001\u4f20\u9012\u7ed9 main \u51fd\u6570\u7684\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf\u3002\n</code></pre> execve \u884c\u4e3a</p> <ul> <li>\u6267\u884c\u540d\u4e3a <code>filename</code> \u7684\u7a0b\u5e8f</li> <li>\u5141\u8bb8\u5bf9\u65b0\u72b6\u6001\u673a\u8bbe\u7f6e\u53c2\u6570 <code>argv</code> (v) \u548c\u73af\u5883\u53d8\u91cf <code>envp</code> (e)<ul> <li>\u521a\u597d\u5bf9\u5e94\u4e86 <code>main()</code> \u7684\u53c2\u6570\uff01</li> </ul> </li> <li>execve \u662f\u552f\u4e00\u80fd\u591f \u201c\u6267\u884c\u7a0b\u5e8f\u201d \u7684\u7cfb\u7edf\u8c03\u7528<ul> <li>\u56e0\u6b64\u4e5f\u662f\u4e00\u5207\u8fdb\u7a0b strace \u7684\u7b2c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528</li> </ul> </li> </ul> </li> <li> <p>UNIX \u4e2d\u5b9e\u73b0 \u201c\u521b\u5efa\u65b0\u72b6\u6001\u673a\u201d \u7684\u65b9\u5f0f\uff1afork + execve \uff08\u76f8\u5f53\u4e8espawn\uff09     C<pre><code>int pid = fork();\nif (pid == -1) {\n    // fork\u5931\u8d25\n    perror(\"fork\"); goto fail;\n} else if (pid == 0) {\n    // Child\n    execve(...);\n    // \u5982\u679c execve \u6210\u529f\u6267\u884c\uff0c\u5b83\u5c06\u66ff\u6362\u5f53\u524d\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u5e76\u5f00\u59cb\u6267\u884c\u65b0\u7684\u7a0b\u5e8f\uff0c\n    // \u56e0\u6b64 perror(\"execve\") \u4e0d\u4f1a\u88ab\u6267\u884c\u3002perror(\"execve\") \u53ea\u4f1a\u5728 execve\n    // \u8c03\u7528\u5931\u8d25\u65f6\u6267\u884c\n    perror(\"execve\"); goto fail;\n} else {\n    // Parent\n    ...\n}\n</code></pre></p> <p>demo: C<pre><code>#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n    char *const argv[] = {\n        \"/bin/bash\",\n        \"-c\",\n        \"env\",\n        NULL,\n    };\n\n    char *const envp[] = {\n        \"HELLO=WORLD\",\n        NULL,\n    };\n\n    // Reset the state machine to \"/bin/bash\"\n    execve(argv[0], argv, envp);\n\n    // We are here only on error.\n    printf(\"Hello, World!\\n\");\n}\n</code></pre> \u8f93\u51fa\uff1a Bash<pre><code>PWD=/home/user/jyy_os_2024/lecture/lect14/execve-demo\nHELLO=WORLD\nSHLVL=0\n_=/usr/bin/env\n</code></pre> \u8fd9\u6bd4\u76f4\u63a5\u5728bash\u91cc\u6267\u884c<code>/bin/bash -c env</code>\u5f97\u5230\u7684\u4e00\u5927\u5806\u8f93\u51fa\u66f4\u52a0\u7b80\u5355\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5728\u4ee3\u7801\u91cc\u7684\u73af\u5883\u53d8\u91cfevnp\u53ea\u4fdd\u7559\u4e86<code>HELLO=WORLD</code>\uff08\u5f53\u7136\u5b9e\u9645\u4e0a\u6267\u884cexecve\u8fd8\u662f\u6709PWD/SHLVL\u7b49\u88ab\u52a0\u4e0a\u7684\u73af\u5883\u53d8\u91cf\uff09\u3002</p> </li> <li> <p>_exit()\uff1a\u9500\u6bc1\u72b6\u6001\u673a\u3002\u7acb\u5373\u6467\u6bc1\u72b6\u6001\u673a\uff0c\u5141\u8bb8\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\u3002\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u4f1a\u901a\u77e5\u7236\u8fdb\u7a0b\u3002     C<pre><code>void _exit(int status);\n</code></pre></p> <p>\u7ed3\u675f\u7a0b\u5e8f\u6267\u884c\u7684\u4e09\u79cd\u65b9\u6cd5</p> <ul> <li>exit(0)<ul> <li>provided by libc</li> <li>\u4f1a\u8c03\u7528 atexit</li> </ul> </li> <li>_exit(0)<ul> <li>\u6267\u884c \u201cexit_group\u201d \u7cfb\u7edf\u8c03\u7528\u7ec8\u6b62\u6574\u4e2a\u8fdb\u7a0b (\u6240\u6709\u7ebf\u7a0b)</li> <li>\u4e0d\u4f1a\u8c03\u7528 atexit </li> </ul> </li> <li>syscall(SYS_exit, 0)<ul> <li>\u6267\u884c \u201cexit\u201d \u7cfb\u7edf\u8c03\u7528\u7ec8\u6b62\u5f53\u524d\u7ebf\u7a0b</li> <li>\u4e0d\u4f1a\u8c03\u7528 atexit\uff08libc\u5f53\u7136\u4e0d\u4e86\u89e3\u7cfb\u7edf\u8c03\u7528\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5728\u9000\u51fa\u65f6\u8c03\u7528libc\u7684atexit\u51fd\u6570\uff09</li> </ul> </li> </ul> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-15","title":"Lecture 15 \u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4","text":"<p>Take-away Messages</p> <p>\u72b6\u6001\u673a\u7684\u89c6\u89d2\u81ea\u7136\u5730\u5c06\u6211\u4eec\u5f15\u5165 \u201c\u5185\u5b58\u5230\u5e95\u662f\u4ec0\u4e48\u201d \u7684\u95ee\u9898\u2014\u2014\u5b83\u7684\u7b54\u6848\u540c\u6837\u4e5f\u5f88\u81ea\u7136\uff1a\u5e26\u6709\u8bbf\u95ee\u6743\u9650\u63a7\u5236\u7684\u8fde\u7eed\u5185\u5b58\u6bb5\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 mmap\u3001munmap\u3001mprotect \u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u8c03\u6574\u72b6\u6001\u673a\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5305\u62ec\u5206\u914d\u533f\u540d\u7684\u5185\u5b58\u3001\u6620\u5c04\u6587\u4ef6\u5185\u5bb9\u5230\u5185\u5b58\u3001\u4fee\u6539\u8bbf\u95ee\u6743\u9650\u7b49\uff08\u589e/\u5220/\u6539\uff09\u3002\u66f4\u6709\u8da3\u7684\u662f\u64cd\u4f5c\u7cfb\u7edf\u6709 \u201c\u80fd\u591f\u5b9e\u73b0\u4e00\u5207\u5e94\u7528\u7a0b\u5e8f\u201d \u7684\u9700\u6c42\uff0c\u8c03\u8bd5\u5668\u4e5f\u4e0d\u5728\u8bdd\u4e0b\u2014\u2014\u8fd9\u4e5f\u7ed9\u4e86\u6211\u4eec\u5165\u4fb5\u5176\u4ed6\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u673a\u5236\u3002</p> <ol> <li> <p>\u4ee5\u4e0b\u7a0b\u5e8f\u7684 (\u53ef\u80fd) \u8f93\u51fa\u662f\u4ec0\u4e48\uff1f     C<pre><code>int main()\n{\n    int x = *(int *)main;\n    printf(\"%x\\n\", x);    // fa1e0ff3\uff08\u5c0f\u7aef\uff09\n    printf(\"%p\\n\", main); //0x556b3315c149\uff0c\u6bcf\u6b21\u4e0d\u4e00\u6837\n}\n</code></pre></p> <p>Bash<pre><code>objdump -d a.out\n0000000000001149 &lt;main&gt;:\n1149:       f3 0f 1e fa             endbr64 \n114d:       55                      push   %rbp\n114e:       48 89 e5                mov    %rsp,%rbp\n1151:       48 83 ec 10             sub    $0x10,%rsp\n...\n</code></pre> 2. \u67e5\u770b\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff1a</p> <ul> <li> <p>/proc/[pid]/maps</p> Bash<pre><code>linux$ ps\nPID TTY          TIME CMD\n18222 pts/3    00:00:00 dbus-launch\n22713 pts/3    00:00:01 bash\n29368 pts/3    00:00:00 ps\nlinux$ vi /proc/22713/maps\n55e7a0632000-55e7a0711000 r-xp 0002f000 08:20 1241                       /usr/bin/bash\n55e7a0711000-55e7a074b000 r--p 0010e000 08:20 1241                       /usr/bin/bash\n55e7a074c000-55e7a0750000 r--p 00148000 08:20 1241                       /usr/bin/bash\n55e7a0750000-55e7a0759000 rw-p 0014c000 08:20 1241                       /usr/bin/bash\n...\n7ffdf9eb0000-7ffdf9ed2000 rw-p 00000000 00:00 0                          [stack]\n7ffdf9f79000-7ffdf9f7d000 r--p 00000000 00:00 0                          [vvar]\n7ffdf9f7d000-7ffdf9f7f000 r-xp 00000000 00:00 0                          [vdso]\n</code></pre> <p>\u65e0\u9700\u9677\u5165\u5185\u6838\u7684\u7cfb\u7edf\u8c03\u7528: vvar (data)/vdso (code)\u3002\u4f8b\u5982\u65f6\u95f4\u8fd9\u6837\u7684\u6570\u636e\uff0c\u53ea\u6709\u64cd\u4f5c\u7cfb\u7edf\u6709\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f\u53ea\u662f\u8bfb\u65f6\u95f4\u6233\uff0c\u4e0d\u4f1a\u6539\u5b83\uff0c\u5bf9\u4e8e\u8fd9\u6837\u53ea\u8bfb\u7684\u6570\u636e\uff0c\u65e0\u9700\u8fdb\u5165\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u3002\u56e0\u6b64\uff0c\u64cd\u4f5c\u7cfb\u7edf\u91cc\u53ea\u8bfb\u7684\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u7684\u65b9\u5f0f\u5171\u4eab\u7ed9\u8fdb\u7a0b\u3002</p> </li> <li> <p>pmap [pid]</p> Bash<pre><code>linux$ pmap 22713\n22713:   /bin/bash\n000055e7a0603000    188K r---- bash\n000055e7a0632000    892K r-x-- bash\n000055e7a0711000    232K r---- bash\n000055e7a074c000     16K r---- bash\n000055e7a0750000     36K rw--- bash\n000055e7a0759000     44K rw---   [ anon ]\n000055e7a1dbc000   1832K rw---   [ anon ]\n...\n</code></pre> </li> <li> <p>gdb cmd: <code>info proc mappings</code></p> </li> </ul> </li> <li> <p>\u7ba1\u7406\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\uff1a\u5728\u72b6\u6001\u673a\u72b6\u6001\u4e0a\u589e\u52a0/\u5220\u9664/\u4fee\u6539\u4e00\u6bb5\u53ef\u8bbf\u95ee\u7684\u5185\u5b58</p> C<pre><code>// \u6620\u5c04\nvoid *mmap(void *addr, size_t length, int prot, int flags,\n           int fd, off_t offset);\nint munmap(void *addr, size_t length);\n\n// \u4fee\u6539\u6620\u5c04\u6743\u9650\nint mprotect(void *addr, size_t length, int prot);\n</code></pre> <p>\u4f8b\u5b50\uff1a</p> C<pre><code>#include &lt;unistd.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/mman.h&gt;\n\n#define GiB * (1024LL * 1024 * 1024)\n\nint main() {\n    volatile uint8_t *p = mmap(\n        NULL,\n        8 GiB,\n        PROT_READ | PROT_WRITE,\n        MAP_ANONYMOUS | MAP_PRIVATE,\n        -1, 0\n    );\n\n    printf(\"mmap: %lx\\n\", (uintptr_t)p);\n\n    if ((intptr_t)p == -1) {\n        perror(\"cannot map\");\n        exit(1);\n    }\n\n    *(p + 2 GiB) = 1;\n    *(p + 4 GiB) = 2;\n    *(p + 7 GiB) = 3;\n    printf(\"Read get: %d\\n\", *(p + 4 GiB));\n    printf(\"Read get: %d\\n\", *(p + 6 GiB));\n    printf(\"Read get: %d\\n\", *(p + 7 GiB));\n}\n</code></pre> <p>Python<pre><code>import hexdump\nimport mmap\n\nwith open('/dev/sda', 'rb') as fp:\n    mm = mmap.mmap(fp.fileno(),\n                prot=mmap.PROT_READ, length=128 &lt;&lt; 30)\n    hexdump.hexdump(mm[:512]) # \u5c06\u78c1\u76d8sda\u7684128GiB\u6620\u5c04\u5230\u5185\u5b58\uff0c\u5e76\u67e5\u770b\u524d512\u5b57\u8282\n</code></pre> 4. \u5165\u4fb5\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4</p> <ul> <li>\u8c03\u8bd5\u5668 (gdb)<ul> <li>gdb \u53ef\u4ee5\u4efb\u610f\u89c2\u6d4b\u548c\u4fee\u6539\u7a0b\u5e8f\u7684\u72b6\u6001</li> </ul> </li> <li>Profiler (perf)<ul> <li>M3 \u4e2d\u501f\u52a9\u5b83\u7406\u89e3\u7a0b\u5e8f\u7684\u6027\u80fd\u74f6\u9888</li> </ul> </li> </ul> <p>\u4f8b\u5b50\uff1a\u91d1\u5c71\u6e38\u4fa0</p> <ul> <li> <p>\u5730\u5740\u7a7a\u95f4\u90a3\u4e48\u5927\uff0c\u54ea\u4e2a\u624d\u662f \u201c\u91d1\u94b1\u201d\uff1f</p> <ul> <li>\u5305\u542b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u6bcf\u6b21\u5730\u5740\u90fd\u4e0d\u4e00\u6837</li> <li>\u601d\u8def\uff1aEverything is a state machine<ul> <li>\u89c2\u5bdf\u72b6\u6001\u673a\u7684 trace\uff0c\u5c31\u77e5\u9053\u54ea\u4e2a\u662f\u91d1\u94b1\u4e86</li> </ul> </li> </ul> </li> <li> <p>\u67e5\u627e + Filter</p> <ul> <li>\u8fdb\u5165\u6e38\u620f\u65f6 exp = 4950</li> <li>\u6253\u4e86\u4e2a\u602a exp = 5100</li> <li>\u7b26\u5408 4950 \u2192 5100 \u53d8\u5316\u7684\u5185\u5b58\u5730\u5740\u662f\u5f88\u5c11\u7684<ul> <li>\u597d\u4e86\uff0c\u51fa\u95e8\u5c31\u662f\u6ee1\u7ea7\u4e86</li> </ul> </li> </ul> </li> </ul> <p>knight.c: <code>sudo ./knight VirtualBoxVM</code> -&gt; <code>s 5000</code> -&gt; spend 800 -&gt; <code>s 4200</code> -&gt; <code>w 1000000</code> C<pre><code>#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;regex&gt;\n#include &lt;cstdio&gt;\n#include &lt;unistd.h&gt;\n#include &lt;fcntl.h&gt;\nusing std::string, std::to_string;\n\nstruct Game {\n    string name; // Name of the traced process\n    int pid;     // Pid of the traced process\n    int fd;      // Memory file of the traced process\n\n    std::vector&lt;uintptr_t&gt; remain; // Watched addresses\n\npublic:\n    Game(string proc_name):\n        name(proc_name),\n        pid(stoi(run(\"pidof \" + proc_name))) {\n\n        // See: proc(5)\n        string memfile = \"/proc/\" + to_string(pid) + \"/mem\";\n\n        // We need root permission to open this file;\n        // otherwise it would be too dangerous.\n        fd = open(memfile.c_str(), O_RDWR);\n        if (fd &lt; 0) {\n            perror(memfile.c_str());\n            exit(1);\n        }\n    }\n\n    ~Game() {\n        close(fd);\n    }\n\n    void search_for(uint32_t val) {\n        if (remain.size() == 0) {\n            // No match. Start a new round of search.\n\n            string maps = run(\"pmap -x \" + to_string(pid));\n\n            std::regex r(\n                R\"(^([0-9a-f]+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+rw.*)\"\n            );\n\n            std::istringstream iss(maps);\n            for (string line; std::getline(iss, line); ) {\n                std::smatch match;\n                if (std::regex_search(line, match, r)) {\n                    uintptr_t start = stoll(match[1].str(), nullptr, 16);\n                    uintptr_t size = stoll(match[2], nullptr, 10) * 1024;\n                    printf(\"Scanning %lx--%lx\\n\", start, start + size);\n\n                    // Copy process memory to local\n                    std::unique_ptr&lt;uint32_t[]&gt; mem(new uint32_t [size / 4]);\n                    lseek(fd, start, SEEK_SET);\n                    size = read(fd, mem.get(), size);\n\n                    for (uintptr_t off = 0; off &lt; size; off += 4) {\n                        if (mem[off / 4] == val) {\n                            // Found a match!\n                            remain.push_back(start + off);\n                        }\n                    }\n                }\n            }\n        } else {\n            // Search in the watched values.\n\n            std::erase_if(remain, [this, val](uintptr_t addr) {\n                return load(addr) != val;\n            });\n        }\n        printf(\"There are %ld match(es).\\n\", remain.size());\n    }\n\n    void reset() {\n        remain.clear();\n    }\n\n    void overwrite(uint32_t val) {\n        int nwrite = 0;\n        for (uintptr_t addr : remain) {\n            store(addr, val);\n            nwrite++;\n        }\n        printf(\"%d value(s) written.\\n\", nwrite);\n    }\n\nprivate:\n    uint32_t load(uintptr_t addr) {\n        // Load 32-bit value from another address space\n        uint32_t val;\n        lseek(fd, addr, SEEK_SET);\n        read(fd, &amp;val, sizeof(val));\n        return val;\n    }\n\n    void store(uintptr_t addr, uint32_t val) {\n        // Store 32-bit value to another address space\n        lseek(fd, addr, SEEK_SET);\n        write(fd, &amp;val, sizeof(val));\n    }\n\n    static string run(const string &amp;cmd) {\n        std::array&lt;char,128&gt; buf;\n        string result;\n\n        FILE *pipe = popen(cmd.c_str(), \"r\");\n        if (!pipe) {\n            perror(cmd.c_str());\n            exit(1);\n        }\n\n        while (fgets(buf.data(), buf.size(), pipe) != nullptr) {\n            result += buf.data();\n        }\n\n        pclose(pipe);\n        return result;\n    }\n};\n\n\nint main(int argc, char *argv[]) {\n    Game g(argv[1]);\n    uint32_t val;\n    char buf[64];\n\n    printf(\n        \"Usage:\\n\"\n        \"  - s 100: search for value\\n\"\n        \"  - w 99999: overwrite value (for search matches)\\n\"\n        \"  - r: reset search\\n\\n\"\n    );\n\n    while (!feof(stdin)) {\n        printf(\"(%s %d) \", g.name.c_str(), g.pid);\n        scanf(\"%s\", buf);\n\n        switch (buf[0]) {\n            case 'q': return 0;\n            case 's': scanf(\"%d\", &amp;val); g.search_for(val); break;\n            case 'w': scanf(\"%d\", &amp;val); g.overwrite(val); break;\n            case 'r': g.reset(); break;\n        }\n    }\n}\n</code></pre></p> </li> <li> <p>\u7ed9\u8fdb\u7a0b\u53d1\u9001 GUI (\u952e\u76d8/\u9f20\u6807)\u4e8b\u4ef6</p> <ul> <li>\u505a\u4e2a\u9a71\u52a8 (\u53ef\u7f16\u7a0b\u952e\u76d8/\u9f20\u6807)</li> <li>\u5229\u7528\u64cd\u4f5c\u7cfb\u7edf/\u7a97\u53e3\u7ba1\u7406\u5668\u63d0\u4f9b\u7684 API<ul> <li>xdotool</li> <li>ydotool</li> <li>evdev (\u6309\u952e\u663e\u793a\u811a\u672c\uff1b\u4e3b\u64ad\u5e38\u7528)</li> </ul> </li> </ul> <p>\u4f8b\u5b50\uff1a\u5b9e\u73b0\u6309\u952e\u7cbe\u7075\uff0c\u5b9e\u73b0\u6309\u952e\u7cbe\u7075\u4e0d\u5fc5\u5165\u4fb5\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u4e86 I/O \u8bbe\u5907\uff0c\u6211\u4eec\u76f8\u5e94\u6a21\u62df\u51fa\u6309\u952e\u7684\u4e8b\u4ef6\u5373\u53ef\u3002\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e3a\u8fdb\u7a0b\u50cf\u6e38\u620f\u4fee\u6539\u5668\u90a3\u6837\u6ce8\u5165\u6309\u952e\u4e8b\u4ef6\u3002</p> <p><code>sudo ./anjian</code>\uff0cthen open https://js13kgames.com/games/spacebar-clicker/index.html Bash<pre><code>#!/bin/bash\n\n# Needs sudo. Try:\n# https://js13kgames.com/games/spacebar-clicker/index.html\n\necho 'Start in 5 seconds...'\nydotoold &amp;&gt; /dev/null &amp;\nsleep 5\n\nfor _ in $(seq 1 200)\ndo\n    ydotool type ' '\n    sleep 0.01\ndone\n</code></pre></p> </li> <li> <p>\u6539\u53d8\u8fdb\u7a0b\u5bf9\u65f6\u95f4\u7684\u611f\u77e5</p> <p>\u7a0b\u5e8f = \u72b6\u6001\u673a</p> <ul> <li> <p>\u201c\u8ba1\u7b97\u6307\u4ee4\u201d \u662f\u4e0d\u80fd\u611f\u77e5\u65f6\u95f4\u7684</p> <ul> <li>spin count \u8ba1\u65f6\u4f1a\u51fa\u73b0 \u201c\u673a\u5668\u53d8\u5feb\uff0c\u6e38\u620f\u6ca1\u6cd5\u73a9\u201d \u7684\u60c5\u51b5</li> <li>syscall \u662f\u611f\u77e5\u65f6\u95f4\u7684\u552f\u4e00\u65b9\u6cd5</li> </ul> </li> <li> <p>\u201c\u52ab\u6301\u201d \u548c\u65f6\u95f4\u76f8\u5173\u7684 syscall/\u5e93\u51fd\u6570</p> <ul> <li>\u6539\u53d8\u7a0b\u5e8f\u5bf9\u65f6\u95f4\u7684\u8ba4\u77e5</li> <li>\u5c31\u50cf\u624b\u8868\u8c03\u5feb/\u6162\u4e86\u4e00\u6837</li> </ul> </li> </ul> <p>\u4f8b\u5b50\uff1a\u53d8\u901f\u9f7f\u8f6e <code>./gear 10 tetris</code></p> <p>gear\uff1a\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2apython\u811a\u672c\uff0c\u8c03\u7528 gdb \u8c03\u8bd5 tetris \u6e38\u620f\uff0c\u52ab\u6301 gettimeofday \u7cfb\u7edf\u8c03\u7528\uff0c\u5b9e\u73b0\u53d8\u901f\u9f7f\u8f6e\u3002 Python<pre><code>#!/usr/bin/env python3\n\nimport subprocess\nimport sys\n\ntry:\n    ratio, exe = sys.argv[1:]\nexcept:\n    print(f'Example: {sys.argv[0]} 10 tetris  # 10X speedup')\n    exit(1)\n\nsubprocess.run(\n    [\n        'gdb',\n        '-ex', f'set $gear_ratio = {ratio}',\n        '-x', 'gear-gdb.py',\n        exe,\n    ]\n)\n</code></pre></p> Python<pre><code>import gdb\nimport datetime\n\nratio = float(gdb.parse_and_eval('$gear_ratio'))\n\n# Get the current time\nstart = datetime.datetime.now()\n\ndef hacked_time():\n    now = datetime.datetime.now()\n\n    # The speed of the clock is adjusted\n    t = start + (now - start) * ratio\n\n    tv_sec = int(t.timestamp())\n    tv_usec = t.microsecond\n    return (tv_sec, tv_usec)\n\nclass SetTimevalBreakpoint(gdb.Breakpoint):\n    def __init__(self):\n        super(SetTimevalBreakpoint, self).__init__(\n            'gettimeofday',\n            gdb.BP_BREAKPOINT,\n            internal=False\n        )\n\n    def stop(self):\n        tv_sec, tv_usec = hacked_time()\n\n        # Replace the function body\n        gdb.execute(\n            'set *(struct timeval *)($rdi) = {{ {}, {} }}'\n                .format(tv_sec, tv_usec)\n        )\n        gdb.execute('set $rax = 0')\n        gdb.execute('return')\n\n        return False  # Continue execution\n\nSetTimevalBreakpoint()\ngdb.execute('run')\n</code></pre> </li> <li> <p>\u8f6f\u4ef6\u52a8\u6001\u66f4\u65b0\uff1a\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 patch \u51fd\u6570\u7684\u5934\u90e8\u4e3a\u4e00\u4e2a\u8df3\u8f6c\u5b9e\u73b0\u5bf9\u4e00\u4e2a\u51fd\u6570\u7684 \u201c\u8fd0\u884c\u65f6\u70ed\u66f4\u65b0\u201d\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;assert.h&gt;\n\n__attribute__((noinline)) void foo() {\n    printf(\"In old function %s\\n\", __func__);\n}\n\n__attribute__((noinline)) void foo_new() {\n    printf(\"In new function %s\\n\", __func__);\n}\n\n// 48 b8 (64-bit imm)   movabs $imm,%rax\n// ff e0                jmpq   *%rax\nconst char PATCH[] = \"\\x48\\xb8--------\\xff\\xe0\";\n\nvoid DSU(void *func, void *func_new) {\n    int flag = PROT_WRITE | PROT_READ | PROT_EXEC, rc, np;\n\n    // Grant write permission to the memory\n    // We must handle boundary cases\n    uintptr_t fn = (uintptr_t)func;\n    uintptr_t base = fn &amp; ~0xfff;\n    if (fn + sizeof(PATCH) &gt; base + 4096) {\n        np = 2;  // Cross page boundary\n    } else {\n        np = 1;\n    }\n    printf(\"np = %d\\n\", np);\n\n    rc = mprotect((void *)base, np * 4096, flag);\n    assert(rc == 0);  // Not expecting a failure\n\n    // Patch the first instruction (this is UB in C spec)\n    memcpy(func, PATCH, sizeof(PATCH));\n    memcpy((char *)func + 2, &amp;func_new, sizeof(func_new));\n\n    // Revoke the write permission\n    rc = mprotect((void *)base, np * 4096, PROT_READ | PROT_EXEC);\n    assert(rc == 0);  // Not expecting a failure\n}\n\nint main() {\n    setbuf(stdout, NULL);\n    foo();\n    DSU(foo, foo_new);  // Dynamic software update\n    foo();\n}\n</code></pre> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-16-unix-shell","title":"Lecture 16 \u7cfb\u7edf\u8c03\u7528\u548cUNIX Shell","text":"<p>Take-away Messages</p> <p>\u901a\u8fc7 freestanding \u7684 shell\uff0c\u6211\u4eec\u9610\u91ca\u4e86 \u201c\u53ef\u4ee5\u5728\u7cfb\u7edf\u8c03\u7528\u4e0a\u521b\u5efa\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5e94\u7528\u4e16\u754c\u201d \u7684\u771f\u6b63\u542b\u4e49\uff1a\u64cd\u4f5c\u7cfb\u7edf\u7684 API \u548c\u5e94\u7528\u7a0b\u5e8f\u662f\u4e92\u76f8\u6210\u5c31\u3001\u87ba\u65cb\u751f\u957f\u7684\uff1a\u6709\u4e86\u65b0\u7684\u5e94\u7528\u9700\u6c42\uff0c\u5c31\u6709\u4e86\u65b0\u7684\u64cd\u4f5c\u7cfb\u7edf\u529f\u80fd\u3002\u800c UNIX \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u7cbe\u7b80\u3001\u7a33\u5b9a\u7684\u63a5\u53e3 (fork, execve, exit, pipe ,...)\uff0c\u7eb5\u7136\u6709\u6c89\u91cd\u7684\u5386\u53f2\u8d1f\u62c5\uff0c\u5b83\u5728\u4eca\u5929\u4f9d\u7136\u5de5\u4f5c\u5f97\u5f88\u597d\u3002</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u8c61\uff1a</p> <ul> <li>\u8fdb\u7a0b\u548c\u5730\u5740\u7a7a\u95f4<ul> <li>\u8fdb\u7a0b\u7ba1\u7406\uff1afork, execve, exit</li> <li>\u5185\u5b58\u7ba1\u7406\uff1ammap, munmap, mprotect</li> </ul> </li> <li>\u6587\u4ef6\u548c\u8bbe\u5907<ul> <li>\u6587\u4ef6\uff1a\u6709 \u201c\u540d\u5b57\u201d \u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\u5b57\u8282\u6d41 (\u7ec8\u7aef) \u6216\u5b57\u8282\u5e8f\u5217 (\u666e\u901a\u6587\u4ef6\uff1b\u5305\u62ec /proc/*)</li> <li>\u6587\u4ef6\u63cf\u8ff0\u7b26 (file descriptor\uff0cWindows\u4e2d\u53ebhandle\u53e5\u67c4)\uff1a\u6307\u5411\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u8c61\u7684 \u201c\u6307\u9488\u201d</li> <li>Everything is a file\uff0c\u901a\u8fc7\u6307\u9488\u53ef\u4ee5\u8bbf\u95ee \u201c\u4e00\u5207\u201d</li> <li>\u5bf9\u8c61\u7684\u8bbf\u95ee\u90fd\u9700\u8981\u6307\u9488\uff1aopen, close, read/write (\u89e3\u5f15\u7528), lseek (\u6307\u9488\u5185\u8d4b\u503c/\u8fd0\u7b97), dup (\u6307\u9488\u95f4\u8d4b\u503c)</li> </ul> </li> <li>IPC Endpoints (Inter-Process Communication\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1)<ul> <li>\u7ba1\u9053\uff1a\u4e00\u4e2a\u7279\u6b8a\u7684 \u201c\u6587\u4ef6\u201d (\u6d41)<ul> <li>\u7531\u8bfb\u8005/\u5199\u8005\u5171\u4eab</li> <li>\u8bfb\u53e3\uff1a\u652f\u6301 read <code>fd[0]</code></li> <li>\u5199\u53e3\uff1a\u652f\u6301 write <code>fd[1]</code></li> </ul> </li> <li>\u533f\u540d\u7ba1\u9053<ul> <li>\u8fd4\u56de\u4e24\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26</li> <li>\u8fdb\u7a0b\u540c\u65f6\u62e5\u6709\u8bfb\u53e3\u548c\u5199\u53e3 C<pre><code>int pipe(int pipefd[2]);\n</code></pre></li> </ul> </li> </ul> </li> </ul> </li> <li> <p>\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u7528\u4e8e\u8bbf\u95ee\u6587\u4ef6\u6216\u5176\u4ed6\u8f93\u5165/\u8f93\u51fa\u8d44\u6e90\u7684 \u201c\u6307\u9488\u201d\u3002\u5728 Unix \u548c\u7c7b Unix \u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u3001\u7ba1\u9053\u3001\u7f51\u7edc\u8fde\u63a5\u6216\u5176\u4ed6\u7c7b\u4f3c\u7684\u8d44\u6e90\u3002\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u6216\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u6d41\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u63cf\u8ff0\u7b26\u6765\u8bfb\u53d6\u3001\u5199\u5165\u6216\u64cd\u4f5c\u5bf9\u5e94\u7684\u6587\u4ef6\u6216\u8d44\u6e90\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n\nvoid try_open(const char *fname) {\n    int fd = open(fname, O_RDWR);\n    // fd is a \"pointer\" to a kernel object.\n\n    printf(\"open(\\\"%s\\\") = %d\\n\", fname, fd);\n\n    if (fd &lt; 0) {\n        perror(fname);\n        goto release;\n    } else {\n        // ...\n    }\n\nrelease:\n    if (fd &gt;= 0) {\n        close(fd);\n    }\n}\n\nint main() {\n    try_open(\"/something/not/exist\");\n    try_open(\"/dev/sda\"); // hard drive\n}\n</code></pre> </li> <li> <p>UNIX \u7ba1\u9053 (pipe) \u662f\u4e00\u79cd\u5178\u578b\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u673a\u5236\uff0c\u5141\u8bb8\u6570\u636e\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e4b\u95f4\u5355\u5411\u6d41\u52a8\u3002\u7ba1\u9053\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u7279\u6b8a\u7684\u6587\u4ef6\uff0c\u5176\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u6570\u636e\u5199\u5165\u7ba1\u9053\u7684\u4e00\u7aef\uff0c\u800c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u53e6\u4e00\u7aef\u8bfb\u53d6\u6570\u636e\u3002</p> <ul> <li>pipe read \u5728\u6ca1\u6709\u6570\u636e\u65f6\u4f1a\u7b49\u5f85</li> <li>pipe write \u5728\u6709\u8bfb\u8005\u6253\u5f00\u65f6\uff0c\u4f1a\u5199\u5165\u64cd\u4f5c\u7cfb\u7edf\u7684\u7f13\u51b2\u533a\u5e76\u8fd4\u56de</li> <li>write \u5982\u679c \u201c\u4e0d\u592a\u591a\u201d\uff0c\u4e00\u5bf9 write-read \u662f\u539f\u5b50\u7684</li> <li>write \u5982\u679c\u8d85\u8fc7 PIPE_BUF\uff0c\u53ef\u80fd\u4f1a\u88ab\u62c6\u6210\u591a\u4efd</li> <li>\u5982\u679c\u8bfb\u8005\u5173\u95ed\uff0c\u4f1a\u6536\u5230 SIGPIPE \u4fe1\u53f7<ul> <li>\u7ecf\u5e38\u770b\u5230\u7684 \u201cBroken Pipe\u201d</li> </ul> </li> <li>\u201c\u770b\u4e0d\u5230\u201d \u7684 SIGPIPE<ul> <li><code>yes | head -n 1</code></li> <li><code>(yes; echo $? &gt; /dev/stderr) | head -n 1</code> (\u8fd4\u56de141\u800c\u975e0\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd8\u662f\u6709SIGPIPE\u53d1\u751f)</li> </ul> </li> <li>\u201c\u770b\u5f97\u5230\u201d \u7684 SIGPIPE<ul> <li><code>python3 -c 'while True: print(1)' | head -n 1</code></li> </ul> </li> </ul> <p></p> <p>named_pipe.c: C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;errno.h&gt;\n\n// We also have UNIX domain sockets for local inter-process\n// communication--they also have a name in the file system\n// like \"/var/run/docker.sock\". This is similar to a named\n// pipe.\n#define PIPE_NAME \"/tmp/my_pipe\"\n\nvoid pipe_read() {\n    int fd = open(PIPE_NAME, O_RDONLY);\n    char buffer[1024];\n\n    if (fd == -1) {\n        perror(\"open\");\n        exit(1);\n    }\n\n    // Read from the pipe\n    int num_read = read(fd, buffer, sizeof(buffer));\n    if (num_read &gt; 0) {\n        printf(\"Received: %s\\n\", buffer);\n    } else {\n        printf(\"No data received.\\n\");\n    }\n    close(fd);\n}\n\nvoid pipe_write(const char *content) {\n    // Open the pipe for writing\n    int fd = open(PIPE_NAME, O_WRONLY);\n\n    if (fd == -1) {\n        perror(\"open\");\n        exit(1);\n    }\n\n    // Write the message to the pipe\n    write(fd, content, strlen(content) + 1);\n    close(fd);\n}\n\nint main(int argc, char *argv[]) {\n    if (argc &lt; 2) {\n        fprintf(stderr, \"Usage: %s read|write [message]\\n\", argv[0]);\n        return 1;\n    }\n\n    // Create the named pipe if it does not exist\n    if (mkfifo(PIPE_NAME, 0666) == -1) {\n        if (errno != EEXIST) {\n            perror(\"mkfifo\");\n            return 1;\n        }\n    } else {\n        printf(\"Created \" PIPE_NAME \"\\n\");\n    }\n\n    if (strcmp(argv[1], \"read\") == 0) {\n        pipe_read();\n    } else if (strcmp(argv[1], \"write\") == 0) {\n        pipe_write(argv[2]);\n    } else {\n        fprintf(stderr, \"Invalid command. Use 'read' or 'write'.\\n\");\n        return 1;\n    }\n\n    return 0;\n}\n</code></pre></p> <p>anonymous-pipe.c\uff1a\u7236\u8fdb\u7a0b\u6301\u6709\u5199\u53e3\uff0c\u5b50\u8fdb\u7a0b\u6301\u6709\u8bfb\u53e3\u3002 C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/wait.h&gt;\n\nvoid do_parent(int fd) {\n    const char *msg = \"Hello, world!\";\n\n    printf(\"[%d] Write: '%s'\\n\", getpid(), msg);\n    write(fd, msg, strlen(msg) + 1);\n\n    close(fd);\n\n    // Wait for the child to finish\n    wait(NULL);\n\n    printf(\"[%d] Done.\\n\", getpid());\n}\n\nvoid do_child(int fd) {\n    static char buf[1024];\n\n    ssize_t num_read = read(fd, buf, sizeof(buf));\n    if (num_read == -1) {\n        perror(\"read\");\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"[%d] Got: '%s'\\n\", getpid(), buf);\n\n    // Close the read end of the pipe\n    close(fd);\n}\n\nint main() {\n    int pipefd[2];\n\n    // Create a pipe\n    if (pipe(pipefd) == -1) {\n        perror(\"pipe\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Fork the current process\n    pid_t pid = fork();\n    if (pid == -1) {\n        perror(\"fork\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (pid == 0) {\n        // Child\n        close(pipefd[1]); // Close unused write end\n        do_child(pipefd[0]);\n    } else {\n        // Parent\n        close(pipefd[0]); // Close unused read end\n        do_parent(pipefd[1]);\n    }\n\n    return 0;\n}\n</code></pre></p> </li> <li> <p>sh.c debug\uff1a\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\uff0c\u8fdb\u7a0b3\u7684\u6807\u51c6\u8f93\u51fa<code>1</code>\u5411\u7ba1\u9053\u91cc\u5199\u6570\u636e\uff0c\u7136\u540e\u6267\u884c<code>runcmd(pcmd-&gt;left);</code>\u8fdb\u7a0b4\u7684\u6807\u51c6\u8f93\u5165<code>0</code>\u4ece\u7ba1\u9053\u91cc\u8bfb\u6570\u636e\uff0c\u7136\u540e\u6267\u884c<code>runcmd(pcmd-&gt;right);</code></p> Bash<pre><code>Process 3 (11026)\n0 &lt;-&gt; /dev/pts/7\n1 --&gt; [=== 2123156 ===]\n2 &lt;-&gt; /dev/pts/7\n\nProcess 4 (11699)*\n    0 &lt;-- [=== 2123156 ===]\n    1 &lt;-&gt; /dev/pts/7\n    2 &lt;-&gt; /dev/pts/7\n\n112                 runcmd(pcmd-&gt;right);\n</code></pre> </li> <li> <p>\u4ee5\u4e0b\u62a5\u9519\u7684\u539f\u56e0\uff1a<code>&gt;</code>\u548c<code>|</code>\u4e00\u6837\uff0c\u90fd\u662f\u5148\u628a\u4e24\u8fb9\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u51c6\u5907\u597d\uff0c\u4e5f\u5c31\u662f\u8bf4<code>sudo echo hello</code>\u548c\u6253\u5f00<code>/etc/a.txt</code>\u662f\u5206\u5f00\u6267\u884c\u7684\uff0c\u56e0\u6b64\u65e0\u6743\u9650\u6253\u5f00<code>/etc/a.txt</code></p> Bash<pre><code>$ echo hello &gt; /etc/a.txt\nbash: /etc/a.txt: Permission denied\n\n$ sudo echo hello &gt; /etc/a.txt\nbash: /etc/a.txt: Permission denied\n</code></pre> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-17-c","title":"Lecture 17 C \u6807\u51c6\u5e93\u548c\u5b9e\u73b0","text":"<p>Take-away Messages</p> <p>\u5728\u7cfb\u7edf\u8c03\u7528\u548c\u8bed\u8a00\u673a\u5236\u7684\u57fa\u7840\u4e0a\uff0clibc \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5f00\u53d1\u8de8\u5e73\u53f0\u5e94\u7528\u7a0b\u5e8f\u7684 \u201c\u7b2c\u4e00\u7ea7\u62bd\u8c61\u201d\u3002\u5728\u6b64\u57fa\u7840\u4e0a\u6784\u5efa\u8d77\u4e86\u4e07\u5343\u4e16\u754c\uff1aC++ (\u6269\u5145\u4e86 C \u6807\u51c6\u5e93)\u3001Java\u3001\u6d4f\u89c8\u5668\u4e16\u754c\u2026\u2026\u4eca\u5929\uff0cC \u8bed\u8a00\u5728\u5e94\u7528\u5f00\u53d1\u65b9\u9762\u6709\u5f88\u591a\u7f3a\u9677\uff0c\u4f46\u4ecd\u7136\u4e3a \u201c\u7b2c\u4e00\u7ea7\u62bd\u8c61\u201d \u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u8303\u672c\u3002</p> <ol> <li> <p>C\u91cc\u7684 <code>_start</code> \u51fd\u6570\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u8d77\u70b9\u3002\u5f53\u4e00\u4e2aC\u7a0b\u5e8f\u88ab\u7f16\u8bd1\u548c\u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u5e76\u8df3\u8f6c\u5230 <code>_start</code> \u51fd\u6570\u5f00\u59cb\u6267\u884c\u3002<code>_start</code> \u51fd\u6570\u901a\u5e38\u662f\u7531\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u81ea\u52a8\u751f\u6210\u7684\uff0c\u5b83\u8d1f\u8d23\u521d\u59cb\u5316\u7a0b\u5e8f\u8fd0\u884c\u6240\u9700\u7684\u73af\u5883\uff0c\u7136\u540e\u8c03\u7528 <code>main</code> \u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>_start</code>\u51fd\u6570\u662f\u64cd\u4f5c\u7cfb\u7edf\u548c\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e4b\u95f4\u7684\u7ea6\u5b9a\uff08\u5728libc\u91cc\u7684Scrt1.o\u4f1a\u5e2e\u5fd9\u5b9a\u4e49\u597d\uff09\u3002\u4ee5\u4e0b\u53ef\u4ee5\u770b\u5230Entry point address\u662f0x4019f5\uff0c\u6b63\u662f<code>_start</code>\u7684\u5730\u5740\u3002</p> Bash<pre><code>linux$ readelf -h sh\nELF Header:\nMagic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \nClass:                             ELF64\nData:                              2's complement, little endian\nVersion:                           1 (current)\nOS/ABI:                            UNIX - System V\nABI Version:                       0\nType:                              EXEC (Executable file)\nMachine:                           Advanced Micro Devices X86-64\nVersion:                           0x1\nEntry point address:               0x4019f5\nStart of program headers:          64 (bytes into file)\nStart of section headers:          23696 (bytes into file)\nFlags:                             0x0\nSize of this header:               64 (bytes)\nSize of program headers:           56 (bytes)\nNumber of program headers:         8\nSize of section headers:           64 (bytes)\nNumber of section headers:         19\nSection header string table index: 18\n\nlinux$ objdump -d sh | less\n00000000004019f5 &lt;_start&gt;:\n4019f5:       f3 0f 1e fa             endbr64 \n4019f9:       55                      push   %rbp\n4019fa:       48 89 e5                mov    %rsp,%rbp\n4019fd:       b8 00 00 00 00          mov    $0x0,%eax\n401a02:       e8 e9 fe ff ff          call   4018f0 &lt;main&gt;\n401a07:       be 00 00 00 00          mov    $0x0,%esi\n401a0c:       bf 3c 00 00 00          mov    $0x3c,%edi\n401a11:       b8 00 00 00 00          mov    $0x0,%eax\n401a16:       e8 e5 f5 ff ff          call   401000 &lt;syscall&gt;\n401a1b:       90                      nop\n401a1c:       5d                      pop    %rbp\n401a1d:       c3                      ret\n</code></pre> </li> <li> <p>\u7cfb\u7edf\u8c03\u7528\u662f\u5730\u57fa\uff0cC \u8bed\u8a00\u662f\u6846\u67b6\u3002glibc \u7684\u4ee3\u7801\u6709\u975e\u5e38\u6c89\u91cd\u7684\u5386\u53f2\u5305\u88b1\uff0c\u66f4\u9002\u5408\u5b66\u4e60\u7684 libc \u5b9e\u73b0\uff1amusl libc</p> <p>\u4f7f\u7528musl-gcc\u6765\u7f16\u8bd1\uff0c\u800c\u4e0d\u662fgcc\uff0c\u770b\u4e0bmusl-gcc\u7684\u771f\u9762\u76ee\uff1amusl-gcc\u901a\u8fc7.specs\u811a\u672c\u6765\u63a7\u5236\u7f16\u8bd1\u5668\u4e0d\u8981\u94fe\u63a5glibc\u800c\u662f\u94fe\u63a5\u81ea\u5df1\u7684libc\u3002</p> Bash<pre><code>linux$ cat (which musl-gcc)\n#!/bin/sh\nexec \"${REALGCC:-x86_64-linux-gnu-gcc}\" \"$@\" -specs \"/usr/lib/x86_64-linux-musl/musl-gcc.specs\"\n</code></pre> </li> <li> <p>debug dummy.c</p> C<pre><code>int main() {\n    return 1;\n}\n</code></pre> <p> \u64cd\u4f5c\u7cfb\u7edf\u5c06\u8fd9\u4e9b\u5185\u5bb9\u653e\u5165\u6808\u4e2d </p> <p>env.c\uff1a</p> C<pre><code>#include &lt;stdio.h&gt;\n\n// A mysteriously defined symbol.\n// Someone must defined it elsewhere.\nextern char **environ;\n\n// Like this even more mysterious one.\n// \"end\" can be of any type.\nextern void ******************************end;\n\nint main(int argc, char *argv[], char *envp[]) {\n    printf(\"environ: %p\\n\", environ);\n    printf(\"envp:    %p\\n\", envp);\n\n    for (char **env = environ; *env; env++) {\n        // key=value\n        printf(\"%s\\n\", *env);\n    }\n\n    end = NULL; // ???\n}\n</code></pre> <p>\u8f93\u51fa:</p> Bash<pre><code>environ: 0x7ffdb556d2d8\nenvp:    0x7ffdb556d2d8\nSHELL=/bin/bash\nCOLORTERM=truecolor\n...\n</code></pre> <p> System V ABI\u91cc\u5b9a\u4e49\u4e86\u89c4\u8303\uff1a</p> <p></p> <p>\u5176\u4ed6\u72b6\u6001 (\u4e3b\u8981\u662f\u5185\u5b58) \u5219\u662f\u7531\u53ef\u6267\u884c\u6587\u4ef6\u6307\u5b9a\uff0c\u8be6\u60c5\u770bLecture 19\u3002</p> </li> <li> <p>libc\u5bf9\u7cfb\u7edf\u8c03\u7528\u4e0e\u73af\u5883\u7684\u62bd\u8c61</p> <p>\u4ec0\u4e48\u662fstdout\uff1f</p> C<pre><code>static unsigned char buf[BUFSIZ+UNGET];\nhidden FILE __stdout_FILE = {\n    .buf = buf+UNGET,\n    .buf_size = sizeof buf-UNGET,\n    .fd = 1,\n    .flags = F_PERM | F_NORD,\n    .lbf = '\\n',\n    .write = __stdout_write,\n    .seek = __stdio_seek,\n    .close = __stdio_close,\n    .lock = -1,\n};\nFILE *const stdout = &amp;__stdout_FILE;\n</code></pre> </li> <li> <p>\u6240\u6709 API \u90fd\u53ef\u80fd\u5931\u8d25\uff0cerrno \u662f\u8fdb\u7a0b\u5171\u4eab\u8fd8\u662f\u7ebf\u7a0b\u72ec\u4eab\uff1f\u27a1\ufe0f \u7ebf\u7a0b\u72ec\u4eab\uff0cgdb\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230errno\u662ftls (Thread Local Storage)\u7684\u3002</p> </li> <li> <p>malloc() \u7684\u89c2\u5bdf\uff1a\u6211\u4eec\u9700\u8981\u7ba1\u7406\u7684\u5bf9\u8c61</p> <ul> <li>\u5c0f\u5bf9\u8c61\uff1a\u5b57\u7b26\u4e32\u3001\u4e34\u65f6\u5bf9\u8c61\u7b49\uff1b\u751f\u5b58\u5468\u671f\u53ef\u957f\u53ef\u77ed</li> <li>\u4e2d\u5bf9\u8c61\uff1a\u5bb9\u5668\u3001\u590d\u6742\u7684\u5bf9\u8c61\uff1b\u66f4\u957f\u7684\u751f\u5b58\u5468\u671f</li> <li>\u5927\u5bf9\u8c61\uff1a\u5de8\u5927\u7684\u5bb9\u5668\u3001\u5206\u914d\u5668\uff1b\u5f88\u957f\u7684\u751f\u5b58\u5468\u671f</li> </ul> <p>\u8bbe\u7f6e\u4e24\u5957\u7cfb\u7edf\uff1a</p> <ul> <li>Fast path (System I)<ul> <li>\u6027\u80fd\u6781\u597d\u3001\u5e76\u884c\u5ea6\u6781\u9ad8\u3001\u8986\u76d6\u5927\u90e8\u5206\u60c5\u51b5</li> <li>\u4f46\u6709\u5c0f\u6982\u7387\u4f1a\u5931\u8d25 (fall back to slow path)</li> </ul> </li> <li>Slow path (System II)<ul> <li>\u4e0d\u5728\u4e4e\u90a3\u4e48\u5feb</li> <li>\u4f46\u628a\u56f0\u96be\u7684\u4e8b\u60c5\u505a\u597d</li> </ul> </li> <li>\u8ba1\u7b97\u673a\u7cfb\u7edf\u91cc\u6709\u5f88\u591a\u8fd9\u6837\u7684\u4f8b\u5b50 (\u6bd4\u5982 cache)</li> </ul> <p>malloc: Fast Path \u8bbe\u8ba1 \u27a1\ufe0f \u7acb\u5373\u5728\u7ebf\u7a0b\u672c\u5730\u5206\u914d\u5b8c\u6210\u3002\u6d6a\u8d39\u4e00\u70b9\u7a7a\u95f4\uff0c\u4f46\u4f7f\u6240\u6709 CPU \u90fd\u80fd\u5e76\u884c\u5730\u7533\u8bf7\u5185\u5b58</p> <ul> <li>\u7ebf\u7a0b\u90fd\u4e8b\u5148\u74dc\u5206\u4e00\u4e9b \u201c\u9886\u5730\u201d (thread-local allocation buffer)</li> <li>\u9ed8\u8ba4\u4ece\u81ea\u5df1\u7684\u9886\u5730\u91cc\u5206\u914d<ul> <li>\u9664\u4e86\u5728\u53e6\u4e00\u4e2a CPU \u91ca\u653e\uff0cacquire lock \u51e0\u4e4e\u603b\u662f\u6210\u529f</li> </ul> </li> <li>\u5982\u679c\u81ea\u5df1\u7684\u9886\u5730\u4e0d\u8db3\uff0c\u5c31\u4ece\u5168\u5c40\u7684\u6c60\u5b50\u91cc\u501f\u4e00\u70b9</li> </ul> <p>malloc: Slow Path \u8bbe\u8ba1 \u27a1\ufe0f pgalloc()</p> </li> <li> <p>\u5982\u4f55\u8c03\u8bd5\u8fdb\u5165 musl libc</p> Bash<pre><code>tar -xzf musl-1.2.5.tar.gz  # \u89e3\u538b\u540e\u8fdb\u5165\ncd musl-1.2.5\n./configure --enable-debug  # \u8fd9\u6b65\u662f\u5173\u952e!\nmake &amp;&amp; make install        # \u7f16\u8bd1\u5e76\u5b89\u88c5\u5230 /usr/local/musl\necho 'export PATH=\"/usr/local/musl/bin:$PATH\"' &gt;&gt;  ~/.bashrc\nsource ~/.bashrc            # \u4fee\u6539\u73af\u5883\u53d8\u91cf path \u5e76\u751f\u6548\n</code></pre> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-18-linux","title":"Lecture 18 Linux \u64cd\u4f5c\u7cfb\u7edf","text":"<p>Take-away Messages</p> <p>\u6211\u4eec\u4ece CPU Reset \u540e\u7684 \u201c\u786c\u4ef6\u521d\u59cb\u72b6\u6001\u201d \u5230\u64cd\u4f5c\u7cfb\u7edf\u52a0\u8f7d\u5b8c init \u8fdb\u7a0b\u540e\u7684 \u201c\u8f6f\u4ef6\u521d\u59cb\u72b6\u6001\u201d\uff0c\u4ece\u6b64\u4ee5\u540e\uff0c\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u7684\u4e00\u5207\u90fd\u662f\u7531\u5e94\u7528\u7a0b\u5e8f\u4e3b\u5bfc\u7684\uff0c\u64cd\u4f5c\u7cfb\u7edf\u53ea\u662f\u63d0\u4f9b\u7cfb\u7edf\u8c03\u7528\u8fd9\u4e00\u670d\u52a1\u63a5\u53e3\u3002\u6b63\u662f\u7cfb\u7edf\u8c03\u7528 (\u5305\u62ec\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5bf9\u8c61) \u8fd9\u4e2a\u7a33\u5b9a\u7684\u3001\u5411\u540e\u517c\u5bb9\u7684\u63a5\u53e3\u968f\u7740\u5386\u53f2\u6f14\u5316\u548c\u79ef\u7d2f\uff0c\u5f62\u6210\u4e86\u96be\u4ee5\u903e\u8d8a\u7684\u6280\u672f\u5c4f\u969c\uff0c\u5728\u98a0\u8986\u6027\u7684\u6280\u672f\u9769\u65b0\u5230\u6765\u4e4b\u524d\uff0c\u53e6\u8d77\u7089\u7076\u90fd\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002</p> <ol> <li> <p>\u542f\u52a8 Linux - Initial RAM FS</p> <p>\u786c\u4ef6 (ISA) \u2192 \u64cd\u4f5c\u7cfb\u7edf\u5bf9\u8c61/\u7cfb\u7edf\u8c03\u7528 \u2192 libc \u2192 \u7cfb\u7edf\u5de5\u5177 (coretuils, busybox, ...) \u2192 \u5e94\u7528\u7a0b\u5e8f (xfce, vscode)</p> Bash<pre><code>make initramfs # \u9700\u8981/boot/vmlinuz\uff0cwsl\u91cc\u6ca1\u6709\uff0c\u5c31\u6ca1\u6709\u505a\u4e0b\u53bb\u4e86\nmake\nmake run\n/bin/busybox ls\n</code></pre> Bash<pre><code>exec switch_root /newroot/ /init\n# switch_root \u7a0b\u5e8f\u9996\u5148\u5c06\u5f53\u524d\u7684\u6839\u6587\u4ef6\u7cfb\u7edf\uff08initramfs\uff09\u5378\u8f7d\u3002\n# \u7136\u540e\uff0c\u5b83\u5c06\u65b0\u6839\u6587\u4ef6\u7cfb\u7edf\uff08/newroot/\uff09\u6302\u8f7d\u5230 / \u76ee\u5f55\u3002\n# \u63a5\u4e0b\u6765\uff0c\u5b83\u6267\u884c\u65b0\u6839\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u521d\u59cb\u5316\u7a0b\u5e8f /init\uff0c\u4ee5\u542f\u52a8\u7cfb\u7edf\u7684\u521d\u59cb\u5316\u8fdb\u7a0b\u3002\n# \u6700\u540e\uff0c\u5f53\u524d\u7684 shell \u8fdb\u7a0b\u88ab\u66ff\u6362\u4e3a\u65b0\u7684\u521d\u59cb\u5316\u8fdb\u7a0b\uff0c\u7cfb\u7edf\u7ee7\u7eed\u542f\u52a8\u3002\n# (exec\uff1a\u8fd9\u662f\u4e00\u4e2a shell \u5185\u7f6e\u547d\u4ee4\uff0c\u7528\u4e8e\u6267\u884c\u6307\u5b9a\u7684\u547d\u4ee4\u5e76\u66ff\u6362\u5f53\u524d\u7684 shell \u8fdb\u7a0b\u3002)\n</code></pre> <p>\u6700\u5c0f Linux: \u6211\u4eec\u53ef\u4ee5\u5728 initramfs \u4e2d\u653e\u7f6e\u4efb\u610f\u7684\u6570\u636e\u2014\u2014\u5305\u62ec\u5e94\u7528\u7a0b\u5e8f\u3001\u5185\u6838\u6a21\u5757 (\u9a71\u52a8)\u3001\u6570\u636e\u3001\u811a\u672c\u2026\u2026\u64cd\u4f5c\u7cfb\u7edf\u4e16\u754c\u5df2\u7ecf\u5f00\u59cb\u8fd0\u8f6c\uff1b\u4f46\u76f4\u5230\u6267\u884c switch_root (pivot_root) (\u6ce8\u610f\u8c03\u7528switch_root\u7684pid\u5fc5\u987b\u662f1)\uff0c\u624d\u771f\u6b63\u5f00\u59cb \u4eca\u5929 Linux \u5e94\u7528\u4e16\u754c (systemd) \u7684\u542f\u52a8\u3002</p> Bash<pre><code>linux$ ls /sbin/init # \u73b0\u4ee3\u7684Linux\u542f\u52a8\u7528\u7684\u662f/sbin/init\nlrwxrwxrwx /sbin/init -&gt; /lib/systemd/systemd\n</code></pre> </li> <li> <p>Initramfs: \u5e76\u4e0d\u662f\u6211\u4eec\u5b9e\u9645\u770b\u5230\u7684 Linux</p> <p>\u542f\u52a8\u7684\u521d\u7ea7\u9636\u6bb5</p> <ul> <li>\u52a0\u8f7d\u5269\u4f59\u5fc5\u8981\u7684\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4f8b\u5982\u78c1\u76d8/\u7f51\u5361</li> <li>\u6302\u8f7d\u5fc5\u8981\u7684\u6587\u4ef6\u7cfb\u7edf</li> <li>\u5c06\u6839\u6587\u4ef6\u7cfb\u7edf\u548c\u63a7\u5236\u6743\u79fb\u4ea4\u7ed9\u53e6\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f8b\u5982 systemd (system and service manager)</li> </ul> <p>\u542f\u52a8\u7684\u7b2c\u4e8c\u7ea7\u9636\u6bb5</p> <ul> <li>\u770b\u4e00\u770b\u7cfb\u7edf\u91cc\u7684 /sbin/init \u662f\u4ec0\u4e48\uff1f</li> <li>\u8ba1\u7b97\u673a\u7cfb\u7edf\u6ca1\u6709\u9b54\u6cd5 (\u4e00\u5207\u90fd\u6709\u5408\u9002\u7684\u89e3\u91ca)<ul> <li>pstree \u57cb\u4e0b\u7684\u4f0f\u7b14\u5f97\u5230\u89e3\u7b54\uff1apstree\u8f93\u51fa\u7684\u6839\u662fsystemd</li> </ul> </li> </ul> Bash<pre><code>linux$ pstree\nsystemd\u2500\u252c\u2500.vasd\u2500\u2500\u2500.vasd\u2500\u2500\u25004*[.vasd]\n        \u251c\u2500ModemManager\u2500\u2500\u25002*[{ModemManager}]\n        \u251c\u2500NetworkManager\u2500\u2500\u25002*[{NetworkManager}]\n        \u251c\u2500accounts-daemon\u2500\u2500\u25002*[{accounts-daemon}]\n        \u251c\u2500acpid\n        \u251c\u2500at-spi-bus-laun\u2500\u252c\u2500dbus-daemon\n        \u2502                 \u2514\u25003*[{at-spi-bus-laun}]\n        \u251c\u2500at-spi2-registr\u2500\u2500\u25002*[{at-spi2-registr}]\n        \u251c\u2500avahi-daemon\u2500\u2500\u2500avahi-daemon\n        \u251c\u2500colord\u2500\u2500\u25002*[{colord}]\n        \u251c\u2500containerd\u2500\u2500\u250011*[{containerd}]\n        \u251c\u2500containerd-shim\u2500\u252c\u2500dumb-init\u2500\u252c\u2500bash\u2500\u2500\u2500Xvfb\n        \u2502                 \u2502           \u251c\u25002*[conhost.exe]\n        \u2502                 \u2502           \u251c\u2500...\n        \u2502                 \u2502           \u2514\u2500wineserver\n        \u2502                 \u2514\u250012*[{containerd-shim}]\n        \u251c\u2500containerd-shim\u2500\u252c\u2500dumb-init\u2500\u252c\u2500bash\u2500\u2500\u2500Xvfb\n        \u2502                 \u2502           \u2514\u2500mount.ntfs\n        \u2502                 \u2514\u250012*[{containerd-shim}]\n        \u251c\u25003*[containerd-shim\u2500\u252c\u2500dumb-init\u2500\u252c\u2500bash\u2500\u2500\u2500Xvfb]\n        \u2502                    \u2502           \u2514\u2500mount.ntfs]\n        \u2502                    \u2514\u250011*[{containerd-shim}]]\n        \u251c\u2500cron\n        \u251c...\n        \u2514\u2500xrdp-sesman\n</code></pre> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-19","title":"Lecture 19 \u53ef\u6267\u884c\u6587\u4ef6\u548c\u52a0\u8f7d","text":"<p>Take-away Messages</p> <p>\u53ef\u6267\u884c\u6587\u4ef6\u662f\u4e00\u4e2a\u63cf\u8ff0\u72b6\u6001\u673a\u521d\u59cb\u72b6\u6001\u7684\u6570\u636e\u7ed3\u6784 (\u5b57\u8282\u5e8f\u5217)\uff1b\u52a0\u8f7d\u5668\u5c31\u662f\u628a\u8fd9\u4e2a \u201c\u521d\u59cb\u72b6\u6001\u201d \u642c\u8fd0\u5230\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u7a0b\u5e8f\u3002\u7528\u6570\u636e\u7ed3\u6784\u7684\u773c\u5149\u770b\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c31\u4e0d\u96be\u53d1\u73b0\u5b83\u4e0d\u597d\u9605\u8bfb\u7684\u539f\u56e0\uff1a\u5b83\u7684\u8bbe\u8ba1\u8005\u5e76\u6ca1\u6709\u6253\u7b97\u8ba9\u4f60\u9605\u8bfb\u5b83\u3002\u8fd9\u6837\u7684\u96be\u9898\u5728\u300a\u64cd\u4f5c\u7cfb\u7edf\u300b\u8bfe\u7a0b\u4e2d\u7ecf\u5e38\u51fa\u73b0\uff1b\u800c\u6211\u4eec\u7684\u5e94\u5bf9\u65b9\u6cd5\u662f\u5148\u7406\u89e3\u4e00\u4e2a\u7c97\u7cd9\u4f46\u91cd\u8981\u7684\u6a21\u578b\uff0c\u7136\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u7406\u89e3\u5de5\u4e1a\u7ea7\u5b9e\u73b0\u9762\u4e34\u7684\u6311\u6218\u548c\u95ee\u9898\u3002</p> <ol> <li> <p>\u4ec0\u4e48\u662f\u53ef\u6267\u884c\u6587\u4ef6\uff1f\u27a1\ufe0f \u8fdb\u7a0b\u521d\u59cb\u72b6\u6001\u7684\u63cf\u8ff0</p> <ul> <li>\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5bf9\u8c61 (\u6587\u4ef6)</li> <li>\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217 (\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5f53\u5b57\u7b26\u4e32\u7f16\u8f91)</li> <li>\u4e00\u4e2a\u63cf\u8ff0\u4e86\u72b6\u6001\u673a\u521d\u59cb\u72b6\u6001\u7684\u6570\u636e\u7ed3\u6784</li> </ul> <p>ELF: Executable and Linkable Format\uff0cbinutils \u4e2d\u7684\u5de5\u5177\u53ef\u4ee5\u8ba9\u6211\u4eec\u67e5\u770b\u5176\u4e2d\u7684\u91cd\u8981\u4fe1\u606f</p> </li> <li> <p>UNIX a.out \u27a1\ufe0f \u201cassembler output\u201d</p> <p>\u4ee5\u524d\u7684\u7248\u672c\uff1a\u4e00\u4e2a\u76f8\u5bf9\u5e73\u5766\u7684\u6570\u636e\u7ed3\u6784</p> C<pre><code>struct exec {\n    uint32_t  a_midmag;  // Machine ID &amp; Magic\n    uint32_t  a_text;    // Text segment size\n    uint32_t  a_data;    // Data segment size\n    uint32_t  a_bss;     // BSS segment size (\u5b58\u50a8\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf)\n    uint32_t  a_syms;    // Symbol table size\n    uint32_t  a_entry;   // Entry point\n    uint32_t  a_trsize;  // Text reloc table size\n    uint32_t  a_drsize;  // Data reloc table size\n};\n</code></pre> </li> <li> <p>Funny Linkable Executable</p> <p>\u6838\u5fc3\u8bbe\u8ba1\u601d\u8def</p> <ul> <li>\u4e00\u5207\u90fd\u5bf9\u4eba\u7c7b\u76f4\u63a5\u53ef\u8bfb (\u6240\u6709\u4fe1\u606f\u90fd\u5728\u5c40\u90e8)</li> <li>\u56de\u5f52\u94fe\u63a5\u548c\u52a0\u8f7d\u4e2d\u7684\u6838\u5fc3\u6982\u5ff5\uff1a\u4ee3\u7801\u3001\u7b26\u53f7\u3001\u91cd\u5b9a\u4f4d (\u591a\u4e2a\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u5fc5\u9700\u7b26\u53f7\u3001\u91cd\u5b9a\u4f4d\u3002\u7b26\u53f7\uff1amain\u51fd\u6570\u91cc\u4e00\u4e2aglobal\u7684\u53d8\u91cfx\uff0c\u522b\u4eba\u53ef\u4ee5\u7528\u5b83\uff1b\u91cd\u5b9a\u4f4d\uff1a\u6211\u7528\u4e86\u4e00\u4e2a\u53d8\u91cfx\uff0c\u662f\u522b\u4eba\u5b9a\u4e49\u7684)</li> </ul> <p>\u4ee3\u7801 (\ud83d\udd22)\u3001\u7b26\u53f7 (\ud83d\udce4)\u3001\u91cd\u5b9a\u4f4d (\u2753)\uff1a\u51d1\u9f50\u8fd9\u4e09\u8981\u7d20\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505a\u53ef\u6267\u884c\u6587\u4ef6\u4e86\uff01</p> C<pre><code>\ud83d\udd22: ff ff ff ff ff ff ff\n\ud83d\udd22: ff ff ff ff ff ff ff\n\ud83d\udce4: _start\n\ud83d\udd22: 48 c7 c0 3c 00 00 00\n\ud83d\udd22: 48 c7 c7 2a 00 00 00\n              ^\n              |\n        This byte is return code (42).\n\ud83d\udd22: 0f 05 ff ff ff ff ff\n\ud83d\udd22: ff ff ff ff ff ff ff\n\u2753: i32(unresolved_symbol - 0x4 - \ud83d\udccd)\n</code></pre> Bash<pre><code>linux$ ./minimal.fle ; echo $?\n42    # \u5bf9\u5e94\u4e8eminimal.fle\u91cc\u7684 2a (return code)\n</code></pre> <p>\u5f00\u5934\u7684<code>48 c7</code>\u662fmove\u6307\u4ee4\uff0c\u7ed3\u5c3e\u7684<code>0f 05</code>\u662fsyscall\u6307\u4ee4\u3002</p> </li> <li> <p>foo.c</p> C<pre><code>#include \"minilib.h\"\n\n// Global data\nextern int n;\nchar msg[] = \"Hello World!\\n\";\n\nint foo() {\n    return n;\n}\n</code></pre> Bash<pre><code>linux$ make\n./cc -Wall -g -Os foo.c -o foo.o\n./cc -Wall -g -Os libc.c -o libc.o\n./cc -Wall -g -Os main.c -o main.o\n./ld foo.fle libc.fle main.fle -o hello\n</code></pre> <p>foo.fle</p> <p>C<pre><code>{\n    \"type\": \".obj\",\n    \".text\": [\n        \"\ud83c\udff7\ufe0f: _text\",\n        \"\ud83d\udce4: foo\",\n        \"\ud83d\udd22: f3 0f 1e fa 8b 05\",\n        \"\u2753: i32(n - 0x4 - \ud83d\udccd)\",\n        \"\ud83d\udd22: c3\"\n    ],\n    \".data\": [\n        \"\ud83d\udce4: msg\",\n        \"\ud83d\udd22: 48 65 6c 6c 6f 20 57 6f 72 6c 64 21 0a 00\"\n    ],\n    \".bss\": []\n}\n</code></pre> 5. \u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6: .c \u2192 \u9884\u5904\u7406(-E) \u2192 .i \u2192 \u7f16\u8bd1(-S) \u2192 .s \u2192 \u6c47\u7f16(-c) \u2192 .o \u2192 \u94fe\u63a5 \u2192 .out</p> <p>(1) \u9884\u5904\u7406</p> <ul> <li>\u6e90\u4ee3\u7801 (.c) \u2192 \u6e90\u4ee3\u7801 (.i)          \u27a1\ufe0f <code>gcc -E foo.c -o foo.i</code></li> <li>Ctrl-C &amp; Ctrl-V (#include)</li> <li>\u5b57\u7b26\u4e32\u66ff\u6362</li> <li>\u4eca\u5929\uff1a\u6211\u4eec\u6709\u8fc7\u7a0b\u5b8f</li> </ul> <p>(2) \u7f16\u8bd1 (cc)</p> <ul> <li>\u6e90\u4ee3\u7801 (.i) \u2192 \u6c47\u7f16\u4ee3\u7801 (.s)         \u27a1\ufe0f <code>gcc -S foo.i -o foo.s</code></li> <li>\u201c\u9ad8\u7ea7\u72b6\u6001\u673a\u201d \u5230 \u201c\u4f4e\u7ea7\u72b6\u6001\u673a\u201d \u7684\u7ffb\u8bd1</li> <li>\u6700\u7ec8\u751f\u6210\u5e26\u6807\u6ce8\u7684\u6307\u4ee4\u5e8f\u5217</li> </ul> <p>(3) \u6c47\u7f16 (as)</p> <ul> <li>\u6c47\u7f16\u4ee3\u7801 (.s) \u2192 \u76ee\u6807\u6587\u4ef6 (.o)       \u27a1\ufe0f <code>gcc -c foo.s -o foo.o</code></li> <li>\u6587\u4ef6 = sections (.text, .data, .rodata.str.1, ...)<ul> <li>\u5bf9\u4e8e ELF\uff0c\u6bcf\u4e2a section \u6709\u5b83\u7684\u6743\u9650\u3001\u5185\u5b58\u5bf9\u9f50\u7b49\u4fe1\u606f</li> </ul> </li> <li>section \u4e2d\u7684\u4e09\u8981\u7d20<ul> <li>\u4ee3\u7801 (\u5b57\u8282\u5e8f\u5217)</li> <li>\u7b26\u53f7\uff1a\u6807\u8bb0 \u201c\u5f53\u524d\u201d \u7684\u4f4d\u7f6e</li> <li>\u91cd\u5b9a\u4f4d\uff1a\u6682\u65f6\u4e0d\u80fd\u786e\u5b9a\u7684\u6570\u503c (\u94fe\u63a5\u65f6\u786e\u5b9a)</li> </ul> </li> </ul> <p>(4) \u94fe\u63a5 (ld)                         \u27a1\ufe0f <code>gcc foo.o -o foo</code></p> <ul> <li>\u591a\u4e2a\u76ee\u6807\u6587\u4ef6 (.o) \u2192 \u53ef\u6267\u884c\u6587\u4ef6 (a.out)</li> <li>\u5408\u5e76\u6240\u6709\u7684 sections<ul> <li>\u5206\u522b\u5408\u5e76 .text, .data, .bss \u4e2d\u7684\u4ee3\u7801</li> <li>\u628a sections \u201c\u5e73\u94fa\u201d \u6210\u5b57\u8282\u5e8f\u5217</li> <li>\u786e\u5b9a\u6240\u6709\u7b26\u53f7\u7684\u4f4d\u7f6e</li> <li>\u89e3\u6790\u5168\u90e8\u91cd\u5b9a\u4f4d</li> </ul> </li> <li>\u5f97\u5230\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6<ul> <li>(\u7a0b\u5e8f\u521d\u59cb\u5185\u5b58\u72b6\u6001\u7684\u63cf\u8ff0)</li> </ul> </li> </ul> </li> <li> <p>\u7a0b\u5e8f\u7684\u52a0\u8f7d\uff1a\u628a \u201c\u5b57\u8282\u5e8f\u5217\u201d \u642c\u5230\u5185\u5b58</p> <ul> <li>\u6ca1\u9519\uff0c\u5c31\u53ea\u505a\u8fd9\u4e00\u4ef6\u4e8b</li> <li>\u7136\u540e\u8bbe\u7f6e\u6b63\u786e\u7684 PC\uff0c\u5f00\u59cb\u8fd0\u884c</li> </ul> Python<pre><code>mem = mmap.mmap(\n    fileno=-1, length=len(bs),\n    prot=mmap.PROT_READ | mmap.PROT_WRITE | mmap.PROT_EXEC,\n    flags=mmap.MAP_PRIVATE | mmap.MAP_ANONYMOUS,\n)\nmem.write(bs)\nmem.flush()\ncall_pointer(mem, fle['symbols']['_start'])\n</code></pre> </li> <li> <p><code>#!</code> - Shebang</p> <p>UNIX \u5bf9 # \u6ce8\u91ca\u7684 \u201c\u5999\u7528\u201d\uff1a\u5728 UNIX \u7684\u65e9\u671f\uff0c\u4e3a\u4e86\u80fd\u66f4\u65b9\u4fbf\u5730\u5c06\u811a\u672c\u4f5c\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5b9e\u73b0\u4e86 #! \u5f00\u5934\u7684 \u201c\u53ef\u6267\u884c\u6587\u4ef6\u201d\uff0c\u5e76\u6cbf\u7528\u81f3\u4eca\u3002Shebang \u4f1a\u8c03\u7528\u7b2c\u4e00\u884c\u4e2d\u6267\u884c\u7684\u547d\u4ee4\u548c\u53c2\u6570\uff0c\u5e76\u628a\u8fd9\u4e2a\u811a\u672c\u6587\u4ef6\u4f5c\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u4f20\u5165\u3002</p> <p>file.bin: C<pre><code>#!A B C\n// \u64cd\u4f5c\u7cfb\u7edf\u4f1a\u6267\u884c execve(A, [\"A\", \"B C\", \"file.bin\"], envp)\n</code></pre></p> <p>example1:</p> <p>A.c\u5982\u4e0b\uff0c\u7f16\u8bd1\u540e\u5f97\u5230\u53ef\u6267\u884c\u6587\u4ef6A</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n    for (int i = 0; i &lt; argc; i++) {\n        printf(\"argv[%d] = %s\\n\", i, argv[i]);\n    }\n}\n</code></pre> <p>good\u811a\u672c\u5185\u5bb9\u5982\u4e0b\uff1a</p> Bash<pre><code>#!A B C\n\nThis can be any script.\n</code></pre> <p>\u6267\u884c\u7ed3\u679c\uff1a Bash<pre><code>linux$ ./good 1 2\nargv[0] = A\nargv[1] = B C\nargv[2] = ./good\nargv[3] = 1\nargv[4] = 2\n</code></pre></p> <p>example2:</p> <p>b\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a Bash<pre><code>#! /usr/bin/env python3\n\nprint(\"Hello World\");\n</code></pre></p> <p>\u6267\u884c\u7ed3\u679c\uff1a Bash<pre><code>linux$ ./b\nHello World\n</code></pre></p> </li> <li> <p>ELF\u4f8b\u5b50\uff1aa.c</p> C<pre><code>int n;\n__thread int x;         // in tbss, t means thread local\n__thread int x1 = 100;  // in tdata, \u5df2\u521d\u59cb\u5316\u7684\u6570\u636e\u5728data\u8282\nstatic __thread int y;\n\nextern __thread int z;\n\nint foo()\n{\n    return z; // \u53ef\u4ee5\u770b\u5230R_X86_64_GOTTPOFF z - 4\n}\n</code></pre> Bash<pre><code>linux$ gcc -c fPIE a.c\ngcc: warning: fPIE: linker input file unused because linking not done\ngcc: error: fPIE: linker input file not found: No such file or directory\nlinux$ ls\ntotal 8.0K\n-rw-r--r-- 1 chaofu chaofu 1.7K Nov  8 19:26 a.o\n-rw-r--r-- 1 chaofu chaofu  122 Nov  8 19:26 a.c\nlinux$ readelf -a a.o\nELF Header:\nMagic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \nClass:                             ELF64\nData:                              2's complement, little endian\nVersion:                           1 (current)\nOS/ABI:                            UNIX - System V\nABI Version:                       0\nType:                              REL (Relocatable file)\nMachine:                           Advanced Micro Devices X86-64\nVersion:                           0x1\nEntry point address:               0x0\nStart of program headers:          0 (bytes into file)\nStart of section headers:          688 (bytes into file)\nFlags:                             0x0\nSize of this header:               64 (bytes)\nSize of program headers:           0 (bytes)\nNumber of program headers:         0\nSize of section headers:           64 (bytes)\nNumber of section headers:         15\nSection header string table index: 14\n\nSection Headers:\n[Nr] Name              Type             Address           Offset\n    Size              EntSize          Flags  Link  Info  Align\n[ 0]                   NULL             0000000000000000  00000000\n    0000000000000000  0000000000000000           0     0     0\n[ 1] .text             PROGBITS         0000000000000000  00000040\n    0000000000000014  0000000000000000  AX       0     0     1\n[ 2] .rela.text        RELA             0000000000000000  00000200\n    0000000000000018  0000000000000018   I      12     1     8\n[ 3] .data             PROGBITS         0000000000000000  00000054\n    0000000000000000  0000000000000000  WA       0     0     1\n[ 4] .bss              NOBITS           0000000000000000  00000054\n    0000000000000004  0000000000000000  WA       0     0     4\n[ 5] .tbss             NOBITS           0000000000000000  00000054\n    0000000000000008  0000000000000000 WAT       0     0     4\n[ 6] .tdata            PROGBITS         0000000000000000  00000054\n    0000000000000004  0000000000000000 WAT       0     0     4\n[ 7] .comment          PROGBITS         0000000000000000  00000058\n    000000000000002c  0000000000000001  MS       0     0     1\n[ 8] .note.GNU-stack   PROGBITS         0000000000000000  00000084\n    0000000000000000  0000000000000000           0     0     1\n[ 9] .note.gnu.pr[...] NOTE             0000000000000000  00000088\n    0000000000000020  0000000000000000   A       0     0     8\n[10] .eh_frame         PROGBITS         0000000000000000  000000a8\n    0000000000000038  0000000000000000   A       0     0     8\n[11] .rela.eh_frame    RELA             0000000000000000  00000218\n    0000000000000018  0000000000000018   I      12    10     8\n[12] .symtab           SYMTAB           0000000000000000  000000e0\n    00000000000000f0  0000000000000018          13     4     8\n[13] .strtab           STRTAB           0000000000000000  000001d0\n    000000000000002a  0000000000000000           0     0     1\n[14] .shstrtab         STRTAB           0000000000000000  00000230\n    0000000000000079  0000000000000000           0     0     1\nKey to Flags:\nW (write), A (alloc), X (execute), M (merge), S (strings), I (info),\nL (link order), O (extra OS processing required), G (group), T (TLS),\nC (compressed), x (unknown), o (OS specific), E (exclude),\nD (mbind), l (large), p (processor specific)\n\nThere are no section groups in this file.\n\nThere are no program headers in this file.\n\nThere is no dynamic section in this file.\n\nRelocation section '.rela.text' at offset 0x200 contains 1 entry:\nOffset          Info           Type           Sym. Value    Sym. Name + Addend\n00000000000b  000900000016 R_X86_64_GOTTPOFF 0000000000000000 z - 4\n\nRelocation section '.rela.eh_frame' at offset 0x218 contains 1 entry:\nOffset          Info           Type           Sym. Value    Sym. Name + Addend\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\nNo processor specific unwind information to decode\n\nSymbol table '.symtab' contains 10 entries:\nNum:    Value          Size Type    Bind   Vis      Ndx Name\n    0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n    1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS a.c\n    2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 .text\n    3: 0000000000000004     4 TLS     LOCAL  DEFAULT    5 y\n    4: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 n\n    5: 0000000000000000     4 TLS     GLOBAL DEFAULT    5 x\n    6: 0000000000000000     4 TLS     GLOBAL DEFAULT    6 x1\n    7: 0000000000000000    20 FUNC    GLOBAL DEFAULT    1 foo\n    8: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n    9: 0000000000000000     0 TLS     GLOBAL DEFAULT  UND z\n\nNo version information found in this file.\n\nDisplaying notes found in: .note.gnu.property\nOwner                Data size        Description\nGNU                  0x00000010       NT_GNU_PROPERTY_TYPE_0\n    Properties: x86 feature: IBT, SHSTK\n</code></pre> </li> <li> <p>\u52a0\u8f7d ELF \u6587\u4ef6</p> <ul> <li>\u5c06\u591a\u6bb5\u5b57\u8282\u5e8f\u5217\u590d\u5236\u5230\u5730\u5740\u7a7a\u95f4\u4e2d<ul> <li>\u5206\u522b\u8d4b\u4e88\u53ef\u8bfb/\u53ef\u5199/\u53ef\u6267\u884c\u6743\u9650</li> </ul> </li> <li>\u7136\u540e\u8df3\u8f6c\u5230\u6307\u5b9a\u7684 entry (\u9ed8\u8ba4\u4e3a _start) \u6267\u884c</li> <li>ELF \u662f \u201c\u4e8c\u8fdb\u5236\u6570\u636e\u7ed3\u6784\u201d\uff0c<code>readelf -l</code> \u63cf\u8ff0\u4e86\u5982\u4f55\u52a0\u8f7d\u5b83<ul> <li>Offset: segment \u5728\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf</li> <li>VirtAddr: \u6bb5\u5728\u5185\u5b58\u4e2d\u5e94\u5f53\u88ab\u52a0\u8f7d\u5230\u7684\u8d77\u59cb\u5730\u5740</li> <li>PhysAddr (\u4e00\u822c\u4e0d\u7528)</li> <li>FileSiz: \u6bb5\u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u6570</li> <li>MemSiz: \u6bb5\u5728\u5185\u5b58\u4e2d\u7684\u5b57\u8282\u6570 (\u53ef\u80fd\u5927\u4e8e\u6587\u4ef6\u5927\u5c0f)</li> <li>Flags: \u6743\u9650\uff0c\u4f8b\u5982 RWE</li> <li>Align: \u865a\u62df\u5730\u5740\u7684\u5bf9\u9f50</li> </ul> </li> </ul> Bash<pre><code>linux$ ./loader minimal \nHello, OS World\nlinux$ ./minimal \nHello, OS World\nlinux$ readelf -l minimal \n\nElf file type is EXEC (Executable file)\nEntry point 0x401000\nThere are 2 program headers, starting at offset 64\n\nProgram Headers:\nType           Offset             VirtAddr           PhysAddr\n                FileSiz            MemSiz              Flags  Align\nLOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000\n                0x00000000000000b0 0x00000000000000b0  R      0x1000\nLOAD           0x0000000000001000 0x0000000000401000 0x0000000000401000\n                0x0000000000000058 0x0000000000000058  R E    0x1000\n\nSection to Segment mapping:\nSegment Sections...\n00     \n01     .text \n</code></pre> <p> \u610f\u601d\u662f\uff0cloader\u5e94\u5f53\u5c06minimal\u8fd9\u4e2a\u6587\u4ef6\u7684offset\u4e3a0\u7684\u5730\u65b9\uff0c\u5927\u5c0f\u4e3a0xb0\u7684\u4e00\u6bb5\u533a\u57df\u642c\u5230\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u865a\u62df\u5185\u5b58\u76840x400000\u4f4d\u7f6e\u5904\uff1b\u5c06offset\u4e3a0x1000\uff0c\u5927\u5c0f\u4e3a0x58\u7684\u4e00\u6bb5\u533a\u57df\u642c\u5230\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u865a\u62df\u5185\u5b58\u76840x401000\u4f4d\u7f6e\u5904\u3002\u7136\u540e\u51c6\u5907\u597dinitial process stack\u91cc\u7684argc/argv/envp\u7b49\uff0c\u518d\u8df3\u8f6c\u5230Entry point 0x401000\uff0c\u5373\u53ef\u5f00\u59cb\u6267\u884cminimal\u3002</p> <p>(\u9759\u6001 ELF \u52a0\u8f7d\u5668: Linux \u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 execve \u7cfb\u7edf\u8c03\u7528\u52a0\u8f7d\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u72b6\u6001\u673a\u7684 \u201c\u91cd\u7f6e\u201d\uff1b\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\u6a21\u62df execve \u7cfb\u7edf\u8c03\u7528\u7684\u884c\u4e3a\uff1a\u5c06 ELF \u6587\u4ef6\u4e2d\u9700\u8981\u52a0\u8f7d\u7684\u90e8\u5206\u6620\u5c04\u5230\u5185\u5b58\uff0c\u5e76\u6839\u636e ABI \u6784\u5efa\u6b63\u786e\u7684\u8fdb\u7a0b\u521d\u59cb\u6808\u548c\u5bc4\u5b58\u5668\uff0c\u6211\u4eec\u5c31\u80fd\u5b9e\u73b0\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684 \u201c\u52a0\u8f7d\u201d\u3002)</p> <p>loader.c:</p> C<pre><code>#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;elf.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;sys/mman.h&gt;\n\nvoid my_execve(const char *file, char *argv[], char *envp[]);\nvoid *init_proc_stack(char *argv[], char *envp[]);\n\nint main(int argc, char *argv[], char *envp[]) {\n    if (argc &lt; 2) {\n        fprintf(stderr, \"Usage: %s file [args...]\\n\", argv[0]);\n        exit(1);\n    }\n\n    my_execve(argv[1], argv + 1, envp);\n}\n\nvoid my_execve(const char *file, char *argv[], char *envp[]) {\n    // WARNING: This execve leaks memory and ignores\n    // error checing for brevity.\n\n    int fd = open(file, O_RDONLY);\n    assert(fd &gt; 0);\n\n    // Map ELF header to memory\n    Elf64_Ehdr *h = mmap(NULL, 4096, PROT_READ, MAP_PRIVATE, fd, 0);\n\n    #define ROUND(x, align) (((uintptr_t)x) &amp; ~(align - 1))\n\n    Elf64_Phdr *pht = (Elf64_Phdr *)((char *)h + h-&gt;e_phoff);\n    for (int i = 0; i &lt; h-&gt;e_phnum; i++) {\n        Elf64_Phdr *p = &amp;pht[i];\n\n        if (p-&gt;p_type == PT_LOAD) {\n            // Memory map region\n            uintptr_t align = p-&gt;p_align;\n            uintptr_t map_beg = ROUND(p-&gt;p_vaddr, align);\n\n            // Memory map flags\n            int prot = 0;\n            if (p-&gt;p_flags &amp; PF_R) prot |= PROT_READ;\n            if (p-&gt;p_flags &amp; PF_W) prot |= PROT_WRITE;\n            if (p-&gt;p_flags &amp; PF_X) prot |= PROT_EXEC;\n\n            // Memory map size\n            uintptr_t map_sz = ROUND(p-&gt;p_filesz + align - 1, align);\n            uintptr_t alloc_sz = p-&gt;p_memsz - p-&gt;p_filesz;\n\n            // Map file contents\n            mmap(\n                (void *)map_beg,               // addr, rounded to ALIGN\n                map_sz,                        // length\n                prot,                          // protection\n                MAP_PRIVATE | MAP_FIXED,       // flags, private &amp; strict\n                fd, ROUND(p-&gt;p_offset, align)  // file and offset\n            );\n\n            // Map anonymous memory (bss)\n            if (alloc_sz &gt; 0) {\n                mmap(\n                    (void *)(map_beg + map_sz),// addr\n                    alloc_sz,                  // length,\n                    prot,                      // protection\n                    MAP_ANONYMOUS | MAP_PRIVATE | MAP_FIXED, // flags\n                    -1, 0                      // no file and offset\n                );\n            }\n\n            // (Should check for return values.)\n        }\n    }\n    close(fd);\n\n    void *rsp = init_proc_stack(argv, envp);\n    asm volatile(\n        \"mov $0, %%rdx;\" // required by System-V ABI\n        \"mov %0, %%rsp;\" // loader allocated\n        \"jmp *%1\" : : \"a\"(rsp), \"b\"(h-&gt;e_entry)\n    );\n}\n\nvoid *init_proc_stack(char *argv[], char *envp[]) {\n    _Alignas(16) static char stack[1 &lt;&lt; 20];\n    static char rnd[16];\n\n    void *sp = (void *)(stack + sizeof(stack) - 8192);\n    #define push(sp, T, ...) ({ \\\n        *((T*)sp) = (T)__VA_ARGS__; \\\n        sp = (void *)((uintptr_t)(sp) + sizeof(T)); \\\n    })\n\n    void *rsp = sp;\n\n    // Calculate argc\n    int argc = 0;\n    while (argv[argc])\n        argc++;\n\n    // Create initial process stack\n    push(sp, intptr_t, argc);\n\n    // argv[], NULL-terminate\n    for (int i = 0; i &lt; argc; i++) {\n        push(sp, intptr_t, argv[i]);\n    }\n    push(sp, intptr_t, 0);\n\n    // envp[], NULL-terminate\n    for (; *envp; envp++) {\n        if (!strchr(*envp, '_')) {\n            // remove some verbose ones\n            push(sp, intptr_t, *envp);\n        }\n    }\n    push(sp, intptr_t, 0);\n\n    // auxv[], AT_NULL-terminate\n    push(sp, Elf64_auxv_t,\n        {.a_type = AT_RANDOM, .a_un.a_val = (uintptr_t)rnd}\n    );\n    push(sp, Elf64_auxv_t,\n        {.a_type = AT_NULL}\n    );\n\n    // This stack layout is defined by System-V ABI.\n    return rsp;\n}\n</code></pre> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-20","title":"Lecture 20 \u52a8\u6001\u94fe\u63a5\u548c\u52a0\u8f7d","text":"<p>Take-away Messages</p> <p>\u627e\u5230\u6b63\u786e\u7684\u601d\u8def\uff0c\u6211\u4eec\u5c31\u80fd\u5728\u590d\u6742\u7684\u673a\u5236\u4e2d\u627e\u5230\u4e3b\u5e72\uff1a\u5728\u52a8\u6001\u94fe\u63a5\u7684\u4f8b\u5b50\u91cc\uff0c\u6211\u4eec\u8bd5\u7740\u81ea\u5df1\u5b9e\u73b0\u52a8\u6001\u94fe\u63a5\u548c\u52a0\u8f7d\u2014\u2014\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec \u201c\u53d1\u660e\u201d \u4e86 ELF \u4e2d\u7684\u91cd\u8981\u6982\u5ff5\uff0c\u4f8b\u5982 Global Offset Table, Procedure Linkage Table \u7b49\u3002</p> <ol> <li> <p>\u201c\u62c6\u89e3\u5e94\u7528\u7a0b\u5e8f\u201d \u7684\u9700\u6c42:</p> <p>\u5b9e\u73b0\u8fd0\u884c\u5e93\u548c\u5e94\u7528\u4ee3\u7801\u5206\u79bb</p> <ul> <li>\u5e94\u7528\u4e4b\u95f4\u7684\u5e93\u5171\u4eab<ul> <li>\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u9700\u8981 glibc</li> <li>\u4f46\u7cfb\u7edf\u91cc\u53ea\u9700\u8981\u4e00\u4e2a\u526f\u672c\u5c31\u53ef\u4ee5\u4e86<ul> <li>\u662f\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 ldd \u547d\u4ee4\u67e5\u770b\uff08print shared object dependencies\uff09</li> </ul> </li> </ul> </li> <li>\u5927\u578b\u9879\u76ee\u7684\u5206\u89e3<ul> <li>\u6539\u4e00\u884c\u4ee3\u7801\u4e0d\u7528\u91cd\u65b0\u94fe\u63a5 2GB \u7684\u6587\u4ef6</li> <li>libjvm.so, libart.so, libcpu.so, ...<ul> <li>NEMU: \u8fd9\u5c31\u597d\u50cf \u201c\u628a CPU \u63d2\u4e0a\u4e3b\u677f\u201d\uff0c\u5206\u79bblibcpu.so \u548cuncore\u7684\u5b9e\u73b0\uff0c\u9700\u8981\u7684\u65f6\u5019\u518d\u94fe\u63a5\u8d77\u6765</li> </ul> </li> </ul> </li> <li>\u5982\u679c Linux \u5e94\u7528\u4e16\u754c\u662f\u9759\u6001\u94fe\u63a5\u7684\u2026\u2026<ul> <li>libc \u7d27\u6025\u53d1\u5e03\u5b89\u5168\u8865\u4e01 \u2192 \u91cd\u65b0\u94fe\u63a5\u6240\u6709\u5e94\u7528 \ud83d\ude02</li> </ul> </li> </ul> <p>a.c:</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"Hello!\\n\");\n}\n</code></pre> Bash<pre><code>linux$ gcc a.c\nlinux$ ls\ntotal 20K\n-rwxr-xr-x 1 chaofu chaofu 16K Nov  9 10:24 a.out # \u52a8\u6001\u94fe\u63a5\u7684a.out\u5927\u5c0f\u4e3a16KB\n-rw-r--r-- 1 chaofu chaofu  58 Nov  9 10:24 a.c\nlinux$ file a.out\na.out: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=521bcd29744268056ffbe7b2672bb94545d04d22, for GNU/Linux 3.2.0, not stripped\nlinux$ ldd a.out\n        linux-vdso.so.1 (0x00007ffeb4864000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fda081b9000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007fda083f5000)\n</code></pre> <p>\u5982\u4f55\u5b9e\u73b0\u5206\u79bb\uff1f</p> <p>\u65b9\u6848 1: libc.o \u274c</p> <ul> <li>\u5728\u52a0\u8f7d\u65f6\u5b8c\u6210\u91cd\u5b9a\u4f4d<ul> <li>\u52a0\u8f7d = \u9759\u6001\u94fe\u63a5</li> <li>\u7701\u4e86\u78c1\u76d8\u7a7a\u95f4\uff0c\u4f46\u6ca1\u7701\u5185\u5b58</li> <li>\u81f4\u547d\u7f3a\u70b9\uff1a\u65f6\u95f4 (\u94fe\u63a5\u9700\u8981\u89e3\u6790\u5f88\u591a\u4e0d\u4f1a\u7528\u5230\u7684\u7b26\u53f7)</li> </ul> </li> <li>\u65b9\u6848 2: libc.so (shared object) \u2705<ul> <li>\u7f16\u8bd1\u5668\u751f\u6210\u4f4d\u7f6e\u65e0\u5173\u4ee3\u7801 (\u7a0b\u5e8f\u53ef\u4ee5\u5728\u52a0\u8f7d\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u627e\u5230\u5e76\u8c03\u7528\u6240\u9700\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u8fd9\u4e9b\u51fd\u6570\u7684\u786e\u5207\u5730\u5740\u3002)<ul> <li>\u52a0\u8f7d = mmap</li> <li>\u4f46\u51fd\u6570\u8c03\u7528\u65f6\u9700\u8981\u989d\u5916\u4e00\u6b21\u67e5\u8868</li> </ul> </li> <li>\u597d\u5904\uff1a\u591a\u4e2a\u8fdb\u7a0b\u6620\u5c04\u540c\u4e00\u4e2a libc.so\uff0c\u5185\u5b58\u4e2d\u53ea\u9700\u8981\u4e00\u4e2a\u526f\u672c</li> </ul> </li> </ul> <p>\u5171\u4eab\u5e93\u6d4b\u8bd5\uff1a\u542f\u52a8 100 \u4e2a\u4ee3\u7801\u4e3a 100M \u7684\u51fd\u6570\uff0c\u901a\u8fc7\u89c2\u5bdf\u7cfb\u7edf\u4e2d\u7684\u5185\u5b58\u5360\u7528\u6765\u6d4b\u8bd5\u591a\u4e2a\u72ec\u7acb\u542f\u52a8\u7684\u8fdb\u7a0b\u662f\u5426\u53ea\u4fdd\u7559\u4e00\u4efd\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u526f\u672c\u3002</p> <p>bloat.c</p> C<pre><code>void bloat() {\n    // 100M of nops\n    asm volatile(\n        \".fill 104857600, 1, 0x90\"\n    );\n}\n</code></pre> <p>main.c</p> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\n// Dynamically linked.\nvoid bloat();\n\nint main() {\n    bloat();\n    printf(\"bloat() called; sleeping...\\n\");\n    while (1) {\n        sleep(1);\n    }\n}\n</code></pre> Bash<pre><code>linux$ make\ngcc -shared -o libbloat.so bloat.c\ncc    -c -o main.o main.c\ngcc -o bloat main.o -L. -lbloat\nlinux$ LD_LIBRARY_PATH=. ./bloat\nbloat() called; sleeping...\nlinux$ ./run\nlinux$ ps -ax\nPID TTY      STAT   TIME COMMAND\n    1 hvc0     Sl+    0:00 /init\n    5 hvc0     Sl+    0:00 plan9\n    8 ?        Ss     0:00 /init\n    9 ?        S      0:00 /init\n...\n30797 pts/6    S      0:00 ./bloat\n30798 pts/6    S      0:00 ./bloat\n30799 pts/6    S      0:00 ./bloat\n30800 pts/6    S      0:00 ./bloat\n...\nlinux$ pmap 30797 | grep libbloat.so\n00007f4af8c33000      4K r---- libbloat.so\n00007f4af8c34000 102404K r-x-- libbloat.so\n00007f4aff035000      4K r---- libbloat.so\n00007f4aff036000      4K r---- libbloat.so\n00007f4aff037000      4K rw--- libbloat.so\nlinux$ pmap 30798 | grep libbloat.so\n00007f83552c4000      4K r---- libbloat.so\n00007f83552c5000 102404K r-x-- libbloat.so\n00007f835b6c6000      4K r---- libbloat.so\n00007f835b6c7000      4K r---- libbloat.so\n00007f835b6c8000      4K rw--- libbloat.so\n</code></pre> <p>\u8fdb\u7a0b 30797 \u770b\u5230\u6709\u8fde\u7eed 100MB \u7684 libbloat.so \u5728\u5730\u5740 00007f4af8c34000 \u5904\uff0c\u5b9e\u9645\u4e0a\u8fd9\u662f\u64cd\u4f5c\u7cfb\u7edf\u5851\u9020\u7684\u5047\u8c61\uff0c\u5728\u771f\u5b9e\u7684\u5185\u5b58\u6761\u91cc\u5b83\u53ef\u80fd\u662f\u8fd9\u6837\u5206\u5e03\u7684\uff1a(\u4e0d\u540c\u90e8\u5206\u5206\u5e03\u5728\u4e0d\u540c\u7684\u5185\u5b58\u9875\u4e0a)</p> <p></p> <p>\u5728 x86 \u67b6\u6784\u4e2d\uff0cCPU \u91cc\u6709\u4e00\u4e2a\u7279\u6b8a\u5bc4\u5b58\u5668 CR3\uff0c\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u8fd0\u884c\u8fdb\u7a0b\u7684\u9875\u76ee\u5f55\u57fa\u5730\u5740\uff08Page Directory Base Address\uff09\u3002\u9875\u76ee\u5f55\u662f\u5185\u5b58\u7ba1\u7406\u4e2d\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u3002\u5f53 CPU \u8981\u8bbf\u95ee libbloat.so \u7684\u65f6\u5019\uff0c\u901a\u8fc7 CR3 \u5bc4\u5b58\u5668\u6b63\u786e\u627e\u5230\u7269\u7406\u5185\u5b58\u6761\u4e0a\u7684 libbloat.so\uff0c\u5851\u9020\u51fa libbloat.so \u662f\u8fde\u7eed\u7684 100MB \u7684\u5047\u8c61\u3002</p> </li> <li> <p>\u5b9e\u73b0\u52a8\u6001\u52a0\u8f7d\uff1aA Layer of Indirection</p> <p>\u7f16\u8bd1\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5e93\u8c03\u7528 = \u67e5\u8868</p> C<pre><code>call  *TABLE[printf@symtab]\n</code></pre> <p>\u94fe\u63a5\u65f6\uff0c\u6536\u96c6\u6240\u6709\u7b26\u53f7\uff0c\u201c\u751f\u6210\u201d \u7b26\u53f7\u4fe1\u606f\u548c\u76f8\u5173\u4ee3\u7801\uff1a</p> C<pre><code>#define foo@symtab     1\n#define printf@symtab  2\n...\n\nvoid *TABLE[N_SYMBOLS];\n\nvoid load(struct loader *ld) {\n    TABLE[foo@symtab] = ld-&gt;resolve(\"foo\");\n    TABLE[foo@printf] = ld-&gt;resolve(\"printf\");\n    ...\n}\n</code></pre> <p>\u4f8b\u5b50\uff1a</p> <p>main.S:</p> GAS<pre><code>#include \"dl.h\"\n\nDL_HEAD\n\nLOAD(\"libc.dl\")\nLOAD(\"libhello.dl\")\nIMPORT(hello)\nIMPORT(exit)\nEXPORT(_start)\n\nDL_CODE\n\nmain:\n    call DSYM(hello)\n    call DSYM(hello)\n    call DSYM(hello)\n    call DSYM(hello)\n    movq $0, %rax\n    ret\n\n_start:\n    call main\n    jmp DSYM(exit)\n\nDL_END\n</code></pre> <p>libhello.S:</p> GAS<pre><code>#include \"dl.h\"\n\nDL_HEAD\n\nLOAD(\"libc.dl\")\nIMPORT(putchar)\nEXPORT(hello)\n\nDL_CODE\n\nhello:\n    lea str(%rip), %rdi\n    mov count(%rip), %eax\n    push %rbx\n    mov %rdi, %rbx\n    inc %eax\n    mov %eax, count(%rip)\n    add $0x30, %eax\n    movb %al, 0x6(%rdi)\nloop:\n    movsbl (%rbx),%edi\n    test %dil,%dil\n    je out\n    call DSYM(putchar)\n    inc  %rbx\n    jmp loop\nout:\n    pop %rbx\n    ret\n\nstr:\n    .asciz \"Hello X\\n\"\n\ncount:\n    .int 0\n\nDL_END\n</code></pre> <p>libc.S:</p> GAS<pre><code>#include \"dl.h\"\n#include &lt;sys/syscall.h&gt;\n\nDL_HEAD\n\nEXPORT(putchar)\nEXPORT(exit)\n\nDL_CODE\n\nputchar:\n    mov %dil, buf(%rip)\n    mov $SYS_write, %rax\n    mov $1, %rdi\n    lea buf(%rip), %rsi\n    mov $1, %rdx\n    syscall\n    ret\nbuf:\n    .byte 0\n\nexit:\n    movq $SYS_exit, %rax\n    syscall\n\nDL_END\n</code></pre> Bash<pre><code>linux$ make\ngcc  dlbox.c -o dlbox\n./dlbox gcc libhello.S\n./dlbox gcc libc.S\n./dlbox gcc main.S\n./dlbox objdump libhello.dl &gt; libhello.txt\n./dlbox objdump libc.dl &gt; libc.txt\n./dlbox objdump main.dl &gt; main.txt\nrm -f *.o\nlinux$ ./dlbox interp main.dl\nHello 1\nHello 2\nHello 3\nHello 4\n</code></pre> <p>dl.h</p> C<pre><code>#define REC_SZ 32\n#define DL_MAGIC \"\\x01\\x14\\x05\\x14\"\n\n#ifdef __ASSEMBLER__\n    #define DL_HEAD     __hdr: \\\n                        /* magic */    .ascii DL_MAGIC; \\\n                        /* file_sz */  .4byte (__end - __hdr); \\\n                        /* code_off */ .4byte (__code - __hdr)\n    #define DL_CODE     .fill REC_SZ - 1, 1, 0; \\\n                        .align REC_SZ, 0; \\\n                        __code:\n    #define DL_END      __end:\n\n    #define RECORD(sym, off, name) \\\n    .align REC_SZ, 0; \\\n    sym .8byte (off); .ascii name\n\n    #define IMPORT(sym) RECORD(sym:,           0, \"?\" #sym \"\\0\")\n    #define EXPORT(sym) RECORD(    , sym - __hdr, \"#\" #sym \"\\0\")\n    #define LOAD(lib)   RECORD(    ,           0, \"+\" lib  \"\\0\")\n    #define DSYM(sym)   *sym(%rip)\n#else\n    #include &lt;stdint.h&gt;\n\n    struct dl_hdr {\n        char magic[4];\n        uint32_t file_sz, code_off;\n    };\n\n    struct symbol {\n        int64_t offset;\n        char type, name[REC_SZ - sizeof(int64_t) - 1];\n    };\n#endif\n</code></pre> Bash<pre><code>linux$ gcc -E main.S  # \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 -E \u9009\u9879\u6765\u67e5\u770b\u9884\u5904\u7406\u540e\u7684\u7ed3\u679c\n# 0 \"main.S\"\n# 0 \"&lt;built-in&gt;\"\n# 0 \"&lt;command-line&gt;\"\n# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n# 0 \"&lt;command-line&gt;\" 2\n# 1 \"main.S\"\n# 1 \"dl.h\" 1\n# 2 \"main.S\" 2\n\n__hdr: .ascii \"\\x01\\x14\\x05\\x14\"; .4byte (__end - __hdr); .4byte (__code - __hdr)\n\n.align 32, 0; .8byte (0); .ascii \"+\" \"libc.dl\" \"\\0\"\n.align 32, 0; .8byte (0); .ascii \"+\" \"libhello.dl\" \"\\0\"\n.align 32, 0; hello: .8byte (0); .ascii \"?\" \"hello\" \"\\0\"\n.align 32, 0; exit: .8byte (0); .ascii \"?\" \"exit\" \"\\0\"\n.align 32, 0; .8byte (_start - __hdr); .ascii \"#\" \"_start\" \"\\0\"\n\n.fill 32 - 1, 1, 0; .align 32, 0; __code:\n\nmain:\n    call *hello(%rip)\n    call *hello(%rip)\n    call *hello(%rip)\n    call *hello(%rip)\n    movq $0, %rax\n    ret\n\n_start:\n    call main\n    jmp *exit(%rip)\n\n__end:\n</code></pre> <p></p> <p>\u6211\u4eec \u201c\u53d1\u660e\u201d \u4e86 GOT (Global Offset Table)\uff01</p> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u9700\u8981\u52a8\u6001\u89e3\u6790\u7684\u7b26\u53f7\uff0cGOT \u4e2d\u90fd\u6709\u4e00\u4e2a\u4f4d\u7f6e</li> <li>ELF: Relocation section \u201c.rela.dyn\u201d</li> </ul> C<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    exit(0);\n}\n</code></pre> Bash<pre><code>linux$ file a.out\na.out: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=4f42832abaead61246b7dd248749f056c3e2c373, for GNU/Linux 3.2.0, not stripped\nlinux$ readelf -a a.out\nRelocation section '.rela.plt' at offset 0x610 contains 1 entry:\nOffset          Info           Type           Sym. Value      Sym. Name + Addend\n000000003fd0  000400000007 R_X86_64_JUMP_SLO 0000000000000000 exit@GLIBC_2.2.5 + 0\nlinux$ pmap 15539\n15539:   /home/chaofu/jyy_os_2024/lecture/lect20/my/a.out\n0000555555554000      4K r---- a.out\n0000555555555000      4K r-x-- a.out\n...\ntotal             2644K\nlinux$ python\nPython 3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; hex(0x000000003fd0 + 0x0000555555554000)\n'0x555555557fd0'\n&gt;&gt;&gt; \n</code></pre> <p>\u8fd9\u610f\u5473\u7740 0x3fd0 + ELF header\u5730\u5740\u5c31\u662f\u8fd9\u4e2a GOT \u8868\u9879\u7684\u5730\u5740\uff0c\u8fd9\u4e2a\u8868\u9879\u91cc\u5b58\u653e\u7684\u662f exit \u771f\u6b63\u7684\u5730\u5740\u3002\u5728 gdb \u8c03\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u770b\u5230 a.out \u5728\u8fd0\u884c\u65f6\u7684\u5730\u5740\u7a7a\u95f4\u4ece 0x0000555555554000 \u5f00\u59cb\uff0c\u6211\u4eec\u8ba1\u7b97\u5f97\u77e5 0x555555557fd0 \u662f exit \u7684\u5730\u5740\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5730\u5740\u4e0a\u6253<code>rwatch *0x555555557fd0</code>\u770b\u5230\uff0c\u786e\u5b9e\u6709\u4eba\u8bfb\u4e86\u8fd9\u4e2a\u5730\u65b9\u7684\u4ee3\u7801\uff0c\u4e14\u8fd9\u4e2a\u5730\u65b9\u7684\u786e\u662f exit \u7684\u4ee3\u7801\u3002</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"printf: %p\\n\", main);\n    printf(\"main: %p\\n\", printf);\n}\n</code></pre> Bash<pre><code>linux$ readelf -a a.out\nRelocation section '.rela.dyn' at offset 0x550 contains 9 entries:\nOffset          Info           Type           Sym. Value    Sym. Name + Addend\n000000003fe0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 printf@GLIBC_2.2.5 + 0\n</code></pre> </li> <li> <p>\u52a8\u6001\u94fe\u63a5\u7684\u4e3b\u8981\u529f\u80fd\uff1a\u5b9e\u73b0\u4ee3\u7801\u7684\u52a8\u6001\u94fe\u63a5\u548c\u52a0\u8f7d</p> <ul> <li>main (.o) \u8c03\u7528 printf (.so)</li> <li>main (.o) \u8c03\u7528 foo (.o)</li> </ul> <p>\u96be\u9898\uff1a\u600e\u4e48\u51b3\u5b9a\u5230\u5e95\u8981\u4e0d\u8981\u67e5\u8868\uff1f\u8c03\u7528\u81ea\u5df1\u5199\u7684 foo \u548c\u8c03\u7528\u5e93\u51fd\u6570\u91cc\u7684 printf \u4e00\u6837\u90fd\u8981\u67e5\u8868\u5417\uff1f</p> <p>\u8fd9\u662f\u4e2a\u5386\u53f2\u9057\u7559\u95ee\u9898\uff1a\u5148\u7f16\u8bd1\u3001\u540e\u94fe\u63a5</p> <p>\u7f16\u8bd1\u5668\u7684\u9009\u62e9 1: \u5168\u90e8\u67e5\u8868\u8df3\u8f6c (\u8c03\u7528\u4e2a foo \u90fd\u591a\u67e5\u4e00\u6b21\u8868\uff0c\u6027\u80fd\u4e0d\u80fd\u5fcd\u274c)</p> C<pre><code>ff 25 00 00 00 00   call *FOO_OFFSET(%rip)\n</code></pre> <p>\u7f16\u8bd1\u5668\u7684\u9009\u62e9 2: \u5168\u90e8\u76f4\u63a5\u8df3\u8f6c (\u8df3\u4e0d\u8fc7\u53bb\u274c)</p> C<pre><code>e8 00 00 00 00      call &lt;reloc&gt;\n</code></pre> <ul> <li>%rip: 00005559892b7000</li> <li>libc.so.6: 00007fdcdf800000<ul> <li>\u76f8\u5dee\u4e86 2a8356549000</li> <li>4-byte \u7acb\u5373\u6570\u653e\u4e0d\u4e0b\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u8df3\u4e0d\u8fc7\u53bb</li> </ul> </li> </ul> <p>\u7f16\u8bd1\u5668\u7684\u9009\u62e9 3: PLT (Procedure Linkage Table) \u2705</p> <ul> <li>\u4e3a\u4e86\u6027\u80fd\uff0c\u201c\u5168\u90e8\u76f4\u63a5\u8df3\u8f6c\u201d \u662f\u552f\u4e00\u9009\u62e9</li> <li>\u5982\u679c\u8fd9\u4e2a\u7b26\u53f7\u5728\u94fe\u63a5\u65f6\u53d1\u73b0\u662f printf (\u6765\u81ea\u52a8\u6001\u52a0\u8f7d)\uff0c\u5c31\u5728 a.out \u91cc \u201c\u5408\u6210\u201d \u4e00\u6bb5\u5c0f\u4ee3\u7801\uff1a<ul> <li>i.e. \u5e93\u51fd\u6570\u7684\u624d\u9700\u8981 plt\uff0c\u9700\u8981\u67e5\u8868 GOT\u3002\uff08\u5148\u8df3\u4e00\u5c0f\u6b65\u5230 plt\uff0c\u518d\u901a\u8fc7 plt \u67e5\u5230\u7684 GOT \u8868\u9879\u8df3\u4e00\u5927\u6b65\uff09\u81ea\u5df1\u5199\u7684 foo.c \u4e0d\u9700\u8981\uff0c\u76f4\u63a5\u8df3\u8f6c</li> </ul> </li> </ul> C<pre><code>printf@plt:\n    jmp *PRINTF_OFFSET(%rip)\n</code></pre> </li> <li> <p>\u4e0a\u9762\u53ea\u662f\u89e3\u51b3\u4e86\u4ee3\u7801\u7684\u52a8\u6001\u52a0\u8f7d\u52a0\u8f7d\u548c\u94fe\u63a5\uff0c\u5982\u4f55\u5b9e\u73b0\u6570\u636e\u7684\u52a8\u6001\u52a0\u8f7d\u548c\u94fe\u63a5\uff1f</p> <ul> <li>main (.o) \u8bbf\u95ee stderr (libc.so)</li> <li>libjvm (.so) \u8bbf\u95ee stderr (libc.so)</li> <li>libjvm (.so) \u8bbf\u95ee heap (libjvm.so)<ul> <li>\u7f16\u8bd1\u65f6\u540c\u6837\u4e0d\u77e5\u9053\u6570\u636e\u5728\u54ea\u91cc</li> </ul> </li> </ul> <p>\u5bf9\u4e8e\u6570\u636e\uff0c\u6211\u4eec\u4e0d\u80fd \u201c\u95f4\u63a5\u8df3\u8f6c\u201d\uff01</p> <ul> <li>x = 1, \u540c\u4e00\u4e2a .so (\u6216 executable)</li> </ul> GAS<pre><code>mov $1, offset_of_x(%rip) # \u76f4\u63a5\u77e5\u9053\u5730\u5740\n</code></pre> <ul> <li>x = 1, \u53e6\u4e00\u4e2a .so</li> </ul> GAS<pre><code>mov GOT[x], %rdi          # \u9700\u8981\u67e5 GOT \u8868\u624d\u77e5\u9053\u5730\u5740\nmov $1, (%rdi)\n</code></pre> <p><code>__attribute__((visibility(\"hidden\")))</code> \u610f\u601d\u662f\u660e\u786e\u77e5\u9053\u8fd9\u4e2a\u53d8\u91cf\u5c5e\u4e8e\u672c so\uff0c\u4e0d\u662f\u5916\u90e8\u5e93\u91cc\u7684\u3002</p> <p>main.c</p> C<pre><code>#include &lt;stdio.h&gt;\n\nvoid A();\nvoid B();\n\nextern int x;\n\nint main() {\n    A();\n\n    printf(\"main: &amp;stderr = %p\\n\", &amp;stderr);\n    printf(\"main: &amp;x      = %p\\n\", &amp;x);\n\n    B();\n}\n</code></pre> <p>liba-1.c</p> C<pre><code>int x = 1;\n</code></pre> <p>liba-2.c</p> C<pre><code>#include &lt;stdio.h&gt;\n\nextern int x;\n\nvoid A() {\n    printf(\"liba: x = %d\\n\", x++);\n}\n</code></pre> <p>libb-1.c</p> C<pre><code>#include &lt;stdio.h&gt;\n\n// This x is from liba.\nextern int x;\n\n// This y is from libb.\nextern int __attribute__((visibility(\"hidden\"))) y;\n\nvoid *get_x_addr() {\n    return &amp;x;\n}\n\nvoid *get_y_addr() {\n    return &amp;y;\n}\n\nvoid set_x() {\n    x = 1;\n}\n\nvoid set_y() {\n    y = 1;\n}\n\nvoid *get_stderr() {\n    return &amp;stderr;\n}\n\nvoid B() {\n    printf(\"B   : &amp;stderr = %p\\n\", &amp;stderr);\n    printf(\"B   : &amp;x      = %p\\n\", &amp;x);\n}\n</code></pre> <p>libb-2.c</p> C<pre><code>int y = 0;\n</code></pre> Bash<pre><code>linux$ make\ngcc -Wall -fPIC -Os -c main.c -o main.o\ngcc -Wall -fPIC -Os -c liba-1.c -o liba-1.o\ngcc -Wall -fPIC -Os -c liba-2.c -o liba-2.o\ngcc -shared -o liba.so liba-1.o liba-2.o\ngcc -Wall -fPIC -Os -c libb-1.c -o libb-1.o\ngcc -Wall -fPIC -Os -c libb-2.c -o libb-2.o\ngcc -shared -o libb.so libb-1.o libb-2.o -L. -la\ngcc -o main main.o -L. -la -lb\nlinux$ LD_LIBRARY_PATH=. ./main \nliba: x = 1\nmain: &amp;stderr = 0x7f5b3bad6860\nmain: &amp;x      = 0x7f5b3bafa028\nB   : &amp;stderr = 0x7f5b3bad6860\nB   : &amp;x      = 0x7f5b3bafa028\n</code></pre> Bash<pre><code>linux$ objdump -d libb.so\n0000000000001119 &lt;get_x_addr&gt;:\n    1119:       f3 0f 1e fa             endbr64 \n    111d:       48 8b 05 b4 2e 00 00    mov    0x2eb4(%rip),%rax        # 3fd8 &lt;x@Base&gt;\n    1124:       c3                      ret    \n\n0000000000001125 &lt;get_y_addr&gt;:\n    1125:       f3 0f 1e fa             endbr64 \n    1129:       48 8d 05 fc 2e 00 00    lea    0x2efc(%rip),%rax        # 402c &lt;y&gt;\n    1130:       c3                      ret    \nlinux$ readelf -a libb.so # \u770b\u770b x \u5728\u54ea\u91cc\uff0c\u662f\u5728 GOT \u8868\u9879\nRelocation section '.rela.dyn' at offset 0x588 contains 9 entries:\nOffset          Info           Type           Sym. Value    Sym. Name + Addend\n...\n000000003fd8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 x + 0\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u7531\u4e8e x \u662f\u53e6\u5916\u4e00\u4e2a\u5e93 liba.so \u91cc\u7684\uff0c\u6240\u4ee5\u9700\u8981 mov \u6307\u4ee4\u53e6\u5916\u67e5\u8868\uff0c\u800c y \u662f\u672c\u5e93 libb.so \u91cc\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528 lea \u6307\u4ee4\u53bb load \u5730\u5740\u3002</p> </li> <li> <p>\u5bf9\u4e8e\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0cexecve\u540e\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u5728\u54ea\u91cc\uff1f</p> <p>\u5728\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u5f53\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u901a\u8fc7execve\u7cfb\u7edf\u8c03\u7528\u88ab\u52a0\u8f7d\u548c\u6267\u884c\u65f6\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u7684\u6267\u884c\u4f4d\u7f6e\u901a\u5e38\u4e0d\u662f\u76f4\u63a5\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u52a8\u6001\u94fe\u63a5\u5668\uff08\u4e5f\u79f0\u4e3a\u52a8\u6001\u52a0\u8f7d\u5668\uff09\u4e2d\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u8981\u7684\u8fc7\u7a0b\u63cf\u8ff0\uff1a</p> <ol> <li> <p>\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f1a\u52a0\u8f7d\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5934\u90e8\u4fe1\u606f\uff08\u4f8b\u5982ELF\u5934\u90e8\uff09\u4ee5\u786e\u5b9a\u6587\u4ef6\u7c7b\u578b\u548c\u6240\u9700\u7684\u52a8\u6001\u94fe\u63a5\u5668\u3002</p> </li> <li> <p>\u52a0\u8f7d\u52a8\u6001\u94fe\u63a5\u5668\uff1a\u6839\u636e\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5934\u90e8\u4fe1\u606f\uff0c\u5185\u6838\u4f1a\u52a0\u8f7d\u6307\u5b9a\u7684\u52a8\u6001\u94fe\u63a5\u5668 (\u4f8b\u5982\uff0c\u5728Linux\u7cfb\u7edf\u4e0a\uff0c\u901a\u5e38\u662f/lib/ld-linux.so\u6216\u7c7b\u4f3c\u8def\u5f84\u7684\u6587\u4ef6)\u3002</p> </li> <li> <p>\u8df3\u8f6c\u5230\u52a8\u6001\u94fe\u63a5\u5668\uff1a\u5185\u6838\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u3002\u6b64\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u6210\u4e3a\u7b2c\u4e00\u4e2a\u6267\u884c\u7684\u4ee3\u7801\u3002</p> </li> <li> <p>\u52a8\u6001\u94fe\u63a5\u548c\u52a0\u8f7d\uff1a\u52a8\u6001\u94fe\u63a5\u5668\u8d1f\u8d23\u89e3\u6790\u548c\u52a0\u8f7d\u6240\u6709\u9700\u8981\u7684\u5171\u4eab\u5e93\uff0c\u8fdb\u884c\u7b26\u53f7\u89e3\u6790\u548c\u91cd\u5b9a\u4f4d\u7b49\u5de5\u4f5c\u3002</p> </li> <li> <p>\u8df3\u8f6c\u5230\u7a0b\u5e8f\u5165\u53e3\u70b9\uff1a\u4e00\u65e6\u6240\u6709\u7684\u52a8\u6001\u94fe\u63a5\u548c\u52a0\u8f7d\u5de5\u4f5c\u5b8c\u6210\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u8df3\u8f6c\u5230\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\uff08\u901a\u5e38\u662f_start\u51fd\u6570\uff09\uff0c\u4ece\u800c\u5f00\u59cb\u6267\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u3002</p> </li> </ol> <p>\u56e0\u6b64\uff0cexecve\u540e\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u901a\u5e38\u662f\u5728\u52a8\u6001\u94fe\u63a5\u5668\u4e2d\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5b8c\u6210\u5176\u5de5\u4f5c\u540e\uff0c\u624d\u4f1a\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002</p> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u786e\u4fdd\u4e86\u6240\u6709\u52a8\u6001\u5e93\u548c\u4f9d\u8d56\u9879\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u4e4b\u524d\u90fd\u5df2\u7ecf\u6b63\u786e\u52a0\u8f7d\u548c\u94fe\u63a5\u3002</p> </li> <li> <p>\u5982\u4f55\u7f16\u8bd1\u51fa\u4e00\u4e2a\u4e0d\u4f7f\u7528\u9ed8\u8ba4ld.so\u4f5c\u4e3ainterpreter\u7684ELF\u52a8\u6001\u94fe\u63a5\u53ef\u6267\u884c\u6587\u4ef6?</p> <p>\u8981\u7f16\u8bd1\u4e00\u4e2a\u4e0d\u4f7f\u7528\u9ed8\u8ba4ld.so\u4f5c\u4e3a\u89e3\u91ca\u5668(interpreter)\u7684 ELF\u52a8\u6001\u94fe\u63a5\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>gcc</code>\u6216<code>ld</code>\u5e76\u6307\u5b9a\u81ea\u5b9a\u4e49\u7684\u89e3\u91ca\u5668\u8def\u5f84\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u6b65\u9aa4\uff1a</p> <ol> <li>\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684C\u7a0b\u5e8f (\u4f8b\u5982hello.c)</li> </ol> C<pre><code>#include &lt;stdio.h&gt; \n\nint main()\n{\n    printf(\"Hello, World!\\n\"); \n    return 0;\n}\n</code></pre> <ol> <li>\u7f16\u8bd1\u5e76\u94fe\u63a5\u7a0b\u5e8f\uff0c\u6307\u5b9a\u81ea\u5b9a\u4e49\u7684\u89e3\u91ca\u5668\u8def\u5f84\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528<code>-Wl,--dynamic-linker</code>\u9009\u9879\u6765\u6307\u5b9a\u89e3\u91ca\u5668\u8def\u5f84\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u4f7f\u7528/path/to/custom/ld.so\u4f5c\u4e3a\u89e3\u91ca\u5668\uff1a</li> </ol> Bash<pre><code>gcc -o hello hello.c -Wl,--dynamic-linker /path/to/custom/ld.so\n</code></pre> <ol> <li>\u9a8c\u8bc1ELF\u6587\u4ef6\u7684\u89e3\u91ca\u5668\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528<code>readelf</code>\u5de5\u5177\u6765\u68c0\u67e5\u751f\u6210\u7684LF\u6587\u4ef6\u7684\u89e3\u91ca\u5668\u8def\u5f84\uff1a</li> </ol> Bash<pre><code>readelf -a hello | grep \"program interpreter\" \n</code></pre> <p>\u8f93\u51fa\u5e94\u8be5\u7c7b\u4f3c\u4e8e\uff1a</p> Bash<pre><code>[Requesting program interpreter: /path/to/custom/ld.so] \n</code></pre> </li> <li> <p>LD_PRELOAD: \u5728\u52a0\u8f7d\u4e4b\u524d preload</p> <ul> <li>\u5982\u679c\u80fd\u94fe\u63a5\u6211\u4eec \u201c\u4fee\u6539\u201d \u8fc7\u7684 libc \u5c31\u597d\u4e86 \u2192 \u751a\u81f3\u6211\u4eec\u90fd\u4e0d\u9700\u8981\u4fee\u6539 libc</li> <li>\u52a8\u6001\u52a0\u8f7d\u7684\u5168\u5c40\u7b26\u53f7\uff1a\u5148\u5230\u5148\u5f97\uff0c\u6240\u4ee5\u7528 LD_PRELOAD \u5148\u5360\u636e\u4f60\u60f3\u8981\u5360\u636e\u7684\u4e1c\u897f\u5373\u53ef</li> </ul> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-21","title":"Lecture 21 \u7cfb\u7edf\u8c03\u7528\u3001\u4e2d\u65ad\u548c\u4e0a\u4e0b\u6587\u5207\u6362","text":"<p>Take-away Messages</p> <p>\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4\u662f\u4e00\u79cd\u7279\u6b8a\u7684 \u201c\u957f\u8df3\u8f6c\u201d\u2014\u2014\u800c\u8df3\u8f6c\u7684\u76ee\u6807\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u914d\u7f6e\u597d\u3001\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u51b3\u5b9a\u7684\u3002\u7c7b\u4f3c\u5730\uff0c\u5904\u7406\u5668\u4e2d\u65ad\u4e5f\u4f1a\u88ab\u52a8\u8c03\u7528\u957f\u8df3\u8f6c\u5230\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u3002\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4ee3\u7801\u4f1a \u201c\u5c01\u5b58\u201d \u8fdb\u7a0b\u7684\u72b6\u6001\u673a\uff1a</p> <ol> <li>\u5bf9\u4e8e\u5185\u5b58\u4e2d\u7684\u9875\u9762\uff0c\u4fdd\u6301\u539f\u5c01\u4e0d\u52a8\uff1b</li> <li>\u4f7f\u7528\u7cbe\u5fc3\u6784\u9020\u7684\u4ee3\u7801\uff0c\u5c0f\u5fc3\u5730\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u4fdd\u5b58\u5230\u5185\u5b58\u4e2d\u3002</li> </ol> <p>\u6b64\u65f6\uff0c\u8ba1\u7b97\u673a\u7cfb\u7edf\u5c31\u5904\u4e8e\u6240\u6709\u7a0b\u5e8f\u90fd\u88ab\u5c01\u5b58\u3001\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u6b63\u5728\u6267\u884c\u7684\u72b6\u6001\u3002\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u9009\u62e9\u6027\u5730\u8c03\u5ea6\u4e0b\u4e00\u4e2a\u5bc4\u5b58\u5668\u73b0\u573a\u5230 CPU \u4e0a\uff0c\u5b9e\u73b0\u4e0a\u4e0b\u6587\u5207\u6362\u3002</p> <ol> <li> <p>\u7cfb\u7edf\u8c03\u7528\uff1a\u5411\u64cd\u4f5c\u7cfb\u7edf\u7684 \u201c\u51fd\u6570\u8c03\u7528\u201d</p> <p>syscall: \u201c\u8df3\u8f6c\u5e76\u83b7\u5f97\u65e0\u9650\u7684\u6743\u529b\u201d</p> GAS<pre><code>call  printf@plt        // PLT; dynamic linked\ncall  pmm_alloc         // locally linked\n\n// syscall\u7684\u884c\u4e3a\u5982\u4e0b\uff1a\nsyscall = \u201cjal\u201d:        // jump and link, syscall\u7684\u9006\u64cd\u4f5c\u662fsysret\n    mov %rip, %rcx      // \u628a\u4e0b\u4e00\u6761\u8981\u6267\u884c\u7684\u6307\u4ee4\u7ed9rcx\n    mov %rflags, %r11   // \u628arflags\u7ed9r11\uff0c\u4fdd\u5b58\u597d\u73b0\u573a\n    set CS = kernel, SS = kernel, CPL = 0 // \u8fdb\u5165\u9ad8\u6743\u9650\u7684\u5185\u6838\n    jmp IA32_LSTAR      // \u8df3\u8f6c\u5230 Long System Target Address Register\n</code></pre> <ul> <li>\u6b64\u65f6 RIP = IA32_LSTAR, CPL = 0</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u914d\u7f6e IA32_LSTAR<ul> <li>setjmp() \u2192 \u5728\u53e6\u4e00\u4e2a\u6808\u4e2d\u6267\u884c \u2192 longjmp() \u2192 sysret</li> <li>\u6267\u884c\u65f6\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee I/O \u8bbe\u5907\u548c\u5185\u6838\u6570\u636e\u7ed3\u6784</li> <li>\u64cd\u4f5c\u7cfb\u7edf = C \u7a0b\u5e8f</li> </ul> </li> <li>\u8fdb\u7a0b\u7684\u5185\u5b58\u88ab \u201c\u62c6\u6563\u201d\uff0c\u5e76\u4e14\u88ab Page Table \u91cd\u7ec4\u4e86<ul> <li>\u4ece M[LSTAR] \u7684\u865a\u62df\u5730\u5740\u5904\u53d6\u6307\u4ee4</li> <li>Complete kernel virtual memory map</li> </ul> </li> </ul> <p>\u6211\u4eec\u600e\u4e48\u5728\u4e00\u4e2a syscall \u6307\u4ee4\u4e0a\u6253\u65ad\u70b9\uff1f\u27a1\ufe0f \u501f\u52a9 minimal.S \u9759\u6001\u94fe\u63a5\u7684\u7cfb\u7edf\u8c03\u7528\u548c QEMU \u7684\u65ad\u70b9\u673a\u5236\uff0c\u6211\u4eec\u5c31\u80fd \u201c\u6293\u4f4f\u201d \u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5e76\u4e14\u67e5\u770b\u524d\u540e\u5bc4\u5b58\u5668\u6570\u503c\u7684\u53d8\u5316\u3002init.py \u4e2d\u7684\u4ee3\u7801\u5bf9\u5927\u5bb6\u7406\u89e3\u7cfb\u7edf\u8f6f\u4ef6 (\u5c24\u5176\u662f\u548c\u5bc4\u5b58\u5668\u4fdd\u5b58/\u6062\u590d\u76f8\u5173\u7684\u6c47\u7f16\u4ee3\u7801) \u7684\u6307\u4ee4\u7ea7\u884c\u4e3a\uff0c\u662f\u975e\u5e38\u6709\u7528\u7684</p> Bash<pre><code>0xffffffff8dc00040 in ?? ()\nrcx 0x0 -&gt; 0x40101e\nr11 0x0 -&gt; 0x202 \nrip 0x40101c -&gt; 0xffffffff8dc00040 \neflags [ IOPL=0 IF ] -&gt; [ IOPL=0 ]\ncs 0x33 -&gt; 0x10\nss 0x2b -&gt; 0x18 \n(gdb)\n</code></pre> <p>init.py</p> Python<pre><code>import gdb\nimport re\n\nR = {}\n\ndef stop_handler(event):\n    if isinstance(event, gdb.StopEvent):\n        regs = [\n            line for line in \n                gdb.execute('info registers',\n                            to_string=True).\n                            strip().split('\\n')\n                    if not line.startswith('xmm')\n        ]\n        for line in regs:\n            parts = line.split()\n            key = parts[0]\n\n            if m := re.search(r'(\\[.*?\\])', line):\n                val = m.group(1)\n            else:\n                val = parts[1]\n\n            if key in R and R[key] != val:\n                print(key, R[key], '-&gt;', val)\n            R[key] = val\n\ngdb.events.stop.connect(stop_handler)\n\ngdb.execute('target remote localhost:1234')\ngdb.execute('hb *0x401000')\ngdb.execute('continue')\n</code></pre> </li> <li> <p>\u4e2d\u65ad = \u4e00\u6839\u7ebf\u3002\u201c\u544a\u8bc9\u5904\u7406\u5668\uff1a\u505c\u505c\uff0c\u6709\u4e8b\u6765\u4e86\u201d\uff0c\u5269\u4e0b\u5168\u662f\u5904\u7406\u5668\u7684\u4e8b\u3002\u53e6\u4e00\u79cd\u7406\u89e3\u4e2d\u65ad\u7684\u65b9\u5f0f\uff1a\u88ab\u5f3a\u5236 \u201c\u63d2\u5165\u201d \u7684 syscall</p> <p></p> <p>\u5904\u7406\u5668\u7684\u4e2d\u65ad\u884c\u4e3a\uff0c\u5982\u679c\u5904\u7406\u5668\u4e2d\u65ad\u6253\u5f00\uff1a</p> <ul> <li>x86 Family (CISC \u7684\u5386\u53f2\u9057\u8ff9\uff1b\u5904\u7406\u5668\u5b9e\u73b0\u7684\u5669\u68a6)<ul> <li>\u8be2\u95ee\u4e2d\u65ad\u63a7\u5236\u5668\u83b7\u5f97\u4e2d\u65ad\u53f7 <code>n</code></li> <li>\u4fdd\u5b58 <code>CS</code>, <code>EIP</code>, <code>EFLAGS</code>, <code>SS</code>, <code>ESP</code> \u5230\u5806\u6808</li> <li>\u8df3\u8f6c\u5230 <code>IDT[n]</code> \u4e2d\u7684 \u201cGate\u201d<ul> <li>\u4e00\u4e2a\u63cf\u8ff0\u5e26\u6743\u9650\u5207\u6362\u957f\u8df3\u8f6c\u7684\u6570\u636e\u7ed3\u6784</li> </ul> </li> </ul> </li> <li>RISC-V (M-Mode, Direct Exception Mode)<ul> <li>\u68c0\u67e5 <code>mie</code> \u662f\u5426\u5c4f\u853d\u6b64\u6b21\u4e2d\u65ad</li> <li>\u8df3\u8f6c <code>PC = (mtvec &amp; ~0xf)</code></li> <li>\u66f4\u65b0 <code>mcause.Interrupt = 1</code></li> </ul> </li> </ul> <p>\u4ee5 RISC-V \u4e3a\u4f8b\uff0c\u4e2d\u65ad\u5176\u5b9e\u662f\u4e00\u79cd\u88ab\u5f3a\u5236 \u201c\u63d2\u5165\u201d \u7684 syscall: (\u201c\u65e0\u8bba\u4f60\u73b0\u5728\u5728\u505a\u4ec0\u4e48\uff0c\u90fd\u53bb\u6267\u884c\u4e00\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u4ee3\u7801\u5427\u201d)</p> <p> \u4e2d\u65ad \u7cfb\u7edf\u8c03\u7528 (ecall) <ul> <li>\u4fdd\u5b58 <code>mepc = PC</code></li> <li>\u8df3\u8f6c <code>PC = (mtvec &amp; ~0xf)</code></li> <li>\u66f4\u65b0 <code>mcause.Interrupt = 1</code></li> </ul> <ul> <li>\u4fdd\u5b58 <code>mepc = PC</code></li> <li>\u8df3\u8f6c <code>PC = (mtvec &amp; ~0xf)</code></li> <li>\u66f4\u65b0 <code>mcause.Ecall = 1</code></li> </ul> </p> <p>\u4e2d\u65ad\u6765\u4e86\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u5e94\u8be5\u505a\u4ec0\u4e48\uff1f</p> <ul> <li>mov (kernel_rsp), %rsp<ul> <li>\u8fd9\u5c06\u662f\u81f4\u547d\u7684</li> <li>\u8fdb\u7a0b (\u72b6\u6001\u673a) \u7684\u72b6\u6001\u5c31\u6c38\u8fdc\u4e22\u5931\u4e86</li> </ul> </li> <li>\u9996\u5148\uff1a\u5c01\u5b58\u72b6\u6001\u673a (\u5bc4\u5b58\u5668) \u5230\u5185\u5b58\u4e0a<ul> <li>\u5185\u5b58\u7531\u6570\u636e\u7ed3\u6784\u63a7\u5236</li> </ul> </li> <li>\u7136\u540e\uff1a\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801<ul> <li>C \u4ee3\u7801\u53ef\u4ee5\u4efb\u610f\u4f7f\u7528\u5bc4\u5b58\u5668</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u9009\u62e9\u4e00\u4e2a\u8fd4\u56de\u7684\u72b6\u6001\u673a</li> <li>\u6062\u590d\u5bc4\u5b58\u5668\u72b6\u6001\uff0c\u6267\u884c sysret (iret)</li> </ul> </li> </ul> <p>thread-os.c</p> C<pre><code>#include &lt;am.h&gt;\n#include &lt;klib.h&gt;\n#include &lt;klib-macros.h&gt;\n\ntypedef union thread {\n    struct {\n        const char    *name;\n        void          (*entry)(void *);\n        Context       context;\n        union thread  *next;\n        char          end[0];\n    };\n    uint8_t stack[8192];\n} Thread;\n\nvoid T1(void *);\nvoid T2(void *);\nvoid T3(void *);\n\nThread threads[] = {\n    // Context for the bootstrap code:\n    { .name = \"_\", .entry = NULL, .next = &amp;threads[1] },\n\n    // Thread contests:\n    { .name = \"1\", .entry = T1, .next = &amp;threads[2] },\n    { .name = \"2\", .entry = T2, .next = &amp;threads[3] },\n    { .name = \"3\", .entry = T3, .next = &amp;threads[1] },\n};\nThread *current = &amp;threads[0];\n\nContext *on_interrupt(Event ev, Context *ctx) {\n    // Save context.\n    current-&gt;context = *ctx;\n\n    // Thread schedule.\n    current = current-&gt;next;\n\n    // Restore current thread's context.\n    return &amp;current-&gt;context;\n}\n\nint main() {\n    cte_init(on_interrupt);\n\n    for (int i = 1; i &lt; LENGTH(threads); i++) {\n        Thread *t = &amp;threads[i];\n        t-&gt;context = *kcontext(\n            // a Thread object:\n            // +--------------------------------------------+\n            // | name, ... end[0] | Kernel stack ...        |\n            // +------------------+-------------------------+\n            // ^                  ^                         ^     \n            // t                  &amp;t-&gt;end                   t + 1\n            (Area) { .start = &amp;t-&gt;end, .end = t + 1, },\n            t-&gt;entry, NULL\n        );\n    }\n\n    yield();    // \u6267\u884c yield() \u540e\u518d\u4e5f\u4e0d\u56de\u6765\u4e86\n    assert(0);  // Never returns. \u6c38\u8fdc\u4e0d\u53ef\u80fd\u8d70\u5230\u8fd9\u4e00\u884c\n    // \u64cd\u4f5c\u7cfb\u7edf\uff1a\u52a0\u8f7d\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7136\u540e\u53d8\u6210\u540e\u53f0\u7684\u4e00\u4e2a\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\n}\n\n\nvoid delay() {\n    for (int volatile i = 0;\n        i &lt; 10000000; i++);\n}\n\nvoid T1(void *arg) { while (1) { putch('A'); delay(); } }\nvoid T2(void *arg) { while (1) { putch('B'); delay(); } }\nvoid T3(void *arg) { while (1) { putch('C'); delay(); } }\n</code></pre> Bash<pre><code>linux$ make\n# Building kernel-image [x86_64-qemu]\n+ CC thread-os.c\n# Building am-archive [x86_64-qemu]\n# Building klib-archive [x86_64-qemu]\n+ LD -&gt; build/kernel-x86_64-qemu.elf\n# Creating image [x86_64-qemu]\n+ CREATE -&gt; build/kernel-x86_64-qemu\nlinux$ make run\n# Building kernel-run [x86_64-qemu]\n# Building am-archive [x86_64-qemu]\n# Building klib-archive [x86_64-qemu]\n+ LD -&gt; build/kernel-x86_64-qemu.elf\n# Creating image [x86_64-qemu]\n+ CREATE -&gt; build/kernel-x86_64-qemu\nABCACBABCABCABCABCBACABCABCBACBACABCBCABCABACBCABCABCABCABCABCABCABCABACBCABCABCABCABACBCABCABACBACBCABACABCBACABCABCAB\nlinux$ make debug # \u7136\u540e\u53e6\u5916\u5f00\u4e00\u4e2a\u7a97\u53e3 gdb -x init.gdb, \u518dlayout asm/si\u5355\u6b65\u6267\u884c\n</code></pre> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-22","title":"Lecture 22 \u8fdb\u7a0b\u7684\u5b9e\u73b0","text":"<p>Take-away Messages</p> <p>Everything is a state machine; \u800c\u64cd\u4f5c\u7cfb\u7edf\u5728\u4e2d\u65ad/\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u201c\u5c01\u5b58\u201d \u4e86\u6240\u6709\u8fdb\u7a0b\u7684\u72b6\u6001\u673a\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u5b83\u4eec\u91cd\u65b0\u52a0\u8f7d\u5230 CPU \u4e0a\u6267\u884c\u3002\u987a\u7740\u8fd9\u4e2a\u601d\u8def\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u5230 UNIX \u64cd\u4f5c\u7cfb\u7edf\u548c\u7cfb\u7edf\u8c03\u7528\u7684 \u201c\u76f4\u63a5\u201d \u5b9e\u73b0\u3002\u800c\u8fdb\u7a0b\u4e0d\u8fc7\u662f \u201c\u7ebf\u7a0b\u201d \u52a0\u4e0a\u4e86\u4e00\u4e2a\u5730\u5740\u7ffb\u8bd1\u51fd\u6570 (\u53ea\u8981\u52a0\u4e0a\u865a\u62df\u5185\u5b58 (VR \u773c\u955c))\u3002</p> <ol> <li> <p>\u8fdb\u7a0b = \u6234\u4e0a VR \u773c\u955c\u7684\u7ebf\u7a0b\u3002\u4e00\u4e2a\u51fd\u6570 f\uff0c\u4f7f\u6240\u6709\u5bf9\u5185\u5b58\u5730\u5740 x \u7684\u8bbf\u95ee\u90fd\u8f6c\u6362\u4e3a f(x)\u3002</p> <p></p> </li> <li> <p>Demand Paging</p> <p>\u8fdb\u7a0b\u80fd\u505a\u7684</p> <ul> <li>\u6267\u884c\u4e00\u6761 load/store \u8bbf\u95ee\u4e00\u4e2a\u5730\u5740</li> </ul> <p>\u64cd\u4f5c\u7cfb\u7edf\u770b\u5230\u7684</p> <ul> <li>\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7684\u533a\u95f4\u5217\u8868 (pmap)<ul> <li>\u6709\u4e9b\u90e8\u5206\u5206\u914d\u4e86\uff0c\u6709\u4e9b\u90e8\u5206\u6ca1\u5206\u914d</li> <li>\u54ea\u4e9b\u9875\u9762\u8981\u4fdd\u7559\u5728\u5185\u5b58\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8bf4\u4e86\u7b97</li> </ul> </li> <li>\u5982\u679c\u53d1\u751f Page Fault<ul> <li>\u5408\u6cd5\uff0c\u672a\u5206\u914d\uff1a\u6539\u53d8 f (\u6570\u636e\u7ed3\u6784)\uff0c\u6620\u5c04\u4e00\u9875</li> <li>\u975e\u6cd5\uff1aSIGSEGV</li> </ul> </li> </ul> </li> <li> <p>Copy-on-write fork()\uff1a\u51fd\u6570 f \u7684\u5999\u7528</p> <ul> <li>fork() \u540e\u76f4\u63a5\u628a\u7236\u5b50\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u6807\u8bb0\u6210\u53ea\u8bfb<ul> <li>\u5728\u6700\u9876\u5c42\u9875\u8868\u6807\u8bb0\u5373\u53ef</li> </ul> </li> <li>\u4efb\u4f55\u5408\u6cd5\u7684 store Page Fault \u65f6\u5c31\u4f1a\u5206\u6210\u4e24\u79cd\u60c5\u51b5<ul> <li>\u672a\u5206\u914d\uff1a\u76f4\u63a5\u5206\u914d</li> <li>\u5df2\u5206\u914d (read-only)\uff1a\u590d\u5236\u4e00\u4efd<ul> <li>share_count--</li> <li>share_count == 1 \u6700\u540e\u4e00\u4efd\u53ea\u8bfb\u526f\u672c\u4e5f\u53d8\u6210\u53ef\u5199</li> </ul> </li> </ul> </li> </ul> <p>fork() \u5728\u8fdb\u884c\u72b6\u6001\u673a\u590d\u5236\u65f6\uff0c\u867d\u7136\u7406\u8bba\u4e0a\u9700\u8981\u505a\u51fa\u5b8c\u6574\u7684\u72b6\u6001\u590d\u5236\uff0c\u4f46\u672c\u7740 \u201c\u590d\u5236\u7684\u6570\u636e\u53ef\u80fd\u7acb\u5373\u88ab\u6d6a\u8d39\u6389\u201d \u7684\u89c2\u5bdf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5e0c\u671b\u53ea\u5728 \u201c\u4e0d\u5f97\u4e0d\u590d\u5236\u201d \u65f6\u624d\u590d\u5236\u3002</p> <p>\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u7ef4\u62a4\u9875\u9762\u7684\u5171\u4eab\u60c5\u51b5\uff0c\u5e76\u5728 fork \u540e\u5c06\u7236\u5b50\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u90fd\u6807\u8bb0\u4e3a read-only\uff0c\u800c\u5f53\u53cc\u65b9\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u8fdb\u7a0b\u5199\u5165\u53d1\u751f page fault \u65f6\uff0c\u624d\u590d\u5236\u4e00\u9875\u3002\u5bf9\u4e8e\u8fde\u7eed\u7684 fork()\uff0c\u5219\u4f1a\u4ea7\u751f\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u9875\u9762\u7684\u60c5\u51b5\u3002</p> </li> <li> <p>xv6: a simple, Unix-like teaching operating system</p> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-23","title":"Lecture 23 \u5904\u7406\u5668\u8c03\u5ea6","text":"<p>Take-away Messages</p> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u4e3b\u9898\u5c31\u662f\u673a\u5236\u548c\u7b56\u7565\u7684\u5206\u79bb\u2014\u2014\u5b83\u5e2e\u52a9\u6211\u4eec\u5206\u79bb\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u7684\u590d\u6742\u6027\uff0c\u4f7f\u6211\u4eec\u80fd\u5728\u4e00\u4e2a\u5e72\u51c0\u7684\u6982\u5ff5\u4f53\u7cfb\u4e0a\u5904\u7406\u590d\u6742\u7684\u7cfb\u7edf\u3002\u6211\u4eec\u770b\u5230\u8bb8\u591a\u8fd9\u6837\u7684\u4f8b\u5b50\uff1a\u5206\u9875\u673a\u5236\u548c demand-paging \u7b56\u7565\uff1b\u4e0a\u4e0b\u6587\u5207\u6362\u673a\u5236\u548c\u8c03\u5ea6\u7b56\u7565\uff1b\u5b89\u5168\u673a\u5236\u548c\u8bbf\u95ee\u63a7\u5236\u7b56\u7565\u7b49\u7b49\u3002\u901a\u8fc7\u5c06\u673a\u5236\u548c\u7b56\u7565\u5206\u79bb\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u6539\u53d8\u5e95\u5c42\u673a\u5236\u7684\u60c5\u51b5\u4e0b\u8c03\u6574\u7b56\u7565\uff0c\u4ece\u800c\u66f4\u7075\u6d3b\u5730\u9002\u5e94\u4e0d\u540c\u7684\u9700\u6c42\u548c\u73af\u5883\u3002\u8fd9\u79cd\u5206\u79bb\u8fd8\u4f7f\u5f97\u7cfb\u7edf\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u66f4\u52a0\u6a21\u5757\u5316\u548c\u53ef\u7ef4\u62a4\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u548c\u4f18\u5316\u3002</p> <ol> <li> <p>\u5904\u7406\u5668\u8c03\u5ea6</p> <p>UNIX Niceness\uff1a-20 ... 19 \u7684\u6574\u6570\uff0c\u8d8a nice \u8d8a\u8ba9\u522b\u4eba\u5f97\u5230 CPU</p> <ul> <li>-20: \u6781\u574f; most favorable to the process</li> <li>19: \u6781\u597d; least favorable to the process</li> </ul> Bash<pre><code>linux$ # \u5c06\u8fdb\u7a0b\u7ed1\u5b9a\u5230 cpu 3\u4e0a\u6267\u884c\uff0c\u8bbe\u7f6enice\u503c\u4e3a19\u548c9\uff0c\u770b\u5230CPU\u5229\u7528\u7387\u670910\u500d\u4e4b\u5dee\ntaskset -c 3 nice -n 19 yes &gt; /dev/null &amp;\ntaskset -c 3 nice -n  9 yes &gt; /dev/null &amp;\nlinux$ top\nPID  USER     PR  NI   VIRT   RES    SHR S  %CPU  %MEM     TIME+ COMMAND\n1539 linux    29   9   3208   1004   908 R  90.4   0.0   0:16.90 yes\n1538 linux    39  19   3208   1032   940 R   9.6   0.0   0:01.84 yes\n</code></pre> </li> <li> <p>\u7b56\u7565\uff1a\u52a8\u6001\u4f18\u5148\u7ea7 (MLFQ)\u3002\u7cfb\u7edf\u81ea\u52a8\u8bbe\u5b9a\u4f18\u5148\u7ea7\uff1a</p> <ul> <li>\u7528\u5b8c\u65f6\u95f4\u7247 \u2192 \u574f\u4eba (\u8bf7\u8ba9\u5b83\u53d8\u5f97 \u201c\u66f4\u597d\u201d\uff0c\u4f18\u5148\u7ea7\u53d8\u4f4e \u2193)</li> <li>\u8ba9\u51fa CPU (I/O) \u2192 \u597d\u4eba (\u53ef\u4ee5\u53d8\u5f97\u66f4\u574f\uff0c\u4f18\u5148\u7ea7\u53d8\u9ad8 \u2191)</li> </ul> <p></p> <p>\u7b56\u7565\uff1aComplete Fair Scheduling (CFS)\u3002\u201c\u8ba9\u7cfb\u7edf\u91cc\u7684\u6240\u6709\u8fdb\u7a0b\u5c3d\u53ef\u80fd\u516c\u5e73\u5730\u5171\u4eab\u5904\u7406\u5668\u201d\uff1a</p> <ul> <li>\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u8bb0\u5f55\u7cbe\u786e\u7684\u8fd0\u884c\u65f6\u95f4</li> <li>\u4e2d\u65ad/\u5f02\u5e38\u53d1\u751f\u540e\uff0c\u5207\u6362\u5230\u8fd0\u884c\u65f6\u95f4\u6700\u5c11\u7684\u8fdb\u7a0b\u6267\u884c</li> </ul> </li> <li> <p><code>lstopo</code>: \u7528\u4e8e\u663e\u793a\u7cfb\u7edf\u786c\u4ef6\u62d3\u6251\u7ed3\u6784\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u7cfb\u7edf\u4e2d\u5404\u4e2a\u786c\u4ef6\u7ec4\u4ef6\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\u548c\u5c42\u6b21\u7ed3\u6784\u3002</p> <p></p> </li> <li> <p>\u771f\u5b9e\u7684\u5904\u7406\u5668\u8c03\u5ea6</p> <ul> <li>\u4f18\u5148\u7ea7\u53cd\u8f6c\uff1a\u53ea\u6709\u4e00\u4e2a\u5904\u7406\u5668\u65f6\uff0cjyy \u5728\u6301\u6709\u4e92\u65a5\u9501\u7684\u65f6\u5019\u88ab\u4e2d\u4f18\u5148\u7ea7\u8fdb\u7a0b changxu \u8d76\u4e0b\u4e86\u5904\u7406\u5668\uff08\u6ca1\u505a\u5b8c\u5de5\u4f5c\uff0c\u9501\u8fd8\u6ca1\u91ca\u653e\uff09\uff0c\u7136\u800c\u66f4\u9ad8\u4f18\u5148\u7ea7\u7684xxm \u6765\u4e86\u540e\u56e0\u4e3a\u6ca1\u6709\u83b7\u5f97\u9501\uff0c\u53ea\u80fd\u6700\u540e\u88ab\u6392\u5230\u3002</li> </ul> C<pre><code>void jyy@nju.edu.cn() {\n    nice(10);\n    mutex_lock(&amp;restroom_lock);\n}\n\nvoid changxu@nju.edu.cn() {\n    nice(0);\n    while (1) ;\n}\n\nvoid xxm@nju.edu.cn() {\n    nice(-10);\n    mutex_lock(&amp;restroom_lock);\n}\n</code></pre> <ul> <li> <p>\u4eca\u5929\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\uff1aSMP (Symmetric Multi-processing)</p> <ul> <li>\u65e2\u4e0d\u80fd\u7b80\u5355\u5730 \u201c\u5206\u914d\u7ebf\u7a0b\u5230\u5904\u7406\u5668\u201d<ul> <li>\u7ebf\u7a0b\u9000\u51fa\uff0c\u77ac\u95f4\u5904\u7406\u5668\u5f00\u59cb\u56f4\u89c2</li> </ul> </li> <li>\u4e5f\u4e0d\u80fd\u7b80\u5355\u5730 \u201c\u8c01\u7a7a\u4e22\u7ed9\u8c01\u201d<ul> <li>\u5728\u5904\u7406\u5668\u4e4b\u95f4\u8fc1\u79fb\u4f1a\u5bfc\u81f4 cache/TLB \u5168\u90fd\u767d\u7ed9</li> <li>mmap/munmap/mprotect \u4f1a\u89e6\u53d1 TLB Shootdown</li> </ul> </li> </ul> </li> <li> <p>\u800c\u4e14\u8fd8\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5b9e\u9645\u60c5\u51b5</p> <ul> <li>NUMA (Non-uniform memory access): \u5171\u4eab\u5185\u5b58\u5bc6\u96c6\u578b\u7a0b\u5e8f\u5728\u8fdc/\u8fd1 CPU \u4e0a\u6027\u80fd\u5dee\u8fbe\u5230\u6570\u500d</li> <li>\u591a\u7528\u6237: \u5355\u7ebf\u7a0b\u7684 A \u548c 10,000 \u7ebf\u7a0b\u7684 B \u5728 CFS \u4e0a\u5171\u4eab CPU...\uff1f</li> <li>\u5f02\u6784\u5904\u7406\u5668: Intel Core Ultra 7: 6P (\u00d7 2T) + 8E + 2LPE\uff0c\u5927\u5c0f\u6838...</li> <li>\u66f4\u5c11\u7684\u5904\u7406\u5668\uff0c\u53cd\u800c\u66f4\u5feb...</li> </ul> Bash<pre><code>linux$ time ./sum \nsum = 200000000\n2*n = 200000000\n\n________________________________________________________\nExecuted in 2.37 secs    fish           external\nusr time    4.70 secs  224.00 micros    4.70 secs\nsys time    0.01 secs  168.00 micros    0.01 secs\n\nlinux$ time taskset -c 0 ./sum\nsum = 200000000\n2*n = 200000000\n\n________________________________________________________\nExecuted in 1.12 secs    fish           external\nusr time    1.12 secs  421.00 micros    1.12 secs\nsys time    0.00 secs  252.00 micros    0.00 secs\n\nlinux$ time taskset -c 0,1,2,3 ./sum\nsum = 200000000\n2*n = 200000000\n\n________________________________________________________\nExecuted in 2.13 secs    fish           external\nusr time    4.24 secs  323.00 micros    4.24 secs\nsys time    0.01 secs  194.00 micros    0.01 secs\n\nlinux$ \n</code></pre> </li> </ul> </li> </ol>"},{"location":"OS/%E8%99%9A%E6%8B%9F%E5%8C%96/#lecture-24","title":"Lecture 24 \u72b6\u6001\u673a\u6a21\u578b\u7684\u5e94\u7528","text":"<p>Take-away Messages</p> <p>\u5728\u8fd9\u95e8\u8bfe\u4e2d\uff0c\u6211\u4eec\u4ece \u201c\u6570\u5b66\u201d \u7684\u89c6\u89d2\u53bb\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u7684\u4e00\u5207\u2014\u2014\u5f53\u6211\u4eec\u628a\u7a0b\u5e8f\u3001\u7a0b\u5e8f\u7684\u6267\u884c\u3001\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u6267\u884c\u3001\u7cfb\u7edf\u8c03\u7528\u2026\u2026\u8fd9\u4e9b\u770b\u8d77\u6765\u5305\u7f57\u4e07\u8c61\u7684\u590d\u6742\u6982\u5ff5\u90fd\u6295\u5c04\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u4e0a\uff0c\u7528 \u201c\u5e72\u51c0\u201d \u7684\u601d\u7eea\u53bb\u5bfb\u627e\u95ee\u9898\u7684\u672c\u8d28\u3002\u65e0\u8bba\u662f\u4f60\u5e0c\u671b\u5b9e\u73b0\u4e00\u4e2a\u673a\u5236 (\u4f8b\u5982\u4eca\u5929\u7684\u4fe1\u53f7)\uff0c\u8fd8\u662f\u5e0c\u671b\u8bca\u65ad\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\uff0c\u72b6\u6001\u673a\u7684\u89c6\u89d2\u90fd\u5e2e\u52a9\u4f60\u6392\u9664\u5e72\u6270\u3001\u627e\u5230\u5173\u952e\u3002</p> <ol> <li> <p>Profiler: \u5b9e\u73b0 - \u9694\u4e00\u6bb5\u65f6\u95f4 \u201c\u6682\u505c\u201d \u7a0b\u5e8f\u3001\u89c2\u5bdf\u72b6\u6001\u673a\u7684\u6267\u884c</p> <ul> <li>\u4e2d\u65ad\u5c31\u53ef\u4ee5\u505a\u5230 (\u4f8b\u5982\u4e2d\u65ad\u5904\u7406\u7684\u65f6\u5019 printf current pc...)</li> <li>\u7ed9 s \u2192 s\u2032 \u7684\u6307\u4ee4 \u201c\u8bb0\u8d26\u201d<ul> <li>\u5bf9\u5e94\u7684\u8bed\u53e5</li> <li>\u51fd\u6570\u8c03\u7528\u6808</li> </ul> </li> <li>\u5f97\u5230\u7edf\u8ba1\u610f\u4e49\u7684\u6027\u80fd\u6458\u8981</li> </ul> </li> <li> <p>\u4e3a\u4ec0\u4e48 Ctrl-C \u53ef\u4ee5\u7ec8\u6b62\u7a0b\u5e8f? \u27a1\ufe0f Ctrl-C \u662f\u4e00\u4e2a\u4fe1\u53f7\uff0c\u79f0\u4e3a SIGINT\uff08Interrupt Signal\uff09\u3002\u5f53\u7528\u6237\u5728\u7ec8\u7aef\u4e2d\u6309\u4e0b Ctrl-C \u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5411\u5f53\u524d\u6b63\u5728\u8fd0\u884c\u7684\u524d\u53f0\u8fdb\u7a0b\u53d1\u9001 SIGINT \u4fe1\u53f7\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u7684\u76ee\u7684\u662f\u8bf7\u6c42\u8fdb\u7a0b\u7ec8\u6b62\u6267\u884c\u3002</p> <p>kill \u7cfb\u7edf\u8c03\u7528: \u53d1\u9001\u4fe1\u53f7 (\u4e0d\u662f \u201c\u6740\u6b7b\u201d)</p> <ul> <li>UNIX: \u6211\u4eec\u5c31\u8fd9\u4e48\u968f\u624b\u4e00\u547d\u540d \ud83d\ude02</li> <li>\u547d\u4ee4\u884c\uff1a<code>kill -SIGNAME pid</code><ul> <li>\u53ef\u4ee5 <code>SIGINT</code>, <code>SIGQUIT</code>, ...<ul> <li><code>SIGKILL</code> (9) \u662f\u4e0d\u53ef\u5ffd\u7565\u7684\u4fe1\u53f7</li> <li>\u5f3a\u884c\u7ec8\u6b62\uff0c\u56e0\u6b64\u4e0d\u63a8\u8350</li> </ul> </li> </ul> </li> </ul> C<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;unistd.h&gt;\n\nvoid handler(int signum) {\n    switch (signum) {\n        case SIGINT:\n            printf(\"Received SIGINT!\\n\");\n            break;   // ctrl+c \u65e0\u6cd5\u9000\u51fa\n        case SIGQUIT:\n            printf(\"Received SIGQUIT!\\n\");\n            exit(0); // \u56e0\u6b64\u53ea\u6709 ctrl+\\ \u624d\u80fd\u9000\u51fa\n            break;\n    }\n}\n\nvoid cleanup() {\n    printf(\"atexit() cleanup\\n\");\n}\n\nint main() {\n    signal(SIGINT,  handler);\n    signal(SIGQUIT, handler);\n    atexit(cleanup);\n\n    while (1) {\n        char buf[4096];\n        int nread = read(STDIN_FILENO, buf, sizeof(buf));\n        buf[nread - 1] = '\\0';\n        printf(\"[%d] Got: %s\\n\", getpid(), buf);\n        if (nread &lt; 0) {\n            perror(\"read\");\n            exit(1);\n        }\n        sleep(1);\n    }\n}\n</code></pre> Bash<pre><code>linux$ ./signal \n^CReceived SIGINT!\n^\\Received SIGQUIT!\natexit() cleanup\n</code></pre> </li> </ol>"},{"location":"Tool/tool/","title":"Tool","text":"<p> \u7ea6 3127 \u4e2a\u5b57  152 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 12 \u5206\u949f</p>"},{"location":"Tool/tool/#gcc","title":"gcc","text":"<ul> <li><code>-c</code>: \u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5\u3002 \u5b83\u544a\u8bc9\u7f16\u8bd1\u5668\u7f16\u8bd1\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u4f46\u4e0d\u8fdb\u884c\u94fe\u63a5\u64cd\u4f5c\u3002\u5f53\u4f7f\u7528\u8fd9\u4e2a\u9009\u9879\u65f6\uff0cGCC \u4f1a\u5c06\u6bcf\u4e2a\u6307\u5b9a\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u5bf9\u5e94\u7684\u76ee\u6807\u6587\u4ef6\uff08\u901a\u5e38\u662f .o \u6587\u4ef6\uff09\uff0c\u800c\u4e0d\u662f\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002\u76ee\u6807\u6587\u4ef6\u5305\u542b\u4e86\u7f16\u8bd1\u540e\u7684\u673a\u5668\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u7a0d\u540e\u88ab\u94fe\u63a5\u5668\uff08\u901a\u5e38\u662f ld\uff09\u7528\u6765\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5e93\u6587\u4ef6\u3002</li> <li><code>-I.</code>: \u6307\u5b9a\u5f53\u524d\u76ee\u5f55\uff08<code>.</code>\uff09\u4e3a\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff0c\u8fd9\u610f\u5473\u7740\u7f16\u8bd1\u5668\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u67e5\u627e\u5934\u6587\u4ef6\u3002</li> <li><code>-L</code>: \u589e\u52a0 link search path\uff0c\u4f8b\u5982 <code>-L.</code>\u8868\u793a\u589e\u52a0\u5f53\u524d\u76ee\u5f55\uff08<code>.</code>\uff09\u4e3a\u94fe\u63a5\u641c\u7d22\u8def\u5f84</li> <li><code>-l</code>: \u4ee3\u8868\u94fe\u63a5\u67d0\u4e2a\u5e93\uff0c\u94fe\u63a5\u65f6\u4f1a\u81ea\u52a8\u52a0\u4e0a lib \u7684\u524d\u7f00\u3002\u4f8b\u5982 <code>-lco-64</code> \u8868\u793a\u4f1a\u4f9d\u6b21\u5728\u5e93\u51fd\u6570\u7684\u641c\u7d22\u8def\u5f84\u4e2d\u67e5\u627e libco-64.so \u548c libco-64.a\uff0c\u76f4\u5230\u627e\u5230\u4e3a\u6b62\u3002</li> <li><code>-g</code>\uff1a\u751f\u6210\u8c03\u8bd5\u4fe1\u606f\u3002\u8fd9\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u751f\u6210\u8c03\u8bd5\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u88ab\u8c03\u8bd5\u5668\uff08\u5982 GDB\uff09\u4f7f\u7528\uff0c\u4ee5\u4fbf\u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u63d0\u4f9b\u66f4\u591a\u7684\u5e2e\u52a9\u3002\u53ea\u6709\u8fd9\u6837gdb\u624d\u80fd\u8c03\u8bd5\u65f6\u770b\u5230\u4ee3\u7801\u3002</li> <li><code>--verbose</code>: \u67e5\u770b\u6240\u6709\u7f16\u8bd1\u9009\u9879\u3002\u8fd9\u4f1a\u4f7f\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u8f93\u51fa\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6b65\u9aa4\u3002</li> <li><code>-Wl,--verbose</code>: \u67e5\u770b\u6240\u6709\u94fe\u63a5\u9009\u9879\u3002</li> <li><code>-S</code>: \u8868\u793a\u7f16\u8bd1\u5230\u6c47\u7f16\u4ee3\u7801\u9636\u6bb5\uff0c\u5373\u751f\u6210 <code>.s</code> \u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002<code>.S</code>\u6587\u4ef6\uff1a\u5728\u7f16\u8bd1\u4e4b\u524d\uff0c\u4f1a\u7ecf\u8fc7C\u9884\u5904\u7406\u5668\uff08cpp\uff09\u7684\u5904\u7406\u3002\u8fd9\u610f\u5473\u7740<code>.S</code>\u6587\u4ef6\u53ef\u4ee5\u5305\u542bC\u9884\u5904\u7406\u6307\u4ee4\uff0c\u5982\u5b8f\u5b9a\u4e49\u3001\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4<code>#ifdef</code>\u3001<code>#ifndef</code>\u3001<code>#endif</code>\u7b49\uff0c\u4ee5\u53ca<code>#include</code>\u6307\u4ee4\u6765\u5305\u542b\u5176\u4ed6\u6587\u4ef6\u3002\u9884\u5904\u7406\u5668\u4f1a\u6839\u636e\u8fd9\u4e9b\u6307\u4ee4\u5bf9\u6587\u4ef6\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u5c06\u5904\u7406\u540e\u7684\u6587\u4ef6\u4ea4\u7ed9\u7f16\u8bd1\u5668\u8fdb\u884c\u7f16\u8bd1\u3002<code>.s</code>\u6587\u4ef6\uff1a\u4e0d\u4f1a\u7ecf\u8fc7C\u9884\u5904\u7406\u5668\u7684\u5904\u7406\uff0c\u76f4\u63a5\u88ab\u7f16\u8bd1\u5668\u7f16\u8bd1\u3002\u56e0\u6b64\uff0c<code>.s</code>\u6587\u4ef6\u4e2d\u4e0d\u80fd\u5305\u542bC\u9884\u5904\u7406\u6307\u4ee4\uff0c\u53ea\u80fd\u5305\u542b\u6c47\u7f16\u4ee3\u7801\u3002</li> <li><code>-Wall</code>: \u542f\u7528\u6240\u6709\u7684\u8b66\u544a\u4fe1\u606f\u3002</li> <li><code>-Os</code>: \u4f18\u5316\u4ee3\u7801\u5927\u5c0f\u3002\u5728\u4e0d\u663e\u8457\u5f71\u54cd\u7a0b\u5e8f\u6027\u80fd\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u5730\u51cf\u5c11\u4ee3\u7801\u7684\u5927\u5c0f\u3002</li> <li><code>-s</code>: \u53bb\u9664\u7b26\u53f7\u8868\u548c\u8c03\u8bd5\u4fe1\u606f\uff0c\u8fd9\u4e5f\u6709\u52a9\u4e8e\u51cf\u5c0f\u6700\u7ec8\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5927\u5c0f</li> <li><code>-DSTANDALONE</code>: <code>-D</code> \u9009\u9879\u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a <code>STANDALONE</code>\u7684\u5b8f\uff0c\u8fd9\u4e2a\u5b8f\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u88ab\u7528\u6765\u63a7\u5236\u4e0d\u540c\u7684\u7f16\u8bd1\u8def\u5f84\u6216\u884c\u4e3a\u3002</li> <li><code>-fsanitize=address</code>: \u7528\u4e8e\u542f\u7528 AddressSanitizer\uff08ASan\uff09\u3002AddressSanitizer \u662f\u4e00\u4e2a\u5185\u5b58\u9519\u8bef\u68c0\u6d4b\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u53d1\u73b0\u548c\u5b9a\u4f4d\u5185\u5b58\u8bbf\u95ee\u9519\u8bef\uff0c\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\u3001\u8d8a\u754c\u8bbf\u95ee\u3001\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58\u7b49\u3002</li> <li><code>-fsanitize=thread</code>: \u7528\u4e8e\u542f\u7528 ThreadSanitizer\uff08TSan\uff09\u3002ThreadSanitizer \u662f\u4e00\u4e2a\u7ebf\u7a0b\u9519\u8bef\u68c0\u6d4b\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u53d1\u73b0\u548c\u5b9a\u4f4d\u7ebf\u7a0b\u76f8\u5173\u7684\u9519\u8bef\uff0c\u5982\u6570\u636e\u7ade\u4e89\u3001\u7ade\u6001\u6761\u4ef6\u7b49\u3002\uff08\u5e76\u975e\u4e07\u80fd\uff0c\u6709\u7684\u65f6\u5019\u53ef\u80fd\u6293\u4e0d\u5230data race\uff09</li> <li><code>-fsanitize=undefined</code>: \u7528\u4e8e\u542f\u7528 UndefinedBehaviorSanitizer\uff08UBSan\uff09\u3002UBSan \u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u884c\u4e3a\u68c0\u6d4b\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u53d1\u73b0\u548c\u5b9a\u4f4d\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u5982\u4f7f\u7528\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3001\u9664\u4ee5\u96f6\u7b49\u3002</li> <li><code>-fPIE</code>: \u751f\u6210\u4f4d\u7f6e\u65e0\u5173\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5168\u79f0\u662f \"Position Independent Executable\"\uff0c\u5373\u4f4d\u7f6e\u65e0\u5173\u53ef\u6267\u884c\u6587\u4ef6\u3002\u8fd9\u610f\u5473\u7740\u4ee3\u7801\u4e2d\u7684\u6240\u6709\u5730\u5740\u5f15\u7528\u90fd\u662f\u76f8\u5bf9\u4e8e\u7a0b\u5e8f\u7684\u52a0\u8f7d\u5730\u5740\u7684\u504f\u79fb\u91cf\uff0c\u800c\u4e0d\u662f\u7edd\u5bf9\u5730\u5740\u3002\u8fd9\u6837\uff0c\u65e0\u8bba\u7a0b\u5e8f\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5b83\u90fd\u53ef\u4ee5\u6b63\u786e\u6267\u884c\u3002</li> <li><code>-fPIC</code>: \u751f\u6210\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801\u3002\u5168\u79f0\u662f \"Position Independent Code\"\uff0c\u8fd9\u79cd\u4ee3\u7801\u53ef\u4ee5\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u4efb\u4f55\u4f4d\u7f6e\u5e76\u6b63\u786e\u6267\u884c\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u751f\u6210\u5171\u4eab\u5e93\uff08<code>.so</code> \u6587\u4ef6\uff09\uff0c\u56e0\u4e3a\u5171\u4eab\u5e93\u9700\u8981\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\u88ab\u52a0\u8f7d\u5230\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\u3002</li> <li><code>-fno-pic</code>: \u4e0d\u751f\u6210\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4ee3\u7801\u88ab\u52a0\u8f7d\u5230\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\uff0c\u5b83\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e2a\u9009\u9879\u901a\u5e38\u53ea\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u4f8b\u5982\u5f53\u4f60\u9700\u8981\u4f18\u5316\u4ee3\u7801\u7684\u6027\u80fd\u6216\u8005\u5f53\u4f60\u77e5\u9053\u4ee3\u7801\u5c06\u603b\u662f\u88ab\u52a0\u8f7d\u5230\u76f8\u540c\u7684\u5185\u5b58\u5730\u5740\u65f6\u3002</li> <li><code>-ffreestanding -nostdlib</code>: \u7f16\u8bd1\u7684\u76ee\u6807\u4ee3\u7801\u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\u7684\u7279\u5b9a\u529f\u80fd\u6216\u5e93\u3002\u4e0d\u4f7f\u7528\u6807\u51c6\u5e93\u3002</li> <li><code>-shared</code>: \u751f\u6210\u5171\u4eab\u5e93\u3002\u8fd9\u544a\u8bc9\u7f16\u8bd1\u5668\u751f\u6210\u4e00\u4e2a\u5171\u4eab\u5e93\uff08\u901a\u5e38\u662f <code>.so</code> \u6587\u4ef6shared object\uff09\uff0c\u800c\u4e0d\u662f\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002</li> <li><code>-U_FORTIFY_SOURCE</code>: \u7528\u4e8e\u53d6\u6d88 <code>_FORTIFY_SOURCE</code> \u5b8f\u7684\u5b9a\u4e49\uff0c\u8fd9\u610f\u5473\u7740\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5bf9\u53ef\u80fd\u5b58\u5728\u7f13\u51b2\u533a\u6ea2\u51fa\u98ce\u9669\u7684\u51fd\u6570\u8c03\u7528\u8fdb\u884c\u989d\u5916\u7684\u68c0\u67e5\u548c\u4fdd\u62a4\u3002\u662f\u7528\u6765\u9632\u6b62 __longjmp_chk \u4ee3\u7801\u68c0\u67e5\u5230\u5806\u6808\u5207\u6362\u4ee5\u540e\u62a5\u9519 (\u5f53\u6210\u662f stack smashing)\u3002</li> <li><code>-x c</code>: \u6307\u5b9a\u4e86\u8f93\u5165\u6587\u4ef6\u7684\u8bed\u8a00\u7c7b\u578b\u4e3aC\u8bed\u8a00\u3002</li> <li><code>-w</code>: \u5173\u95ed\u6240\u6709\u8b66\u544a\u4fe1\u606f\u3002</li> <li><code>-m32</code>: \u751f\u621032\u4f4d\u4ee3\u7801\u3002</li> </ul>"},{"location":"Tool/tool/#objdump","title":"objdump","text":"<ul> <li><code>-d</code>: \u53cd\u6c47\u7f16\u4ee3\u7801\u6bb5\u3002\u53cd\u6c47\u7f16\u6307\u5b9a\u7684\u76ee\u6807\u6587\u4ef6\u6216\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u6bb5\uff0c\u4e0d\u5305\u62ec\u5176\u4ed6\u6bb5\uff08\u5982\u6570\u636e\u6bb5\u3001BSS \u6bb5\u7b49\uff09\u3002</li> <li><code>-D</code>: \u53cd\u6c47\u7f16\u6240\u6709\u6bb5\u3002\u5305\u62ec\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u3002</li> <li><code>-h</code>: \u663e\u793a ELF \u6587\u4ef6\u7684\u5934\u4fe1\u606f\u3002</li> </ul>"},{"location":"Tool/tool/#readelf","title":"readelf","text":"<ul> <li>ELF (Executable and Linkable Format)\u662f\u4e00\u79cd\u7528\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u3001\u76ee\u6807\u6587\u4ef6\u548c\u5171\u4eab\u5e93\u7684\u6807\u51c6\u6587\u4ef6\u683c\u5f0f\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u7c7b Unix \u64cd\u4f5c\u7cfb\u7edf\u4e2d\u3002</li> <li><code>-a</code>: all\uff0c\u663e\u793aELF\u6587\u4ef6\u7684\u6240\u6709\u8282\uff08section\uff09\u548c\u6bb5\uff08segment\uff09\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u7b26\u53f7\u8868\u3001\u5b57\u7b26\u4e32\u8868\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u7b49\u3002</li> <li><code>-l</code>: \u663e\u793a ELF \u6587\u4ef6\u7684\u7a0b\u5e8f\u5934\uff08Program Header\uff09\u4fe1\u606f\u3002\u7a0b\u5e8f\u5934\u5305\u542b\u4e86\u5173\u4e8e ELF \u6587\u4ef6\u5982\u4f55\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u6bb5\uff08Segment\uff09\u7684\u5927\u5c0f\u3001\u7c7b\u578b\u3001\u504f\u79fb\u91cf\u7b49\u3002</li> <li><code>-S</code>: \u663e\u793a ELF \u6587\u4ef6\u4e2d\u7684\u6240\u6709 Section Header \u4fe1\u606f\u3002</li> </ul>"},{"location":"Tool/tool/#gdb","title":"gdb","text":"<ul> <li>a small tutorial for GDB</li> <li><code>starti</code>: \u5f00\u59cb\u6267\u884c\u7a0b\u5e8f\uff0c\u5e76\u5728\u6267\u884c\u7b2c\u4e00\u6761\u6307\u4ee4\u4e4b\u524d\u505c\u6b62\u3002\u8fd9\u4e2a\u547d\u4ee4\u901a\u5e38\u7528\u4e8e\u5728\u7a0b\u5e8f\u5f00\u59cb\u65f6\u8bbe\u7f6e\u65ad\u70b9\uff0c\u4ee5\u4fbf\u68c0\u67e5\u7a0b\u5e8f\u7684\u521d\u59cb\u72b6\u6001\u3002</li> <li><code>layout asm</code>: \u5207\u6362\u5230\u6c47\u7f16\u4ee3\u7801\u5e03\u5c40\u6a21\u5f0f</li> <li><code>layout src</code>: \u5207\u6362\u5230\u6e90\u4ee3\u7801\u5e03\u5c40\u6a21\u5f0f</li> <li><code>si</code>: \u5355\u6b65\u6267\u884c\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\u3002</li> <li><code>enter\u952e</code>\uff1a\u91cd\u590d\u4e0a\u4e00\u4e2a\u547d\u4ee4\u3002</li> <li><code>p $rsp</code>: \u6253\u5370\u5bc4\u5b58\u5668 <code>rsp</code> \u7684\u5f53\u524d\u503c\uff0c\u4e5f\u5c31\u662f\u663e\u793a\u6808\u6307\u9488\u7684\u503c\uff08\u4e00\u4e2a\u5730\u5740\uff0c\u8868\u793a\u6808\u9876\u7684\u5185\u5b58\u5730\u5740\uff09\u3002\u4f8b\u5b50\u8f93\u51fa<code>$1 = (void *) 0x7fffffffdcb0</code></li> <li><code>x/x $rsp</code>: \u4ee5\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u68c0\u67e5\u5185\u5b58\u5730\u5740 <code>$rsp</code> \u5904\u7684\u503c\u3002x \u547d\u4ee4\u662fGDB\u4e2d\u7684\u4e00\u4e2a\u68c0\u67e5\u5185\u5b58\u7684\u547d\u4ee4\uff0c/x \u8868\u793a\u4ee5\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u663e\u793a\uff0c$rsp \u662f\u5bc4\u5b58\u5668 <code>rsp</code> \u7684\u5f53\u524d\u503c\uff0c\u5b83\u6307\u5411\u6808\u9876\u3002\u4f8b\u5b50\u8f93\u51fa<code>0x7fffffffdcb0: 0x00000001</code>\uff0c\u8fd9\u4e2a<code>M[rsp]</code>\u662f1\u663e\u7136\u975e\u6cd5\uff0c\u8fdb\u800c\u5bfc\u81f4segmentation fault\u3002</li> <li><code>x/i $eip</code>: <code>/i</code>\u8fd9\u662f x \u547d\u4ee4\u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4ee5\u6307\u4ee4\u7684\u5f62\u5f0f\u663e\u793a\u5185\u5b58\u5185\u5bb9\u3002\u8f93\u51fa<code>0x0000000000007c00:  jmp    0x7c00</code></li> <li><code>x/16b 0x7c00</code>: \u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff0c\u4ece\u5185\u5b58\u5730\u5740 0x7c00 \u5f00\u59cb\uff0c\u663e\u793a 16 \u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u3002</li> <li><code>tui disable</code>: \u7981\u7528 TUI\uff08Text User Interface\uff0c\u6587\u672c\u7528\u6237\u754c\u9762\uff09\u6a21\u5f0f\uff0c\u4f7f GDB \u6062\u590d\u5230\u9ed8\u8ba4\u7684\u547d\u4ee4\u884c\u754c\u9762\u3002</li> <li><code>info registers</code>: \u663e\u793a\u5f53\u524d\u6240\u6709\u5bc4\u5b58\u5668\u7684\u503c\u3002</li> <li><code>info registers eflag</code>: \u663e\u793a\u5f53\u524d eflag \u5bc4\u5b58\u5668\u7684\u503c\u3002</li> <li><code>start</code>: \u5f00\u59cb\u8c03\u8bd5\u3002</li> <li><code>s</code>: \u5355\u6b65\u6267\u884c\u3002</li> <li><code>r</code>: \u91cd\u65b0\u6267\u884c\u7a0b\u5e8f\uff0c\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\u6216\u9047\u5230\u65ad\u70b9\u3002</li> <li><code>-x</code>: \u6307\u5b9a\u4e00\u4e2a\u5305\u542bGDB\u547d\u4ee4\u7684\u811a\u672c\u6587\u4ef6\uff0c\u4ee5\u4fbf\u5728\u542f\u52a8GDB\u65f6\u81ea\u52a8\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u3002\u4f8b\u5982<code>gdb -x init.gdb</code> or <code>gdb -x debug.py</code></li> <li><code>c</code>: \u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\u6216\u9047\u5230\u65ad\u70b9\u3002</li> <li><code>n</code>: \u4e0b\u4e00\u6b65\u3002</li> <li><code>rs</code>: \u53cd\u5411\u6267\u884c\u3002\u9700\u8981.gdb\u6587\u4ef6\u91cc\u5199\u4e86<code>target record-full</code>\u624d\u80fd\u652f\u6301\u53cd\u5411\u6267\u884c\u3002</li> <li><code>info proc mappings</code>: \u663e\u793a\u5f53\u524d\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u5c04\u3002</li> <li><code>info inferiors</code>: \u663e\u793a\u5f53\u524d\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u4fe1\u606f\uff08pid\u7b49\uff09\u3002</li> <li><code>!pmap pid</code>: \u4ee5pmap\u547d\u4ee4\u663e\u793a\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u5c04\u3002</li> <li><code>p/s argv</code>: \u6253\u5370 argv \u53d8\u91cf\u7684\u503c\u3002<code>/s</code> \u662f print string \u7684\u7f29\u5199\uff0c\u7528\u4e8e\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u6253\u5370\u53d8\u91cf\u7684\u503c\u3002</li> <li><code>finish</code>: \u5728\u5f53\u524d\u51fd\u6570\u4e2d\u6267\u884c\u5230\u51fd\u6570\u7ed3\u675f\u3002</li> <li><code>wa environ</code>: \u8bbe\u7f6ewatch point\uff0c\u5f53environ\u53d8\u91cf\u7684\u503c\u6539\u53d8\u65f6\uff0c\u89e6\u53d1\u65ad\u70b9\u3002\u8bbe\u7f6e<code>wa environ</code>\u597d\u540e\u518d\u6267\u884c<code>c</code>\u5373\u53ef\u3002</li> <li><code>rwatch *0xfde0</code>: \u5728\u5185\u5b58\u5730\u5740 0xfde0 \u5904\u8bbe\u7f6e\u4e00\u4e2a read watch point\uff0c\u770b\u4e0b\u8c01\u8bfb\u4e86\u5b83\u3002</li> <li><code>-x init.gdb</code>: \u6267\u884c init.gdb \u6587\u4ef6\u4e2d\u7684\u547d\u4ee4\u3002</li> <li><code>inferior 2</code>: \u5207\u6362\u5230\u5b50\u8fdb\u7a0b 2\u3002</li> <li><code>start minimal</code>: \u4ee5minimal\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u4f5c\u4e3a\u53c2\u6570\u8fd0\u884c\u7a0b\u5e8f\u3002\uff08\u4f8b\u5982\u5728debug loader\u7a0b\u5e8f\u65f6\uff0c\u60f3\u770bloader\u662f\u5982\u4f55\u5c06minimal\u52a0\u8f7d\u5230\u5185\u5b58\u7684\uff0c\u53ef\u4ee5\u5728gdb loader\u540e\u8f93\u5165\u8fd9\u4e2a\uff09</li> </ul>"},{"location":"Tool/tool/#initgdb","title":"init.gdb\u793a\u4f8b","text":"Bash<pre><code>set follow-fork-mode child # \u8bbe\u7f6eGDB\u5728\u9047\u5230fork\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u8ddf\u8e2a\u5b50\u8fdb\u7a0b\u3002\nset detach-on-fork off     # \u8bbe\u7f6eGDB\u5728fork\u540e\u4e0d\u5206\u79bb (detach) \u5b50\u8fdb\u7a0b\uff0c\u5373\u4fdd\u6301\u5bf9\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u7684\u8ddf\u8e2a\u3002\nset follow-exec-mode same  # \u8bbe\u7f6eGDB\u5728\u9047\u5230exec\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u7ee7\u7eed\u8ddf\u8e2a\u5f53\u524d\u8fdb\u7a0b\u3002\nset confirm off            # \u5173\u95edGDB\u7684\u786e\u8ba4\u63d0\u793a\u3002\nset pagination off         # \u5173\u95edGDB\u7684\u5206\u9875\u8f93\u51fa\u3002\ntui disable                # \u7981\u7528GDB\u7684\u6587\u672c\u7528\u6237\u754c\u9762 (TUI)\u3002\n\nskip function strlen       # \u8df3\u8fc7\u5bf9strlen\u51fd\u6570\u7684\u5355\u6b65\u6267\u884c\u3002\nskip function strcpy\nskip function strchr\nskip function print\nskip function zalloc\nskip function peek\nskip function gettoken\n\nsource visualize.py        # \u52a0\u8f7d\u4e00\u4e2a\u540d\u4e3avisualize.py\u7684\u811a\u672c\uff0c\u7528\u4e8e\u53ef\u89c6\u5316\u8c03\u8bd5\u6570\u636e\u3002\n\nbreak runcmd               # \u5728runcmd\u51fd\u6570\u5904\u8bbe\u7f6e\u65ad\u70b9\u3002\n\nrun                        # \u8fd0\u884c\u7a0b\u5e8f\u3002\nn                          # \u5355\u6b65\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\ndefine hook-stop           # \u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3ahook-stop\u7684GDB\u94a9\u5b50 (hook)\uff0c\u5728\u6bcf\u6b21\u505c\u6b62\u65f6\u6267\u884c\u3002\n    pdump                  # \u5728hook-stop\u94a9\u5b50\u4e2d\u6267\u884c\u7684\u547d\u4ee4\uff0c\u7528\u4e8e\u6253\u5370\u67d0\u4e9b\u8c03\u8bd5\u4fe1\u606f\u3002\nend\n</code></pre>"},{"location":"Tool/tool/#visualizepy","title":"visualize.py","text":"Python<pre><code>import gdb\nimport subprocess\nimport re\n\nclass ProcDump(gdb.Command):\n    def __init__(self):\n        super(ProcDump, self).__init__(\n            \"pdump\", gdb.COMMAND_DATA, gdb.COMPLETE_SYMBOL\n        )\n\n    def invoke(self, *_):\n        print()\n\n        for proc in gdb.inferiors():\n            pid = proc.pid\n            if int(pid) == 0:\n                continue\n\n            print(f'Process {proc.num} ({pid})', end='')\n            if proc is gdb.selected_inferior():\n                print('*')\n            else:\n                print()\n\n            for fd_desc in subprocess.check_output(\n                ['ls', '-l', f'/proc/{pid}/fd'], encoding='utf-8'\n            ).splitlines()[1:]:\n                perm, *_, fd, _, fname = fd_desc.split()\n\n                if int(fd) &lt; 10:\n                    if 'rw' in perm: rw = '&lt;-&gt;'\n                    elif 'r' in perm: rw = '&lt;--'\n                    elif 'w' in perm: rw = '--&gt;'\n                    if 'pipe:' in fname:\n                        pipe_id = re.search(f'[0-9]+', fname).group()\n                        print(f'    {fd} {rw} [=== {pipe_id} ===]')\n                    else:\n                        print(f'    {fd} {rw} {fname}')\n\n            print()\n\nProcDump()\n</code></pre>"},{"location":"Tool/tool/#strace","title":"strace","text":"<ul> <li>strace: system call trace</li> <li><code>-f</code>: \u8ddf\u8e2a\u6240\u6709\u5b50\u8fdb\u7a0b\uff0c\u5373\u5982\u679c\u7a0b\u5e8f\u521b\u5efa\u4e86\u5b50\u8fdb\u7a0b\uff0cstrace \u4e5f\u4f1a\u8ddf\u8e2a\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u7684\u7cfb\u7edf\u8c03\u7528\u3002</li> <li><code>-T</code>: \u663e\u793a\u6bcf\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u6267\u884c\u65f6\u95f4\u3002</li> </ul>"},{"location":"Tool/tool/#grep","title":"grep","text":"<ul> <li><code>grep -nr \"\\bmain\\b\" nemu/src</code>: \u641c\u7d22 nemu/src \u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u4e2d\u5305\u542b \"main\" \u5b57\u7b26\u4e32\u7684\u884c\uff0c\u5e76\u663e\u793a\u884c\u53f7\u548c\u6587\u4ef6\u540d\u3002<code>-r</code> \u8868\u793a\u9012\u5f52\u641c\u7d22\u5b50\u76ee\u5f55\u3002<code>-n</code> \u8868\u793a\u663e\u793a\u884c\u53f7\u3002<code>\\b</code> \u8868\u793a\u5355\u8bcd\u8fb9\u754c\uff0c\u786e\u4fdd \"main\" \u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u5355\u8bcd\u3002</li> <li><code>grep -v</code>: <code>-v</code>\u8868\u793a\u53cd\u5411\u5339\u914d\uff0c\u5373\u8f93\u51fa\u4e0d\u5305\u542b\u5339\u914d\u6a21\u5f0f\u7684\u884c\u3002</li> <li><code>grep -e</code>: <code>-e</code>\u6307\u5b9a\u8981\u641c\u7d22\u7684pattern\u3002</li> <li><code>grep -E</code>: \u5f00\u542f\u6b63\u5219\u8868\u8fbe\u5f0f\u3002</li> </ul>"},{"location":"Tool/tool/#vim","title":"vim","text":"<ul> <li><code>vimtutor</code>: \u542f\u52a8 Vim \u81ea\u5e26\u7684\u4ea4\u4e92\u5f0f\u6559\u7a0b\u3002</li> <li><code>%</code>: \u5728 Vim \u4e2d\uff0c<code>%</code>\u7b26\u53f7\u8868\u793a\u5f53\u524d\u6587\u4ef6\u540d\u3002\u6240\u4ee5\uff0c<code>%!grep -v -e open</code> \u5b9e\u9645\u4e0a\u662f\u5728\u5bf9\u5f53\u524d\u6587\u4ef6\u6267\u884c grep \u547d\u4ee4\u3002</li> <li><code>!</code>: \u7528\u4e8e\u5728 Vim \u4e2d\u6267\u884c\u5916\u90e8\u547d\u4ee4\u3002\u5b83\u544a\u8bc9 Vim \u63a5\u4e0b\u6765\u7684\u90e8\u5206\u662f\u4e00\u4e2a\u5916\u90e8\u547d\u4ee4\uff0c\u800c\u4e0d\u662f Vim \u5185\u90e8\u547d\u4ee4\u3002</li> <li><code>%!grep -v -e open</code>: \u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u641c\u7d22\u4e0d\u5305\u542b \"open\" \u5b57\u7b26\u4e32\u7684\u884c\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002</li> <li> <p><code>i1&lt;ESC&gt;q1yyp&lt;C-a&gt;q98@1</code>: \u4e00\u6b21\u6027\u751f\u6210 1 ~ 100 \u4e4b\u95f4\u7684\u6570\u5b57\uff1a</p> Bash<pre><code>1\n2\n3\n.....\n98\n99\n100\n</code></pre> <ul> <li><code>i1&lt;ESC&gt;</code>: \u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u8f93\u5165\u6570\u5b571\uff0c\u7136\u540e\u6309Esc\u952e\u9000\u51fa\u63d2\u5165\u6a21\u5f0f\u3002</li> <li><code>q1yyp</code>: \u5f55\u5236\u4e00\u4e2a\u540d\u4e3a1\u7684\u5b8f\uff0c\u5185\u5bb9\u662f\u590d\u5236\u5f53\u524d\u884c\u5e76\u7c98\u8d34\u4e00\u6b21\u3002</li> <li><code>&lt;C-a&gt;</code>: \u6267\u884cCtrl+a\uff0cCtrl+a\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6309\u952e\u7ec4\u5408\uff0c\u7528\u4e8e\u6267\u884c\u6570\u5b57\u9012\u589e\u64cd\u4f5c\u3002</li> <li><code>q</code>: \u9000\u51fa\u5b8f\u5f55\u5236\u6a21\u5f0f\u3002</li> <li><code>98@1</code>: \u8c03\u7528\u540d\u4e3a1\u7684\u5b8f98\u6b21\u3002</li> </ul> </li> </ul>"},{"location":"Tool/tool/#make","title":"make","text":"<ul> <li><code>-nB</code>: \u5b83\u7684\u4f5c\u7528\u662f\u6267\u884c Makefile \u4e2d\u7684\u89c4\u5219\uff0c\u4f46\u4e0d\u5b9e\u9645\u6267\u884c\u4efb\u4f55\u547d\u4ee4\uff0c\u800c\u662f\u6253\u5370\u51fa\u5982\u679c\u6267\u884c\u8fd9\u4e9b\u547d\u4ee4\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002<code>-n</code> \u9009\u9879\u8868\u793a\u201c\u5e72\u8fd0\u884c\u201d\uff0c\u5373\u53ea\u663e\u793a\u547d\u4ee4\u800c\u4e0d\u6267\u884c\u5b83\u4eec\uff0c\u800c <code>-B</code> \u9009\u9879\u5219\u8868\u793a\u201c\u5f3a\u5236\u91cd\u65b0\u751f\u6210\u6240\u6709\u76ee\u6807\u201d\uff0c\u5373\u4f7f\u5b83\u4eec\u5df2\u7ecf\u662f\u6700\u65b0\u7684\u3002</li> <li><code>.PHONY: run clean</code>: \u8fd9\u662f Makefile \u4e2d\u7684\u89c4\u5219\uff0c\u7528\u4e8e\u5b9a\u4e49\u4f2a\u76ee\u6807 <code>run</code> \u548c <code>clean</code>\u3002\u4f2a\u76ee\u6807\u4e0d\u662f\u5b9e\u9645\u7684\u6587\u4ef6\uff0c\u800c\u662f\u4e00\u4e2a\u6807\u7b7e\uff0c\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u52a8\u4f5c\u3002\u5728 Makefile \u4e2d\uff0c\u4f2a\u76ee\u6807\u901a\u5e38\u7528\u4e8e\u5b9a\u4e49\u4e00\u4e9b\u4e0d\u4f9d\u8d56\u4e8e\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u7f16\u8bd1\u3001\u8fd0\u884c\u548c\u6e05\u7406\u3002</li> <li><code>$@</code>: \u662f\u4e00\u4e2a\u81ea\u52a8\u53d8\u91cf\uff0c\u8868\u793a\u76ee\u6807\u6587\u4ef6\u7684\u540d\u79f0\u3002</li> <li><code>$&lt;</code>: \u8fd9\u4e2a\u81ea\u52a8\u53d8\u91cf\u8868\u793a\u7b2c\u4e00\u4e2a\u4f9d\u8d56\u6587\u4ef6\u7684\u540d\u79f0\u3002</li> <li><code>$^</code>: \u8fd9\u4e2a\u81ea\u52a8\u53d8\u91cf\u8868\u793a\u6240\u6709\u4f9d\u8d56\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u4ee5\u7a7a\u683c\u5206\u9694\u3002</li> <li><code>NAME := hello</code>: \u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf NAME\uff0c\u5176\u503c\u4e3a hello</li> <li> <p>example 1: \u8bb0\u5f55\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5e76\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4fdd\u5b58\u5230\u4e00\u4e2a\u540d\u4e3a compile.log \u7684\u6587\u4ef6\u4e2d\u3002</p> <ul> <li><code>grep</code> \u547d\u4ee4\u7528\u4e8e\u8fc7\u6ee4\u8f93\u51fa\uff0c\u53ea\u4fdd\u7559\u4e0d\u5305\u542b\u4ee5 <code>#</code>\u3001<code>echo</code>\u3001<code>mkdir</code> \u6216 <code>make</code> \u5f00\u5934\u7684\u884c\u3002</li> <li><code>sed</code> \u547d\u4ee4\u7528\u4e8e\u6587\u672c\u66ff\u6362\u3002\u8fd9\u91cc\u7684\u66ff\u6362\u89c4\u5219\u662f\u5c06\u73af\u5883\u53d8\u91cf <code>AM_HOME</code> \u66ff\u6362\u4e3a\u7a7a\u5b57\u7b26\u4e32 <code>\\AM</code>\u3002<code>g</code> \u8868\u793a\u5168\u5c40\u66ff\u6362\uff0c\u5373\u66ff\u6362\u6240\u6709\u5339\u914d\u7684\u5b57\u7b26\u4e32\u3002\u63a5\u7740\u7ee7\u7eed\u5c06\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55 <code>$(PWD)</code> \u66ff\u6362\u4e3a <code>.</code></li> </ul> Bash<pre><code>make -nB \\\n      | grep -ve '^\\(\\#\\|echo\\|mkdir\\|make\\)' \\\n      | sed \"s#$(AM_HOME)#\\AM#g\" \\\n      | sed \"s#$(PWD)#.#g\" \\\n      &gt; compile.log\n</code></pre> </li> <li> <p>example 2: \u4f7f\u7528 grep \u8fc7\u6ee4\u6389\u4ee5 <code>#</code>\u3001<code>echo</code> \u6216 <code>mkdir</code> \u5f00\u5934\u7684\u884c\u3002</p> Bash<pre><code>make -nB | grep -ve '^\\(\\#\\|echo\\|mkdir\\)' | vim -\n:set nowrap  # vim \u4e0d\u6362\u884c\u663e\u793a\n:g/fixdep/d  # vim \u5220\u9664\u6240\u6709\u542bfixdep\u7684\u884c\n:g/mv/d      # vim \u5220\u9664\u6240\u6709\u542bmv\u7684\u884c\n:execute \"normal \\&lt;c-v&gt;\" # wsl\u91ccCTRL+v\u662f\u7c98\u8d34\u800c\u4e0d\u662f\u8fdb\u5165visual block mode\uff0c\u53ea\u80fd\u5148\u7528\u8fd9\u4e2aworkaround\u4e86\n:'&lt;,'&gt;s/ /\\r/g # \u5c06\u6240\u6709\u7a7a\u683c\u66ff\u6362\u4e3a\u56de\u8f66\u7b26\u3002\u5176\u4e2d'&lt;,'&gt;\u662f\u7528visual mode\u9009\u4e2d\u4e00\u884c\u5c31\u81ea\u52a8\u51fa\u6765\u4e86\n</code></pre> </li> <li> <p>\u60f3\u8981\u770b\u5230 make \u8fc7\u7a0b\u4e2d\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u9700\u8981\u5728 makeFile \u91cc\u7684 CFLAGS \u91cc\u52a0\u4e0a<code>-Wl,--verbose</code></p> </li> <li><code>make gdb</code>: \u542f\u52a8 GDB \u8c03\u8bd5\u5668\uff0c\u5e76\u5c06\u7a0b\u5e8f\u52a0\u8f7d\u5230 GDB \u4e2d\u3002</li> </ul>"},{"location":"Tool/tool/#qemu-system-x86_64","title":"qemu-system-x86_64","text":"<ul> <li><code>qemu-system-x86_64 -monitor stdio minimal.img</code>: \u542f\u52a8 QEMU \u6a21\u62df\u5668\u5e76\u52a0\u8f7d\u4e00\u4e2a\u540d\u4e3a minimal.img \u7684\u78c1\u76d8\u955c\u50cf\u6587\u4ef6\u3002\u8fd9\u4e2a\u6307\u4ee4\u7684\u4f5c\u7528\u662f\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u7684 x86_64 \u67b6\u6784\u7684\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u5e76\u4e14\u901a\u8fc7\u6807\u51c6\u8f93\u5165\u8f93\u51fa\uff08stdio\uff09\u6765\u4e0e QEMU \u76d1\u89c6\u5668\u8fdb\u884c\u4ea4\u4e92(<code>-monitor stdio</code>)\u3002</li> <li><code>-s</code>: \u8868\u793a\u542f\u7528GDB\u8c03\u8bd5\u670d\u52a1\u5668\uff0c\u5141\u8bb8\u8fdc\u7a0bGDB\u8c03\u8bd5\u5668\u8fde\u63a5\u5230QEMU\u5b9e\u4f8b\u3002</li> <li><code>-S</code>: \u8868\u793a\u5728\u542f\u52a8\u65f6\u51bb\u7ed3CPU\uff0c\u7b49\u5f85\u8fdc\u7a0bGDB\u8c03\u8bd5\u5668\u8fde\u63a5\u540e\u518d\u7ee7\u7eed\u6267\u884c\u3002</li> </ul>"},{"location":"Tool/tool/#vscode","title":"vscode","text":"<ul> <li>ctl-p\uff0c\u7136\u540e\u8f93\u5165#offsetof\uff0c\u9009\u62e9\u4e2d\u95f4\u6709\u4e24\u6760\u7684\u6846\u6846\uff0c\u5373\u53ef\u627e\u5230offsetof\u51fd\u6570\u7684\u5b9a\u4e49\u3002</li> <li>\u914d\u7f6e vscode<ul> <li>\u914d\u7f6e\u89e3\u6790\u9009\u9879: c_cpp_properties.json<ul> <li>\u89e3\u9501\u6b63\u786e\u7684\u4ee3\u7801\u89e3\u6790</li> </ul> </li> <li>\u914d\u7f6e\u6784\u5efa\u9009\u9879: tasks.json<ul> <li>\u89e3\u9501make (\u53ef\u8ddf\u547d\u4ee4\u884c\u53c2\u6570)</li> </ul> </li> <li>\u914d\u7f6e\u8fd0\u884c\u9009\u9879: launch.json<ul> <li>\u89e3\u9501\u5355\u6b65\u8c03\u8bd5</li> </ul> </li> </ul> </li> </ul>"},{"location":"Tool/tool/#vim_1","title":"vim \u914d\u7f6e","text":"<ol> <li>vim \u6559\u7a0b: vim-galore</li> <li> <p>\u914d\u7f6evim\u5982\u4e0b\uff1a</p> Bash<pre><code>linux$ cp /etc/vim/vimrc ~/.vimrc\nlinux$ vim ~/.vimrc\n</code></pre> <p>\u5728 vimrc \u672b\u5c3e\u4e2d\u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> Bash<pre><code>syntax on\nset background=dark\nfiletype plugin indent on\nset showmatch          \" Show matching brackets.\nset ignorecase         \" Do case insensitive matching\nset smartcase          \" Do smart case matching\nset incsearch          \" Incremental search\nset hidden             \" Hide buffers when they are abandoned\nsetlocal noswapfile \" \u4e0d\u8981\u751f\u6210swap\u6587\u4ef6\nset bufhidden=hide \" \u5f53buffer\u88ab\u4e22\u5f03\u7684\u65f6\u5019\u9690\u85cf\u5b83\n\"colorscheme evening \" \u8bbe\u5b9a\u914d\u8272\u65b9\u6848\nset number \" \u663e\u793a\u884c\u53f7\nset cursorline \" \u7a81\u51fa\u663e\u793a\u5f53\u524d\u884c\nset ruler \" \u6253\u5f00\u72b6\u6001\u680f\u6807\u5c3a\nset shiftwidth=2 \" \u8bbe\u5b9a &lt;&lt; \u548c &gt;&gt; \u547d\u4ee4\u79fb\u52a8\u65f6\u7684\u5bbd\u5ea6\u4e3a 2\nset softtabstop=2 \" \u4f7f\u5f97\u6309\u9000\u683c\u952e\u65f6\u53ef\u4ee5\u4e00\u6b21\u5220\u6389 2 \u4e2a\u7a7a\u683c\nset tabstop=2 \" \u8bbe\u5b9a tab \u957f\u5ea6\u4e3a 2\nset nobackup \" \u8986\u76d6\u6587\u4ef6\u65f6\u4e0d\u5907\u4efd\nset autochdir \" \u81ea\u52a8\u5207\u6362\u5f53\u524d\u76ee\u5f55\u4e3a\u5f53\u524d\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\nset backupcopy=yes \" \u8bbe\u7f6e\u5907\u4efd\u65f6\u7684\u884c\u4e3a\u4e3a\u8986\u76d6\nset hlsearch \" \u641c\u7d22\u65f6\u9ad8\u4eae\u663e\u793a\u88ab\u627e\u5230\u7684\u6587\u672c\nset noerrorbells \" \u5173\u95ed\u9519\u8bef\u4fe1\u606f\u54cd\u94c3\nset novisualbell \" \u5173\u95ed\u4f7f\u7528\u53ef\u89c6\u54cd\u94c3\u4ee3\u66ff\u547c\u53eb\nset t_vb= \" \u7f6e\u7a7a\u9519\u8bef\u94c3\u58f0\u7684\u7ec8\u7aef\u4ee3\u7801\nset matchtime=2 \" \u77ed\u6682\u8df3\u8f6c\u5230\u5339\u914d\u62ec\u53f7\u7684\u65f6\u95f4\nset magic \" \u8bbe\u7f6e\u9b54\u672f\nset smartindent \" \u5f00\u542f\u65b0\u884c\u65f6\u4f7f\u7528\u667a\u80fd\u81ea\u52a8\u7f29\u8fdb\nset backspace=indent,eol,start \" \u4e0d\u8bbe\u5b9a\u5728\u63d2\u5165\u72b6\u6001\u65e0\u6cd5\u7528\u9000\u683c\u952e\u548c Delete \u952e\u5220\u9664\u56de\u8f66\u7b26\nset cmdheight=1 \" \u8bbe\u5b9a\u547d\u4ee4\u884c\u7684\u884c\u6570\u4e3a 1\nset laststatus=2 \" \u663e\u793a\u72b6\u6001\u680f (\u9ed8\u8ba4\u503c\u4e3a 1, \u65e0\u6cd5\u663e\u793a\u72b6\u6001\u680f)\nset statusline=\\ %&lt;%F[%1*%M%*%n%R%H]%=\\ %y\\ %0(%{&amp;fileformat}\\ %{&amp;encoding}\\ Ln\\ %l,\\ Col\\ %c/%L%) \" \u8bbe\u7f6e\u5728\u72b6\u6001\u884c\u663e\u793a\u7684\u4fe1\u606f\nset foldenable \" \u5f00\u59cb\u6298\u53e0\nset foldmethod=syntax \" \u8bbe\u7f6e\u8bed\u6cd5\u6298\u53e0\nset foldcolumn=0 \" \u8bbe\u7f6e\u6298\u53e0\u533a\u57df\u7684\u5bbd\u5ea6\nsetlocal foldlevel=1 \" \u8bbe\u7f6e\u6298\u53e0\u5c42\u6570\u4e3a 1\nnnoremap &lt;space&gt; @=((foldclosed(line('.')) &lt; 0) ? 'zc' : 'zo')&lt;CR&gt; \" \u7528\u7a7a\u683c\u952e\u6765\u5f00\u5173\u6298\u53e0\n</code></pre> </li> </ol>"},{"location":"Tool/tool/#some-example","title":"some example","text":"<ol> <li> <p>hello.c C<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n    printf(\"Hello World\\n\");\n}\n</code></pre> Bash<pre><code>linux$ gcc a.c                    # this generate a.out\nlinux$ ./a.out \nHello World\nlinux$ hexdump a.out | less\nlinux$ gcc -c a.c                 # this generate a.o\nlinux$ objdump -d a.o             # disassemble\n\na.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 &lt;main&gt;:\n   0:   f3 0f 1e fa             endbr64 \n   4:   55                      push   %rbp\n   5:   48 89 e5                mov    %rsp,%rbp\n   8:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # f &lt;main+0xf&gt;\n   f:   48 89 c7                mov    %rax,%rdi\n  12:   e8 00 00 00 00          call   17 &lt;main+0x17&gt;\n  17:   b8 00 00 00 00          mov    $0x0,%eax\n  1c:   5d                      pop    %rbp\n  1d:   c3                      ret    \n</code></pre></p> </li> <li> Bash<pre><code>gcc -g -S minimal.S &gt; minimal.s  # \u4f7f\u7528 GCC \u7f16\u8bd1\u5668\u5c06\u6c47\u7f16\u4ee3\u7801\u6587\u4ef6 minimal.S \u7f16\u8bd1\u6210\u6c47\u7f16\u4ee3\u7801\u6587\u4ef6 minimal.s\uff0c\u5e76\u4e14\u751f\u6210\u8c03\u8bd5\u4fe1\u606f\u3002\nas minimal.s -o minimal.o        # \u4f7f\u7528 as \u6c47\u7f16\u5668\u5c06\u6c47\u7f16\u4ee3\u7801\u6587\u4ef6 minimal.s \u7f16\u8bd1\u6210\u76ee\u6807\u6587\u4ef6 minimal.o\nld -o minimal minimal.o          # \u4f7f\u7528 ld \u94fe\u63a5\u5668\u5c06\u76ee\u6807\u6587\u4ef6 minimal.o \u94fe\u63a5\u6210\u53ef\u6267\u884c\u6587\u4ef6 minimal\n</code></pre> </li> </ol>"},{"location":"%E8%AF%AD%E8%A8%80/C/C/","title":"C","text":"<p> \u7ea6 0 \u4e2a\u5b57 </p>"},{"location":"%E8%AF%AD%E8%A8%80/Cpp/Cpp_primer/","title":"C++ primer 5th edition","text":"<p> \u7ea6 606 \u4e2a\u5b57  1 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"%E8%AF%AD%E8%A8%80/Cpp/Cpp_primer/#ch1","title":"Ch1 \u5f00\u59cb","text":"<ol> <li> <p><code>iostream</code> - \u6807\u51c6\u8f93\u5165\u8f93\u51fa\u6d41\u3002</p> \u57fa\u7840\u7c7b\u578b \u5bf9\u8c61 istream cin - \u6807\u51c6\u8f93\u5165 ostream cout - \u6807\u51c6\u8f93\u51fa\uff0ccerr - \u6807\u51c6\u9519\u8bef\uff0cclog cout &lt;&lt; \"hello\" &lt;&lt; endl; cin &gt;&gt; v1 &gt;&gt; v2; &lt;&lt;\u662f\u8f93\u51fa\u8fd0\u7b97\u7b26\uff0c\u5176\u5de6\u4fa7\u8fd0\u7b97\u5bf9\u8c61\uff1aostream\u5bf9\u8c61\uff0c\u53f3\u4fa7\u8fd0\u7b97\u5bf9\u8c61\uff1a\u8981\u6253\u5370\u7684\u5185\u5bb9\uff0c\u8fd4\u56de\u5de6\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u3002\u53f3\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u503c\u5199\u5230\u5de6\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u8868\u793a\u7684\u8f93\u51fa\u6d41 &gt;&gt;\u662f\u8f93\u5165\u8fd0\u7b97\u7b26\uff0c\u5176\u5de6\u4fa7\u8fd0\u7b97\u5bf9\u8c61\uff1aistream\u5bf9\u8c61\uff0c\u53f3\u4fa7\uff1a\u8981\u8f93\u5165\u7684\u5185\u5bb9\uff0c\u8fd4\u56de\u5de6\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u3002\u4ece\u5de6\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u6240\u6307\u5b9a\u7684\u8f93\u5165\u6d41\u8bfb\u53d6\u6570\u636e\uff0c\u5b58\u5165\u53f3\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u4e2d <p>C++<pre><code>while (std::cin &gt;&gt; value)\n</code></pre> \u6b64\u8868\u8fbe\u5f0f\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u6570\uff0c\u4fdd\u5b58\u5728value\u4e2d\u3002\u8f93\u5165\u8fd0\u7b97\u7b26\uff08\u53c2\u89c11.2\u8282\uff0c\u7b2c7\u9875\uff09\u8fd4\u56de\u5176\u5de6\u4fa7\u8fd0\u7b97\u5bf9\u8c61\uff0c\u5728\u672c\u4f8b\u4e2d\u662fstd::cin\u3002\u56e0\u6b64\uff0c\u6b64\u5faa\u73af\u6761\u4ef6\u5b9e\u9645\u4e0a\u68c0\u6d4b\u7684\u662fstd::cin\u3002</p> <p>\u5f53\u6211\u4eec\u4f7f\u7528\u4e00\u4e2aistream\u5bf9\u8c61\u4f5c\u4e3a\u6761\u4ef6\u65f6\uff0c\u5176\u6548\u679c\u662f\u68c0\u6d4b\u6d41\u7684\u72b6\u6001\u3002\u5982\u679c\u6d41\u662f\u6709\u6548\u7684\uff0c\u5373\u6d41\u672a\u9047\u5230\u9519\u8bef\uff0c\u90a3\u4e48\u68c0\u6d4b\u6210\u529f\u3002\u5f53\u9047\u5230\u6587\u4ef6\u7ed3\u675f\u7b26\uff08end-of-file\uff09\uff0c\u6216\u9047\u5230\u4e00\u4e2a\u65e0\u6548\u8f93\u5165\u65f6\uff08\u4f8b\u5982\u8bfb\u5165\u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u6574\u6570\uff09\uff0cistream\u5bf9\u8c61\u7684\u72b6\u6001\u4f1a\u53d8\u4e3a\u65e0\u6548\u3002\u5904\u4e8e\u65e0\u6548\u72b6\u6001\u7684istream\u5bf9\u8c61\u4f1a\u4f7f\u6761\u4ef6\u53d8\u4e3a\u5047\u3002</p> </li> <li> <p>\u6ce8\u91ca\u754c\u5b9a\u7b26\u4e0d\u80fd\u5d4c\u5957\uff1a<code>/*.../*..*/...*/</code> \u662f\u9519\u8bef\u7684</p> </li> <li>\u5934\u6587\u4ef6\uff1a\u4f7f\u7c7b\u6216\u5176\u4ed6\u540d\u5b57\u7684\u5b9a\u4e49\u53ef\u88ab\u591a\u4e2a\u7a0b\u5e8f\u4f7f\u7528\u7684\u4e00\u79cd\u673a\u5236</li> <li>C++\uff1a\u9759\u6001\u6570\u636e\u7c7b\u578b\u8bed\u8a00\uff0c\u5b83\u7684\u7c7b\u578b\u68c0\u67e5\u53d1\u751f\u5728\u7f16\u8bd1\u65f6\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u5fc5\u987b\u77e5\u9053\u7a0b\u5e8f\u4e2d\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b</li> <li> <p>C++\u6807\u51c6\u89c4\u5b9a\u7684\u7b97\u672f\u7c7b\u578b\u5c3a\u5bf8\u7684\u6700\u5c0f\u503c\uff1aint\u6700\u5c0f\u536016\u4f4d\uff0c\u4f46\u6211\u4eec\u7528\u7684\u4e00\u822c\u662f\u536032\u4f4d\u7684int</p> \u7c7b\u578b \u542b\u4e49 \u6700\u5c0f\u5c3a\u5bf8 bool \u5e03\u5c14\u7c7b\u578b \u672a\u5b9a\u4e49 char \u5b57\u7b26 8 \u4f4d wchar_t \u5bbd\u5b57\u7b26 16 \u4f4d char16_t Unicode \u5b57\u7b26 16 \u4f4d char32_t Unicode \u5b57\u7b26 32 \u4f4d short \u77ed\u6574\u578b 16 \u4f4d int \u6574\u578b 16 \u4f4d long \u957f\u6574\u578b 32 \u4f4d long long \u957f\u6574\u578b 64 \u4f4d float \u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570 6 \u4f4d\u6709\u6548\u6570\u5b57 double \u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 6 \u4f4d\u6709\u6548\u6570\u5b57 long double \u6269\u5c55\u7cbe\u5ea6\u6d6e\u70b9\u6570 10\u4f4d\u6709\u6548\u6570\u5b57 </li> <li> <p>\u5b57\u8282\uff1a\u53ef\u5bfb\u5740\u7684\u6700\u5c0f\u5185\u5b58\u5757\u300232\u4f4d\u673a\u5668\u4e0a\u4e00\u4e2a\u5b57\u4e3a4\u4e2a\u5b57\u8282\uff1a</p> \u5730\u5740 \u6bcf\u4e2a\u5b57\u8282\u5177\u4f53\u5185\u5bb9 736424 00111011 736425 00011011 736426 01110001 736427 01100100 <p>\u5b57\u957f</p> <p>\u5b57\u957f\uff08\u4e5f\u79f0\u4e3a\u673a\u5668\u5b57\u957f\u6216\u5904\u7406\u5668\u5b57\u957f\uff09\u662f\u6307\u8ba1\u7b97\u673a\u5904\u7406\u5668\u4e00\u6b21\u6027\u80fd\u591f\u5904\u7406\u7684\u6570\u636e\u4f4d\u6570\u3002\u73b0\u4ee3 32 \u4f4d\u5904\u7406\u5668\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u5904\u7406 32 \u4f4d\u7684\u6570\u636e\uff0c\u5373 4 \u4e2a\u5b57\u8282\u3002</p> </li> </ol>"},{"location":"%E8%AF%AD%E8%A8%80/Cpp/Cpp_primer/#ch2","title":"Ch2 \u53d8\u91cf\u548c\u57fa\u7840\u7c7b\u578b","text":""},{"location":"%E8%AF%AD%E8%A8%80/Cpp/Essential_Cpp/","title":"Essential C++","text":"<p> \u7ea6 124 \u4e2a\u5b57 </p>"},{"location":"%E8%AF%AD%E8%A8%80/Cpp/Essential_Cpp/#ch1","title":"Ch1 \u5f00\u59cb","text":"<ol> <li>\u4e60\u60ef\u4e0a\uff0c\u7a0b\u5e8f\u6267\u884c\u65e0\u8bef\u65f6\u6211\u4eec\u4ee4main()\u8fd4\u56de0\uff0c\u82e5\u8fd4\u56de\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u8868\u793a\u7a0b\u5e8f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u9519\u8bef</li> <li> <p>\u4e24\u79cd\u521d\u59cb\u5316\u65b9\u6cd5\uff1a</p> Initialize Note <code>int num_tries = 0;</code> <code>int num_tries(0);</code> \u6784\u9020\u51fd\u6570\u8bed\u6cd5\uff0c\u6b64\u6cd5\u5b58\u5728\u7684\u539f\u56e0\u662f\u5982\u679c\u5bf9\u8c61\u9700\u8981\u591a\u4e2a\u521d\u503c\uff0c \u8fd9\u4e2a\u65b9\u6cd5\u5c31\u6709\u7528\u4e86\uff0c\u4f8b\u5982\u590d\u6570\u9700\u8981\u5b9e\u90e8\u548c\u865a\u90e8 </li> <li> <p>\u8f6c\u4e49\u5b57\u7b26\uff1a</p> \u8f6c\u4e49\u5b57\u7b26 \u542b\u4e49 \\n \u6362\u884c \\t \u5236\u8868\u7b26 \\0 null \\' ' \\'' '' <code>\\\\</code> \\ </li> </ol>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonCookBook/","title":"Python Cook Book","text":"<p> \u7ea6 357 \u4e2a\u5b57  49 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 2 \u5206\u949f</p>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonCookBook/#_1","title":"\u8d44\u6599","text":"<ul> <li>\u5728\u7ebf\u6559\u6750\uff1apython3-cookbook.</li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonCookBook/#_2","title":"\u89e3\u538b\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8d4b\u503c\u7ed9\u591a\u4e2a\u53d8\u91cf","text":"<ul> <li>\u661f\u53f7\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7528\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6bd4\u5982\uff0c\u4f60\u5728\u5b66\u4e60\u4e00\u95e8\u8bfe\u7a0b\uff0c\u5728\u5b66\u671f\u672b\u7684\u65f6\u5019\uff0c \u4f60\u60f3\u7edf\u8ba1\u4e0b\u5bb6\u5ead\u4f5c\u4e1a\u7684\u5e73\u5747\u6210\u7ee9\uff0c\u4f46\u662f\u6392\u9664\u6389\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5206\u6570\uff1a</li> </ul> Python<pre><code>def drop_first_last(grades):\n    first, *middle, last = grades\n    return avg(middle)\n</code></pre>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonCookBook/#_3","title":"\u5355\u4e0b\u5212\u7ebf\u548c\u53cc\u4e0b\u5212\u7ebf","text":"<ul> <li>Python\u7a0b\u5e8f\u5458\u4e0d\u53bb\u4f9d\u8d56\u8bed\u8a00\u7279\u6027\u53bb\u5c01\u88c5\u6570\u636e\uff0c\u800c\u662f\u901a\u8fc7\u9075\u5faa\u4e00\u5b9a\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u547d\u540d\u89c4\u7ea6\u6765\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\u3002 </li> <li>\u7b2c\u4e00\u4e2a\u7ea6\u5b9a\u662f\u4efb\u4f55\u4ee5\u5355\u4e0b\u5212\u7ebf_\u5f00\u5934\u7684\u540d\u5b57\u90fd\u5e94\u8be5\u662f\u5185\u90e8\u5b9e\u73b0\u3002</li> <li>\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u5f00\u59cb\u4f1a\u5bfc\u81f4\u8bbf\u95ee\u540d\u79f0\u53d8\u6210\u5176\u4ed6\u5f62\u5f0f\u3002</li> <li>\u5927\u591a\u6570\u800c\u8a00\uff0c\u4f60\u5e94\u8be5\u8ba9\u4f60\u7684\u975e\u516c\u5171\u540d\u79f0\u4ee5\u5355\u4e0b\u5212\u7ebf\u5f00\u5934\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u6e05\u695a\u4f60\u7684\u4ee3\u7801\u4f1a\u6d89\u53ca\u5230\u5b50\u7c7b\uff0c \u5e76\u4e14\u6709\u4e9b\u5185\u90e8\u5c5e\u6027\u5e94\u8be5\u5728\u5b50\u7c7b\u4e2d\u9690\u85cf\u8d77\u6765\uff0c\u90a3\u4e48\u624d\u8003\u8651\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u65b9\u6848\u3002</li> <li>Reference</li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonCookBook/#_4","title":"\u88c5\u9970\u5668","text":"<ul> <li> <p>\u4e00\u4e2a\u88c5\u9970\u5668\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u51fd\u6570\u3002 Python<pre><code>import time\nfrom functools import wraps\n\ndef timethis(func): # timethis\u662f\u4e2a\u88c5\u9970\u5668\n    '''\n    Decorator that reports the execution time.\n    '''\n    @wraps(func) # \u4f5c\u7528\u662f\u5c06\u88ab\u88c5\u9970\u51fd\u6570\u7684\u5143\u6570\u636e\uff08\u5982\u51fd\u6570\u540d\u3001\u6587\u6863\u5b57\u7b26\u4e32\u7b49\uff09\u590d\u5236\u5230\n    # \u88c5\u9970\u5668\u5185\u90e8\u7684\u51fd\u6570 wrapper \u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u5728\u4f7f\u7528\u88c5\u9970\u5668\u540e\u4e22\u5931\u539f\u51fd\u6570\u7684\u5143\u6570\u636e\u3002\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(func.__name__, end-start)\n        return result\n    return wrapper\n</code></pre> \u8fd9\u4e24\u8005\u7b49\u4ef7\uff1a Python<pre><code>@timethis\ndef countdown(n):\n    while n &gt; 0:\n        n -= 1\n</code></pre> Python<pre><code>def countdown(n):\n    while n &gt; 0:\n        n -= 1\ncountdown = timethis(countdown)\n</code></pre> \u7528\u6cd5\uff1a Python<pre><code>&gt;&gt;&gt; countdown(100000)\ncountdown 0.008917808532714844\n</code></pre></p> </li> <li> <p><code>@property</code> \u662fPython\u4e2d\u7684\u4e00\u79cd\u88c5\u9970\u5668\u8bed\u6cd5\uff0c\u7528\u4e8e\u5b9a\u4e49\u5c5e\u6027\u8bbf\u95ee\u5668\u3002\u5b83\u5141\u8bb8\u4f60\u5c06\u7c7b\u7684\u65b9\u6cd5\u8f6c\u6362\u4e3a\u5c5e\u6027\uff0c\u4ece\u800c\u53ef\u4ee5\u901a\u8fc7\u70b9\u53f7\uff08.\uff09\u64cd\u4f5c\u7b26\u6765\u8bbf\u95ee\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u800c\u4e0d\u9700\u8981\u8c03\u7528\u5b83\u4eec\u3002</p> </li> </ul> Python<pre><code>class Person:\n    def __init__(self, first_name):\n        self._first_name = first_name\n\n    # Getter function\n    @property\n    def first_name(self):\n        return self._first_name # example: a.first_name, note: no () needed\n\n    # Setter function\n    @first_name.setter\n    def first_name(self, value):\n        if not isinstance(value, str):\n            raise TypeError('Expected a string')\n        self._first_name = value\n\n    # Deleter function (optional)\n    @first_name.deleter\n    def first_name(self):\n        raise AttributeError(\"Can't delete attribute\")\n</code></pre>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonMisc/","title":"Python Misc","text":"<p> \u7ea6 180 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 1 \u5206\u949f</p>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonMisc/#mircosoft-python-tutorial","title":"Mircosoft Python Tutorial","text":""},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonMisc/#_1","title":"\u8d44\u6599","text":"<ul> <li>\u89c6\u9891\uff1a\u2705\u521d\u7ea7\uff0c\ud83d\udccc\u8fdb\u9636\uff0c\ud83d\udccc\u9ad8\u9636</li> <li>\u4ee3\u7801\uff1aGit repo</li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonMisc/#installing-packages","title":"Installing packages","text":"<ol> <li> <p><code>pip install colorama</code> or <code>pip install -r requirements.txt</code></p> </li> <li> <p>Virtual environment</p> <ul> <li>By default, packages are installed globally<ul> <li>Version manangement becomes a challenge</li> </ul> </li> <li>Virtual environments can be used to contain and manage package collections<ul> <li>Really just a folder behind the scenes with all your packages</li> </ul> </li> </ul> </li> <li> <p>Creating a virtual environment:</p> <ul> <li><code>pip install virtualenv</code> # install virtual environment</li> <li>Windows system<ul> <li><code>python -m venv &lt;folder_name&gt;</code></li> </ul> </li> <li>Linux system<ul> <li><code>virtualenv &lt;folder_name&gt;</code></li> </ul> </li> </ul> </li> <li> <p>Using virtual environment:</p> <ul> <li>Windows system<ul> <li>cmd.exe: <code>&lt;folder_name&gt;\\Scripts\\activate.bat</code></li> <li>Powershell: <code>&lt;folder_name&gt;\\Scripts\\activate.ps1</code></li> <li>bash shell: <code>. ./&lt;folder_name&gt;/Scripts/activate</code></li> </ul> </li> <li>Linux system<ul> <li><code>&lt;folder_name&gt;/bin/activate</code></li> </ul> </li> </ul> </li> <li> <p>Decorators:</p> <ul> <li>Adjectives</li> <li>Add additional functionality to code</li> </ul> </li> </ol>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonMisc/#python-100-days","title":"Python 100 Days","text":""},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonMisc/#_2","title":"\u8d44\u6599","text":"<ul> <li>\u4ee3\u7801\uff1ajackfrued python 100 days</li> <li>\u89c6\u9891\uff1ajackfrued</li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonMisc/#_3","title":"\u5b89\u88c5","text":"<ol> <li>Windows\u4e0b\u5e38\u7528\u547d\u4ee4<ul> <li><code>python --version</code></li> <li><code>pip --version</code></li> <li><code>python -m pip install -U --user pip</code> # \u66f4\u65b0 pip</li> <li><code>pip config set global.index-usr https://pypi.doubanio.com/simple</code> # \u6362\u56fd\u5185\u6e90</li> <li><code>pip install jupyter</code> # \u5b89\u88c5 jupyter</li> <li><code>pip install -U jupyter</code> # \u5347\u7ea7 jupyter</li> <li><code>jupyter notebook</code> # \u542f\u52a8 jupyter</li> <li><code>pip install pyzmq==20.0.0</code> # \u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684 pyzmq</li> </ul> </li> </ol>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonforDataAnalysis3E/","title":"Python for Data Analysis","text":"<p> \u7ea6 15 \u4e2a\u5b57 </p>"},{"location":"%E8%AF%AD%E8%A8%80/Python/PythonforDataAnalysis3E/#_1","title":"\u8d44\u6599","text":"<ul> <li>\u5728\u7ebf\u6559\u6750\uff1aPython for Data Analysis (3E).</li> </ul>"},{"location":"%E8%AF%AD%E8%A8%80/Python/jupyter/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AC%AC01%E5%A4%A9/","title":"Python\u6570\u636e\u5206\u6790\u7b2c01\u5929","text":"In\u00a0[1]: Copied! <pre>names = ['\u5b59\u609f\u7a7a', '\u674e\u5143\u82b3', '\u767d\u8d77', '\u72c4\u4ec1\u6770', '\u8fbe\u6469']\ncourses = ['\u8bed\u6587', '\u6570\u5b66', '\u82f1\u8bed']\n</pre> names = ['\u5b59\u609f\u7a7a', '\u674e\u5143\u82b3', '\u767d\u8d77', '\u72c4\u4ec1\u6770', '\u8fbe\u6469'] courses = ['\u8bed\u6587', '\u6570\u5b66', '\u82f1\u8bed'] In\u00a0[2]: Copied! <pre>import random\nscores = [[random.randrange(60, 101) for _ in range(3)] for _ in range(5)]\nscores\n</pre> import random scores = [[random.randrange(60, 101) for _ in range(3)] for _ in range(5)] scores Out[2]: <pre>[[97, 84, 68], [95, 82, 82], [77, 76, 68], [84, 78, 82], [99, 69, 81]]</pre> In\u00a0[3]: Copied! <pre># \u7edf\u8ba1\u6bcf\u4e2a\u5b66\u751f\u7684\u8003\u8bd5\u5e73\u5747\u5206\nfor idx, name in enumerate(names):\n    temp = scores[idx]\n    avg_score = sum(temp) / len(temp)\n    print(f'{name}\u8003\u8bd5\u5e73\u5747\u5206\u4e3a\uff1a{avg_score:.1f}\u5206')\n</pre> # \u7edf\u8ba1\u6bcf\u4e2a\u5b66\u751f\u7684\u8003\u8bd5\u5e73\u5747\u5206 for idx, name in enumerate(names):     temp = scores[idx]     avg_score = sum(temp) / len(temp)     print(f'{name}\u8003\u8bd5\u5e73\u5747\u5206\u4e3a\uff1a{avg_score:.1f}\u5206') <pre>\u5b59\u609f\u7a7a\u8003\u8bd5\u5e73\u5747\u5206\u4e3a\uff1a83.0\u5206\n\u674e\u5143\u82b3\u8003\u8bd5\u5e73\u5747\u5206\u4e3a\uff1a86.3\u5206\n\u767d\u8d77\u8003\u8bd5\u5e73\u5747\u5206\u4e3a\uff1a73.7\u5206\n\u72c4\u4ec1\u6770\u8003\u8bd5\u5e73\u5747\u5206\u4e3a\uff1a81.3\u5206\n\u8fbe\u6469\u8003\u8bd5\u5e73\u5747\u5206\u4e3a\uff1a83.0\u5206\n</pre> <p>\u603b\u4f53\u65b9\u5dee\uff1a</p> <p>$$ \\sigma^2 = \\frac {1} {N} \\sum_{i=1}^{N} {(x_i - \\mu)^2)} $$</p> <p>\u603b\u4f53\u6807\u51c6\u5dee\uff1a</p> <p>$$ \\sigma = \\sqrt {\\frac {1} {N} \\sum_{i=1}^{N} {(x_i - \\mu)^2)}} $$</p> In\u00a0[6]: Copied! <pre>def mean(nums):\n    \"\"\"\u6c42\u5747\u503c\"\"\"\n    return sum(nums) / len(nums)\n\ndef variance(nums):\n    \"\"\"\u6c42\u65b9\u5dee\"\"\"\n    mean_value = mean(nums)\n    return mean([(num - mean_value) ** 2 for num in nums])\n\ndef stddev(nums):\n    \"\"\"\u6c42\u6807\u51c6\u5dee\"\"\"\n    return variance(nums) ** 0.5\n</pre> def mean(nums):     \"\"\"\u6c42\u5747\u503c\"\"\"     return sum(nums) / len(nums)  def variance(nums):     \"\"\"\u6c42\u65b9\u5dee\"\"\"     mean_value = mean(nums)     return mean([(num - mean_value) ** 2 for num in nums])  def stddev(nums):     \"\"\"\u6c42\u6807\u51c6\u5dee\"\"\"     return variance(nums) ** 0.5 In\u00a0[7]: Copied! <pre>for idx, course in enumerate(courses):\n    temp = [scores[i][idx] for i in range(len(names))]\n    max_score, min_score = max(temp), min(temp)\n    print(f'{course}\u6210\u7ee9\u6700\u9ad8\u5206\uff1a{max_score}\u5206')\n    print(f'{course}\u6210\u7ee9\u6700\u4f4e\u5206\uff1a{min_score}\u5206')\n    print(f'{course}\u6210\u7ee9\u6807\u51c6\u5dee\uff1a{stddev(temp)}')\n</pre> for idx, course in enumerate(courses):     temp = [scores[i][idx] for i in range(len(names))]     max_score, min_score = max(temp), min(temp)     print(f'{course}\u6210\u7ee9\u6700\u9ad8\u5206\uff1a{max_score}\u5206')     print(f'{course}\u6210\u7ee9\u6700\u4f4e\u5206\uff1a{min_score}\u5206')     print(f'{course}\u6210\u7ee9\u6807\u51c6\u5dee\uff1a{stddev(temp)}') <pre>\u8bed\u6587\u6210\u7ee9\u6700\u9ad8\u5206\uff1a99\u5206\n\u8bed\u6587\u6210\u7ee9\u6700\u4f4e\u5206\uff1a77\u5206\n\u8bed\u6587\u6210\u7ee9\u6807\u51c6\u5dee\uff1a8.475848040166836\n\u6570\u5b66\u6210\u7ee9\u6700\u9ad8\u5206\uff1a84\u5206\n\u6570\u5b66\u6210\u7ee9\u6700\u4f4e\u5206\uff1a69\u5206\n\u6570\u5b66\u6210\u7ee9\u6807\u51c6\u5dee\uff1a5.230678732248808\n\u82f1\u8bed\u6210\u7ee9\u6700\u9ad8\u5206\uff1a82\u5206\n\u82f1\u8bed\u6210\u7ee9\u6700\u4f4e\u5206\uff1a68\u5206\n\u82f1\u8bed\u6210\u7ee9\u6807\u51c6\u5dee\uff1a6.705221845696084\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}